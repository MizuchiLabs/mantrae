// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tcp_router_dns_provider.sql

package db

import (
	"context"

	"github.com/mizuchilabs/mantrae/server/internal/store/schema"
)

const createTcpRouterDNSProvider = `-- name: CreateTcpRouterDNSProvider :exec
INSERT
OR IGNORE INTO tcp_router_dns_providers (tcp_router_id, dns_provider_id)
VALUES
  (?, ?)
`

type CreateTcpRouterDNSProviderParams struct {
	TcpRouterID   int64 `json:"tcpRouterId"`
	DnsProviderID int64 `json:"dnsProviderId"`
}

func (q *Queries) CreateTcpRouterDNSProvider(ctx context.Context, arg CreateTcpRouterDNSProviderParams) error {
	_, err := q.exec(ctx, q.createTcpRouterDNSProviderStmt, createTcpRouterDNSProvider, arg.TcpRouterID, arg.DnsProviderID)
	return err
}

const deleteTcpRouterDNSProvider = `-- name: DeleteTcpRouterDNSProvider :exec
DELETE FROM tcp_router_dns_providers
WHERE
  tcp_router_id = ?
  AND dns_provider_id = ?
`

type DeleteTcpRouterDNSProviderParams struct {
	TcpRouterID   int64 `json:"tcpRouterId"`
	DnsProviderID int64 `json:"dnsProviderId"`
}

func (q *Queries) DeleteTcpRouterDNSProvider(ctx context.Context, arg DeleteTcpRouterDNSProviderParams) error {
	_, err := q.exec(ctx, q.deleteTcpRouterDNSProviderStmt, deleteTcpRouterDNSProvider, arg.TcpRouterID, arg.DnsProviderID)
	return err
}

const getDnsProvidersByTcpRouter = `-- name: GetDnsProvidersByTcpRouter :many
SELECT
  dp.id, dp.name, dp.type, dp.config, dp.created_at, dp.updated_at, dp.is_default
FROM
  dns_providers dp
  JOIN tcp_router_dns_providers trdp ON dp.id = trdp.dns_provider_id
WHERE
  trdp.tcp_router_id = ?
`

func (q *Queries) GetDnsProvidersByTcpRouter(ctx context.Context, tcpRouterID int64) ([]DnsProvider, error) {
	rows, err := q.query(ctx, q.getDnsProvidersByTcpRouterStmt, getDnsProvidersByTcpRouter, tcpRouterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DnsProvider
	for rows.Next() {
		var i DnsProvider
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Config,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDefault,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTcpRouterDomains = `-- name: GetTcpRouterDomains :many
SELECT
  tr.id AS router_id,
  tr.name AS router_name,
  tr.config AS config_json,
  p.name AS profile_name,
  dp.id AS dns_provider_id,
  dp.name AS dns_provider_name
FROM
  tcp_routers tr
  JOIN profiles p ON tr.profile_id = p.id
  LEFT JOIN tcp_router_dns_providers link ON link.tcp_router_id = tr.id
  LEFT JOIN dns_providers dp ON link.dns_provider_id = dp.id
`

type GetTcpRouterDomainsRow struct {
	RouterID        int64             `json:"routerId"`
	RouterName      string            `json:"routerName"`
	ConfigJson      *schema.TCPRouter `json:"configJson"`
	ProfileName     string            `json:"profileName"`
	DnsProviderID   *int64            `json:"dnsProviderId"`
	DnsProviderName *string           `json:"dnsProviderName"`
}

func (q *Queries) GetTcpRouterDomains(ctx context.Context) ([]GetTcpRouterDomainsRow, error) {
	rows, err := q.query(ctx, q.getTcpRouterDomainsStmt, getTcpRouterDomains)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTcpRouterDomainsRow
	for rows.Next() {
		var i GetTcpRouterDomainsRow
		if err := rows.Scan(
			&i.RouterID,
			&i.RouterName,
			&i.ConfigJson,
			&i.ProfileName,
			&i.DnsProviderID,
			&i.DnsProviderName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
