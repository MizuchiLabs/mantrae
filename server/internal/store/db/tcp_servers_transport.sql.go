// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tcp_servers_transport.sql

package db

import (
	"context"

	"github.com/mizuchilabs/mantrae/server/internal/store/schema"
)

const countTcpServersTransports = `-- name: CountTcpServersTransports :one
SELECT
  COUNT(*)
FROM
  tcp_servers_transports
WHERE
  profile_id = ?1
  AND (
    CAST(?2 AS TEXT) IS NULL
    OR agent_id = CAST(?2 AS TEXT)
  )
`

type CountTcpServersTransportsParams struct {
	ProfileID int64   `json:"profileId"`
	AgentID   *string `json:"agentId"`
}

func (q *Queries) CountTcpServersTransports(ctx context.Context, arg CountTcpServersTransportsParams) (int64, error) {
	row := q.queryRow(ctx, q.countTcpServersTransportsStmt, countTcpServersTransports, arg.ProfileID, arg.AgentID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTcpServersTransport = `-- name: CreateTcpServersTransport :one
INSERT INTO
  tcp_servers_transports (
    id,
    profile_id,
    agent_id,
    name,
    config,
    created_at,
    updated_at
  )
VALUES
  (
    ?,
    ?,
    ?,
    ?,
    ?,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
  ) RETURNING id, profile_id, agent_id, name, config, enabled, created_at, updated_at
`

type CreateTcpServersTransportParams struct {
	ID        string                      `json:"id"`
	ProfileID int64                       `json:"profileId"`
	AgentID   *string                     `json:"agentId"`
	Name      string                      `json:"name"`
	Config    *schema.TCPServersTransport `json:"config"`
}

func (q *Queries) CreateTcpServersTransport(ctx context.Context, arg CreateTcpServersTransportParams) (TcpServersTransport, error) {
	row := q.queryRow(ctx, q.createTcpServersTransportStmt, createTcpServersTransport,
		arg.ID,
		arg.ProfileID,
		arg.AgentID,
		arg.Name,
		arg.Config,
	)
	var i TcpServersTransport
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.AgentID,
		&i.Name,
		&i.Config,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTcpServersTransport = `-- name: DeleteTcpServersTransport :exec
DELETE FROM tcp_servers_transports
WHERE
  id = ?
`

func (q *Queries) DeleteTcpServersTransport(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteTcpServersTransportStmt, deleteTcpServersTransport, id)
	return err
}

const getTcpServersTransport = `-- name: GetTcpServersTransport :one
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at
FROM
  tcp_servers_transports
WHERE
  id = ?
`

func (q *Queries) GetTcpServersTransport(ctx context.Context, id string) (TcpServersTransport, error) {
	row := q.queryRow(ctx, q.getTcpServersTransportStmt, getTcpServersTransport, id)
	var i TcpServersTransport
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.AgentID,
		&i.Name,
		&i.Config,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTcpServersTransports = `-- name: ListTcpServersTransports :many
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at
FROM
  tcp_servers_transports
WHERE
  profile_id = ?1
  AND (
    CAST(?2 AS TEXT) IS NULL
    OR agent_id = CAST(?2 AS TEXT)
  )
ORDER BY
  created_at DESC
LIMIT
  COALESCE(CAST(?4 AS INTEGER), -1)
OFFSET
  COALESCE(CAST(?3 AS INTEGER), 0)
`

type ListTcpServersTransportsParams struct {
	ProfileID int64   `json:"profileId"`
	AgentID   *string `json:"agentId"`
	Offset    *int64  `json:"offset"`
	Limit     *int64  `json:"limit"`
}

func (q *Queries) ListTcpServersTransports(ctx context.Context, arg ListTcpServersTransportsParams) ([]TcpServersTransport, error) {
	rows, err := q.query(ctx, q.listTcpServersTransportsStmt, listTcpServersTransports,
		arg.ProfileID,
		arg.AgentID,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TcpServersTransport
	for rows.Next() {
		var i TcpServersTransport
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.AgentID,
			&i.Name,
			&i.Config,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTcpServersTransportsEnabled = `-- name: ListTcpServersTransportsEnabled :many
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at
FROM
  tcp_servers_transports
WHERE
  profile_id = ?
  AND enabled = TRUE
`

func (q *Queries) ListTcpServersTransportsEnabled(ctx context.Context, profileID int64) ([]TcpServersTransport, error) {
	rows, err := q.query(ctx, q.listTcpServersTransportsEnabledStmt, listTcpServersTransportsEnabled, profileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TcpServersTransport
	for rows.Next() {
		var i TcpServersTransport
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.AgentID,
			&i.Name,
			&i.Config,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTcpServersTransport = `-- name: UpdateTcpServersTransport :one
UPDATE tcp_servers_transports
SET
  name = ?,
  config = ?,
  enabled = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE
  id = ? RETURNING id, profile_id, agent_id, name, config, enabled, created_at, updated_at
`

type UpdateTcpServersTransportParams struct {
	Name    string                      `json:"name"`
	Config  *schema.TCPServersTransport `json:"config"`
	Enabled bool                        `json:"enabled"`
	ID      string                      `json:"id"`
}

func (q *Queries) UpdateTcpServersTransport(ctx context.Context, arg UpdateTcpServersTransportParams) (TcpServersTransport, error) {
	row := q.queryRow(ctx, q.updateTcpServersTransportStmt, updateTcpServersTransport,
		arg.Name,
		arg.Config,
		arg.Enabled,
		arg.ID,
	)
	var i TcpServersTransport
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.AgentID,
		&i.Name,
		&i.Config,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
