// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: server/v1/profile.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/mizuchilabs/mantrae/proto/gen/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProfileServiceName is the fully-qualified name of the ProfileService service.
	ProfileServiceName = "server.v1.ProfileService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProfileServiceGetProfileProcedure is the fully-qualified name of the ProfileService's GetProfile
	// RPC.
	ProfileServiceGetProfileProcedure = "/server.v1.ProfileService/GetProfile"
	// ProfileServiceCreateProfileProcedure is the fully-qualified name of the ProfileService's
	// CreateProfile RPC.
	ProfileServiceCreateProfileProcedure = "/server.v1.ProfileService/CreateProfile"
	// ProfileServiceUpdateProfileProcedure is the fully-qualified name of the ProfileService's
	// UpdateProfile RPC.
	ProfileServiceUpdateProfileProcedure = "/server.v1.ProfileService/UpdateProfile"
	// ProfileServiceDeleteProfileProcedure is the fully-qualified name of the ProfileService's
	// DeleteProfile RPC.
	ProfileServiceDeleteProfileProcedure = "/server.v1.ProfileService/DeleteProfile"
	// ProfileServiceListProfilesProcedure is the fully-qualified name of the ProfileService's
	// ListProfiles RPC.
	ProfileServiceListProfilesProcedure = "/server.v1.ProfileService/ListProfiles"
)

// ProfileServiceClient is a client for the server.v1.ProfileService service.
type ProfileServiceClient interface {
	GetProfile(context.Context, *connect.Request[v1.GetProfileRequest]) (*connect.Response[v1.GetProfileResponse], error)
	CreateProfile(context.Context, *connect.Request[v1.CreateProfileRequest]) (*connect.Response[v1.CreateProfileResponse], error)
	UpdateProfile(context.Context, *connect.Request[v1.UpdateProfileRequest]) (*connect.Response[v1.UpdateProfileResponse], error)
	DeleteProfile(context.Context, *connect.Request[v1.DeleteProfileRequest]) (*connect.Response[v1.DeleteProfileResponse], error)
	ListProfiles(context.Context, *connect.Request[v1.ListProfilesRequest]) (*connect.Response[v1.ListProfilesResponse], error)
}

// NewProfileServiceClient constructs a client for the server.v1.ProfileService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProfileServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProfileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	profileServiceMethods := v1.File_server_v1_profile_proto.Services().ByName("ProfileService").Methods()
	return &profileServiceClient{
		getProfile: connect.NewClient[v1.GetProfileRequest, v1.GetProfileResponse](
			httpClient,
			baseURL+ProfileServiceGetProfileProcedure,
			connect.WithSchema(profileServiceMethods.ByName("GetProfile")),
			connect.WithClientOptions(opts...),
		),
		createProfile: connect.NewClient[v1.CreateProfileRequest, v1.CreateProfileResponse](
			httpClient,
			baseURL+ProfileServiceCreateProfileProcedure,
			connect.WithSchema(profileServiceMethods.ByName("CreateProfile")),
			connect.WithClientOptions(opts...),
		),
		updateProfile: connect.NewClient[v1.UpdateProfileRequest, v1.UpdateProfileResponse](
			httpClient,
			baseURL+ProfileServiceUpdateProfileProcedure,
			connect.WithSchema(profileServiceMethods.ByName("UpdateProfile")),
			connect.WithClientOptions(opts...),
		),
		deleteProfile: connect.NewClient[v1.DeleteProfileRequest, v1.DeleteProfileResponse](
			httpClient,
			baseURL+ProfileServiceDeleteProfileProcedure,
			connect.WithSchema(profileServiceMethods.ByName("DeleteProfile")),
			connect.WithClientOptions(opts...),
		),
		listProfiles: connect.NewClient[v1.ListProfilesRequest, v1.ListProfilesResponse](
			httpClient,
			baseURL+ProfileServiceListProfilesProcedure,
			connect.WithSchema(profileServiceMethods.ByName("ListProfiles")),
			connect.WithClientOptions(opts...),
		),
	}
}

// profileServiceClient implements ProfileServiceClient.
type profileServiceClient struct {
	getProfile    *connect.Client[v1.GetProfileRequest, v1.GetProfileResponse]
	createProfile *connect.Client[v1.CreateProfileRequest, v1.CreateProfileResponse]
	updateProfile *connect.Client[v1.UpdateProfileRequest, v1.UpdateProfileResponse]
	deleteProfile *connect.Client[v1.DeleteProfileRequest, v1.DeleteProfileResponse]
	listProfiles  *connect.Client[v1.ListProfilesRequest, v1.ListProfilesResponse]
}

// GetProfile calls server.v1.ProfileService.GetProfile.
func (c *profileServiceClient) GetProfile(ctx context.Context, req *connect.Request[v1.GetProfileRequest]) (*connect.Response[v1.GetProfileResponse], error) {
	return c.getProfile.CallUnary(ctx, req)
}

// CreateProfile calls server.v1.ProfileService.CreateProfile.
func (c *profileServiceClient) CreateProfile(ctx context.Context, req *connect.Request[v1.CreateProfileRequest]) (*connect.Response[v1.CreateProfileResponse], error) {
	return c.createProfile.CallUnary(ctx, req)
}

// UpdateProfile calls server.v1.ProfileService.UpdateProfile.
func (c *profileServiceClient) UpdateProfile(ctx context.Context, req *connect.Request[v1.UpdateProfileRequest]) (*connect.Response[v1.UpdateProfileResponse], error) {
	return c.updateProfile.CallUnary(ctx, req)
}

// DeleteProfile calls server.v1.ProfileService.DeleteProfile.
func (c *profileServiceClient) DeleteProfile(ctx context.Context, req *connect.Request[v1.DeleteProfileRequest]) (*connect.Response[v1.DeleteProfileResponse], error) {
	return c.deleteProfile.CallUnary(ctx, req)
}

// ListProfiles calls server.v1.ProfileService.ListProfiles.
func (c *profileServiceClient) ListProfiles(ctx context.Context, req *connect.Request[v1.ListProfilesRequest]) (*connect.Response[v1.ListProfilesResponse], error) {
	return c.listProfiles.CallUnary(ctx, req)
}

// ProfileServiceHandler is an implementation of the server.v1.ProfileService service.
type ProfileServiceHandler interface {
	GetProfile(context.Context, *connect.Request[v1.GetProfileRequest]) (*connect.Response[v1.GetProfileResponse], error)
	CreateProfile(context.Context, *connect.Request[v1.CreateProfileRequest]) (*connect.Response[v1.CreateProfileResponse], error)
	UpdateProfile(context.Context, *connect.Request[v1.UpdateProfileRequest]) (*connect.Response[v1.UpdateProfileResponse], error)
	DeleteProfile(context.Context, *connect.Request[v1.DeleteProfileRequest]) (*connect.Response[v1.DeleteProfileResponse], error)
	ListProfiles(context.Context, *connect.Request[v1.ListProfilesRequest]) (*connect.Response[v1.ListProfilesResponse], error)
}

// NewProfileServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProfileServiceHandler(svc ProfileServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	profileServiceMethods := v1.File_server_v1_profile_proto.Services().ByName("ProfileService").Methods()
	profileServiceGetProfileHandler := connect.NewUnaryHandler(
		ProfileServiceGetProfileProcedure,
		svc.GetProfile,
		connect.WithSchema(profileServiceMethods.ByName("GetProfile")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceCreateProfileHandler := connect.NewUnaryHandler(
		ProfileServiceCreateProfileProcedure,
		svc.CreateProfile,
		connect.WithSchema(profileServiceMethods.ByName("CreateProfile")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceUpdateProfileHandler := connect.NewUnaryHandler(
		ProfileServiceUpdateProfileProcedure,
		svc.UpdateProfile,
		connect.WithSchema(profileServiceMethods.ByName("UpdateProfile")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceDeleteProfileHandler := connect.NewUnaryHandler(
		ProfileServiceDeleteProfileProcedure,
		svc.DeleteProfile,
		connect.WithSchema(profileServiceMethods.ByName("DeleteProfile")),
		connect.WithHandlerOptions(opts...),
	)
	profileServiceListProfilesHandler := connect.NewUnaryHandler(
		ProfileServiceListProfilesProcedure,
		svc.ListProfiles,
		connect.WithSchema(profileServiceMethods.ByName("ListProfiles")),
		connect.WithHandlerOptions(opts...),
	)
	return "/server.v1.ProfileService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProfileServiceGetProfileProcedure:
			profileServiceGetProfileHandler.ServeHTTP(w, r)
		case ProfileServiceCreateProfileProcedure:
			profileServiceCreateProfileHandler.ServeHTTP(w, r)
		case ProfileServiceUpdateProfileProcedure:
			profileServiceUpdateProfileHandler.ServeHTTP(w, r)
		case ProfileServiceDeleteProfileProcedure:
			profileServiceDeleteProfileHandler.ServeHTTP(w, r)
		case ProfileServiceListProfilesProcedure:
			profileServiceListProfilesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProfileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProfileServiceHandler struct{}

func (UnimplementedProfileServiceHandler) GetProfile(context.Context, *connect.Request[v1.GetProfileRequest]) (*connect.Response[v1.GetProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.ProfileService.GetProfile is not implemented"))
}

func (UnimplementedProfileServiceHandler) CreateProfile(context.Context, *connect.Request[v1.CreateProfileRequest]) (*connect.Response[v1.CreateProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.ProfileService.CreateProfile is not implemented"))
}

func (UnimplementedProfileServiceHandler) UpdateProfile(context.Context, *connect.Request[v1.UpdateProfileRequest]) (*connect.Response[v1.UpdateProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.ProfileService.UpdateProfile is not implemented"))
}

func (UnimplementedProfileServiceHandler) DeleteProfile(context.Context, *connect.Request[v1.DeleteProfileRequest]) (*connect.Response[v1.DeleteProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.ProfileService.DeleteProfile is not implemented"))
}

func (UnimplementedProfileServiceHandler) ListProfiles(context.Context, *connect.Request[v1.ListProfilesRequest]) (*connect.Response[v1.ListProfilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.ProfileService.ListProfiles is not implemented"))
}
