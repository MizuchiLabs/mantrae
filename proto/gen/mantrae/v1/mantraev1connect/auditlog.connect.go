// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mantrae/v1/auditlog.proto

package mantraev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/mizuchilabs/mantrae/proto/gen/mantrae/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuditLogServiceName is the fully-qualified name of the AuditLogService service.
	AuditLogServiceName = "mantrae.v1.AuditLogService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuditLogServiceListAuditLogsProcedure is the fully-qualified name of the AuditLogService's
	// ListAuditLogs RPC.
	AuditLogServiceListAuditLogsProcedure = "/mantrae.v1.AuditLogService/ListAuditLogs"
)

// AuditLogServiceClient is a client for the mantrae.v1.AuditLogService service.
type AuditLogServiceClient interface {
	ListAuditLogs(context.Context, *connect.Request[v1.ListAuditLogsRequest]) (*connect.Response[v1.ListAuditLogsResponse], error)
}

// NewAuditLogServiceClient constructs a client for the mantrae.v1.AuditLogService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuditLogServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuditLogServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	auditLogServiceMethods := v1.File_mantrae_v1_auditlog_proto.Services().ByName("AuditLogService").Methods()
	return &auditLogServiceClient{
		listAuditLogs: connect.NewClient[v1.ListAuditLogsRequest, v1.ListAuditLogsResponse](
			httpClient,
			baseURL+AuditLogServiceListAuditLogsProcedure,
			connect.WithSchema(auditLogServiceMethods.ByName("ListAuditLogs")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// auditLogServiceClient implements AuditLogServiceClient.
type auditLogServiceClient struct {
	listAuditLogs *connect.Client[v1.ListAuditLogsRequest, v1.ListAuditLogsResponse]
}

// ListAuditLogs calls mantrae.v1.AuditLogService.ListAuditLogs.
func (c *auditLogServiceClient) ListAuditLogs(ctx context.Context, req *connect.Request[v1.ListAuditLogsRequest]) (*connect.Response[v1.ListAuditLogsResponse], error) {
	return c.listAuditLogs.CallUnary(ctx, req)
}

// AuditLogServiceHandler is an implementation of the mantrae.v1.AuditLogService service.
type AuditLogServiceHandler interface {
	ListAuditLogs(context.Context, *connect.Request[v1.ListAuditLogsRequest]) (*connect.Response[v1.ListAuditLogsResponse], error)
}

// NewAuditLogServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuditLogServiceHandler(svc AuditLogServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	auditLogServiceMethods := v1.File_mantrae_v1_auditlog_proto.Services().ByName("AuditLogService").Methods()
	auditLogServiceListAuditLogsHandler := connect.NewUnaryHandler(
		AuditLogServiceListAuditLogsProcedure,
		svc.ListAuditLogs,
		connect.WithSchema(auditLogServiceMethods.ByName("ListAuditLogs")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/mantrae.v1.AuditLogService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuditLogServiceListAuditLogsProcedure:
			auditLogServiceListAuditLogsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuditLogServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuditLogServiceHandler struct{}

func (UnimplementedAuditLogServiceHandler) ListAuditLogs(context.Context, *connect.Request[v1.ListAuditLogsRequest]) (*connect.Response[v1.ListAuditLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.AuditLogService.ListAuditLogs is not implemented"))
}
