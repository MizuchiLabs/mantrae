// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mantrae/v1/agent.proto

package mantraev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/mizuchilabs/mantrae/proto/gen/mantrae/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AgentServiceName is the fully-qualified name of the AgentService service.
	AgentServiceName = "mantrae.v1.AgentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AgentServiceGetAgentProcedure is the fully-qualified name of the AgentService's GetAgent RPC.
	AgentServiceGetAgentProcedure = "/mantrae.v1.AgentService/GetAgent"
	// AgentServiceCreateAgentProcedure is the fully-qualified name of the AgentService's CreateAgent
	// RPC.
	AgentServiceCreateAgentProcedure = "/mantrae.v1.AgentService/CreateAgent"
	// AgentServiceUpdateAgentIPProcedure is the fully-qualified name of the AgentService's
	// UpdateAgentIP RPC.
	AgentServiceUpdateAgentIPProcedure = "/mantrae.v1.AgentService/UpdateAgentIP"
	// AgentServiceDeleteAgentProcedure is the fully-qualified name of the AgentService's DeleteAgent
	// RPC.
	AgentServiceDeleteAgentProcedure = "/mantrae.v1.AgentService/DeleteAgent"
	// AgentServiceListAgentsProcedure is the fully-qualified name of the AgentService's ListAgents RPC.
	AgentServiceListAgentsProcedure = "/mantrae.v1.AgentService/ListAgents"
	// AgentServiceHealthCheckProcedure is the fully-qualified name of the AgentService's HealthCheck
	// RPC.
	AgentServiceHealthCheckProcedure = "/mantrae.v1.AgentService/HealthCheck"
	// AgentServiceBootstrapAgentProcedure is the fully-qualified name of the AgentService's
	// BootstrapAgent RPC.
	AgentServiceBootstrapAgentProcedure = "/mantrae.v1.AgentService/BootstrapAgent"
	// AgentServiceRotateAgentTokenProcedure is the fully-qualified name of the AgentService's
	// RotateAgentToken RPC.
	AgentServiceRotateAgentTokenProcedure = "/mantrae.v1.AgentService/RotateAgentToken"
)

// AgentServiceClient is a client for the mantrae.v1.AgentService service.
type AgentServiceClient interface {
	GetAgent(context.Context, *connect.Request[v1.GetAgentRequest]) (*connect.Response[v1.GetAgentResponse], error)
	CreateAgent(context.Context, *connect.Request[v1.CreateAgentRequest]) (*connect.Response[v1.CreateAgentResponse], error)
	UpdateAgentIP(context.Context, *connect.Request[v1.UpdateAgentIPRequest]) (*connect.Response[v1.UpdateAgentIPResponse], error)
	DeleteAgent(context.Context, *connect.Request[v1.DeleteAgentRequest]) (*connect.Response[v1.DeleteAgentResponse], error)
	ListAgents(context.Context, *connect.Request[v1.ListAgentsRequest]) (*connect.Response[v1.ListAgentsResponse], error)
	HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
	BootstrapAgent(context.Context, *connect.Request[v1.BootstrapAgentRequest]) (*connect.Response[v1.BootstrapAgentResponse], error)
	RotateAgentToken(context.Context, *connect.Request[v1.RotateAgentTokenRequest]) (*connect.Response[v1.RotateAgentTokenResponse], error)
}

// NewAgentServiceClient constructs a client for the mantrae.v1.AgentService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAgentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AgentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	agentServiceMethods := v1.File_mantrae_v1_agent_proto.Services().ByName("AgentService").Methods()
	return &agentServiceClient{
		getAgent: connect.NewClient[v1.GetAgentRequest, v1.GetAgentResponse](
			httpClient,
			baseURL+AgentServiceGetAgentProcedure,
			connect.WithSchema(agentServiceMethods.ByName("GetAgent")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createAgent: connect.NewClient[v1.CreateAgentRequest, v1.CreateAgentResponse](
			httpClient,
			baseURL+AgentServiceCreateAgentProcedure,
			connect.WithSchema(agentServiceMethods.ByName("CreateAgent")),
			connect.WithClientOptions(opts...),
		),
		updateAgentIP: connect.NewClient[v1.UpdateAgentIPRequest, v1.UpdateAgentIPResponse](
			httpClient,
			baseURL+AgentServiceUpdateAgentIPProcedure,
			connect.WithSchema(agentServiceMethods.ByName("UpdateAgentIP")),
			connect.WithClientOptions(opts...),
		),
		deleteAgent: connect.NewClient[v1.DeleteAgentRequest, v1.DeleteAgentResponse](
			httpClient,
			baseURL+AgentServiceDeleteAgentProcedure,
			connect.WithSchema(agentServiceMethods.ByName("DeleteAgent")),
			connect.WithClientOptions(opts...),
		),
		listAgents: connect.NewClient[v1.ListAgentsRequest, v1.ListAgentsResponse](
			httpClient,
			baseURL+AgentServiceListAgentsProcedure,
			connect.WithSchema(agentServiceMethods.ByName("ListAgents")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		healthCheck: connect.NewClient[v1.HealthCheckRequest, v1.HealthCheckResponse](
			httpClient,
			baseURL+AgentServiceHealthCheckProcedure,
			connect.WithSchema(agentServiceMethods.ByName("HealthCheck")),
			connect.WithClientOptions(opts...),
		),
		bootstrapAgent: connect.NewClient[v1.BootstrapAgentRequest, v1.BootstrapAgentResponse](
			httpClient,
			baseURL+AgentServiceBootstrapAgentProcedure,
			connect.WithSchema(agentServiceMethods.ByName("BootstrapAgent")),
			connect.WithClientOptions(opts...),
		),
		rotateAgentToken: connect.NewClient[v1.RotateAgentTokenRequest, v1.RotateAgentTokenResponse](
			httpClient,
			baseURL+AgentServiceRotateAgentTokenProcedure,
			connect.WithSchema(agentServiceMethods.ByName("RotateAgentToken")),
			connect.WithClientOptions(opts...),
		),
	}
}

// agentServiceClient implements AgentServiceClient.
type agentServiceClient struct {
	getAgent         *connect.Client[v1.GetAgentRequest, v1.GetAgentResponse]
	createAgent      *connect.Client[v1.CreateAgentRequest, v1.CreateAgentResponse]
	updateAgentIP    *connect.Client[v1.UpdateAgentIPRequest, v1.UpdateAgentIPResponse]
	deleteAgent      *connect.Client[v1.DeleteAgentRequest, v1.DeleteAgentResponse]
	listAgents       *connect.Client[v1.ListAgentsRequest, v1.ListAgentsResponse]
	healthCheck      *connect.Client[v1.HealthCheckRequest, v1.HealthCheckResponse]
	bootstrapAgent   *connect.Client[v1.BootstrapAgentRequest, v1.BootstrapAgentResponse]
	rotateAgentToken *connect.Client[v1.RotateAgentTokenRequest, v1.RotateAgentTokenResponse]
}

// GetAgent calls mantrae.v1.AgentService.GetAgent.
func (c *agentServiceClient) GetAgent(ctx context.Context, req *connect.Request[v1.GetAgentRequest]) (*connect.Response[v1.GetAgentResponse], error) {
	return c.getAgent.CallUnary(ctx, req)
}

// CreateAgent calls mantrae.v1.AgentService.CreateAgent.
func (c *agentServiceClient) CreateAgent(ctx context.Context, req *connect.Request[v1.CreateAgentRequest]) (*connect.Response[v1.CreateAgentResponse], error) {
	return c.createAgent.CallUnary(ctx, req)
}

// UpdateAgentIP calls mantrae.v1.AgentService.UpdateAgentIP.
func (c *agentServiceClient) UpdateAgentIP(ctx context.Context, req *connect.Request[v1.UpdateAgentIPRequest]) (*connect.Response[v1.UpdateAgentIPResponse], error) {
	return c.updateAgentIP.CallUnary(ctx, req)
}

// DeleteAgent calls mantrae.v1.AgentService.DeleteAgent.
func (c *agentServiceClient) DeleteAgent(ctx context.Context, req *connect.Request[v1.DeleteAgentRequest]) (*connect.Response[v1.DeleteAgentResponse], error) {
	return c.deleteAgent.CallUnary(ctx, req)
}

// ListAgents calls mantrae.v1.AgentService.ListAgents.
func (c *agentServiceClient) ListAgents(ctx context.Context, req *connect.Request[v1.ListAgentsRequest]) (*connect.Response[v1.ListAgentsResponse], error) {
	return c.listAgents.CallUnary(ctx, req)
}

// HealthCheck calls mantrae.v1.AgentService.HealthCheck.
func (c *agentServiceClient) HealthCheck(ctx context.Context, req *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return c.healthCheck.CallUnary(ctx, req)
}

// BootstrapAgent calls mantrae.v1.AgentService.BootstrapAgent.
func (c *agentServiceClient) BootstrapAgent(ctx context.Context, req *connect.Request[v1.BootstrapAgentRequest]) (*connect.Response[v1.BootstrapAgentResponse], error) {
	return c.bootstrapAgent.CallUnary(ctx, req)
}

// RotateAgentToken calls mantrae.v1.AgentService.RotateAgentToken.
func (c *agentServiceClient) RotateAgentToken(ctx context.Context, req *connect.Request[v1.RotateAgentTokenRequest]) (*connect.Response[v1.RotateAgentTokenResponse], error) {
	return c.rotateAgentToken.CallUnary(ctx, req)
}

// AgentServiceHandler is an implementation of the mantrae.v1.AgentService service.
type AgentServiceHandler interface {
	GetAgent(context.Context, *connect.Request[v1.GetAgentRequest]) (*connect.Response[v1.GetAgentResponse], error)
	CreateAgent(context.Context, *connect.Request[v1.CreateAgentRequest]) (*connect.Response[v1.CreateAgentResponse], error)
	UpdateAgentIP(context.Context, *connect.Request[v1.UpdateAgentIPRequest]) (*connect.Response[v1.UpdateAgentIPResponse], error)
	DeleteAgent(context.Context, *connect.Request[v1.DeleteAgentRequest]) (*connect.Response[v1.DeleteAgentResponse], error)
	ListAgents(context.Context, *connect.Request[v1.ListAgentsRequest]) (*connect.Response[v1.ListAgentsResponse], error)
	HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error)
	BootstrapAgent(context.Context, *connect.Request[v1.BootstrapAgentRequest]) (*connect.Response[v1.BootstrapAgentResponse], error)
	RotateAgentToken(context.Context, *connect.Request[v1.RotateAgentTokenRequest]) (*connect.Response[v1.RotateAgentTokenResponse], error)
}

// NewAgentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAgentServiceHandler(svc AgentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	agentServiceMethods := v1.File_mantrae_v1_agent_proto.Services().ByName("AgentService").Methods()
	agentServiceGetAgentHandler := connect.NewUnaryHandler(
		AgentServiceGetAgentProcedure,
		svc.GetAgent,
		connect.WithSchema(agentServiceMethods.ByName("GetAgent")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceCreateAgentHandler := connect.NewUnaryHandler(
		AgentServiceCreateAgentProcedure,
		svc.CreateAgent,
		connect.WithSchema(agentServiceMethods.ByName("CreateAgent")),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceUpdateAgentIPHandler := connect.NewUnaryHandler(
		AgentServiceUpdateAgentIPProcedure,
		svc.UpdateAgentIP,
		connect.WithSchema(agentServiceMethods.ByName("UpdateAgentIP")),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceDeleteAgentHandler := connect.NewUnaryHandler(
		AgentServiceDeleteAgentProcedure,
		svc.DeleteAgent,
		connect.WithSchema(agentServiceMethods.ByName("DeleteAgent")),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceListAgentsHandler := connect.NewUnaryHandler(
		AgentServiceListAgentsProcedure,
		svc.ListAgents,
		connect.WithSchema(agentServiceMethods.ByName("ListAgents")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceHealthCheckHandler := connect.NewUnaryHandler(
		AgentServiceHealthCheckProcedure,
		svc.HealthCheck,
		connect.WithSchema(agentServiceMethods.ByName("HealthCheck")),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceBootstrapAgentHandler := connect.NewUnaryHandler(
		AgentServiceBootstrapAgentProcedure,
		svc.BootstrapAgent,
		connect.WithSchema(agentServiceMethods.ByName("BootstrapAgent")),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceRotateAgentTokenHandler := connect.NewUnaryHandler(
		AgentServiceRotateAgentTokenProcedure,
		svc.RotateAgentToken,
		connect.WithSchema(agentServiceMethods.ByName("RotateAgentToken")),
		connect.WithHandlerOptions(opts...),
	)
	return "/mantrae.v1.AgentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AgentServiceGetAgentProcedure:
			agentServiceGetAgentHandler.ServeHTTP(w, r)
		case AgentServiceCreateAgentProcedure:
			agentServiceCreateAgentHandler.ServeHTTP(w, r)
		case AgentServiceUpdateAgentIPProcedure:
			agentServiceUpdateAgentIPHandler.ServeHTTP(w, r)
		case AgentServiceDeleteAgentProcedure:
			agentServiceDeleteAgentHandler.ServeHTTP(w, r)
		case AgentServiceListAgentsProcedure:
			agentServiceListAgentsHandler.ServeHTTP(w, r)
		case AgentServiceHealthCheckProcedure:
			agentServiceHealthCheckHandler.ServeHTTP(w, r)
		case AgentServiceBootstrapAgentProcedure:
			agentServiceBootstrapAgentHandler.ServeHTTP(w, r)
		case AgentServiceRotateAgentTokenProcedure:
			agentServiceRotateAgentTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAgentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAgentServiceHandler struct{}

func (UnimplementedAgentServiceHandler) GetAgent(context.Context, *connect.Request[v1.GetAgentRequest]) (*connect.Response[v1.GetAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.AgentService.GetAgent is not implemented"))
}

func (UnimplementedAgentServiceHandler) CreateAgent(context.Context, *connect.Request[v1.CreateAgentRequest]) (*connect.Response[v1.CreateAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.AgentService.CreateAgent is not implemented"))
}

func (UnimplementedAgentServiceHandler) UpdateAgentIP(context.Context, *connect.Request[v1.UpdateAgentIPRequest]) (*connect.Response[v1.UpdateAgentIPResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.AgentService.UpdateAgentIP is not implemented"))
}

func (UnimplementedAgentServiceHandler) DeleteAgent(context.Context, *connect.Request[v1.DeleteAgentRequest]) (*connect.Response[v1.DeleteAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.AgentService.DeleteAgent is not implemented"))
}

func (UnimplementedAgentServiceHandler) ListAgents(context.Context, *connect.Request[v1.ListAgentsRequest]) (*connect.Response[v1.ListAgentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.AgentService.ListAgents is not implemented"))
}

func (UnimplementedAgentServiceHandler) HealthCheck(context.Context, *connect.Request[v1.HealthCheckRequest]) (*connect.Response[v1.HealthCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.AgentService.HealthCheck is not implemented"))
}

func (UnimplementedAgentServiceHandler) BootstrapAgent(context.Context, *connect.Request[v1.BootstrapAgentRequest]) (*connect.Response[v1.BootstrapAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.AgentService.BootstrapAgent is not implemented"))
}

func (UnimplementedAgentServiceHandler) RotateAgentToken(context.Context, *connect.Request[v1.RotateAgentTokenRequest]) (*connect.Response[v1.RotateAgentTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.AgentService.RotateAgentToken is not implemented"))
}
