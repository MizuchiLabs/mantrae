// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mantrae/v1/traefik_instance.proto

package mantraev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/mizuchilabs/mantrae/proto/gen/mantrae/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TraefikInstanceServiceName is the fully-qualified name of the TraefikInstanceService service.
	TraefikInstanceServiceName = "mantrae.v1.TraefikInstanceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TraefikInstanceServiceGetTraefikInstanceProcedure is the fully-qualified name of the
	// TraefikInstanceService's GetTraefikInstance RPC.
	TraefikInstanceServiceGetTraefikInstanceProcedure = "/mantrae.v1.TraefikInstanceService/GetTraefikInstance"
	// TraefikInstanceServiceDeleteTraefikInstanceProcedure is the fully-qualified name of the
	// TraefikInstanceService's DeleteTraefikInstance RPC.
	TraefikInstanceServiceDeleteTraefikInstanceProcedure = "/mantrae.v1.TraefikInstanceService/DeleteTraefikInstance"
	// TraefikInstanceServiceListTraefikInstancesProcedure is the fully-qualified name of the
	// TraefikInstanceService's ListTraefikInstances RPC.
	TraefikInstanceServiceListTraefikInstancesProcedure = "/mantrae.v1.TraefikInstanceService/ListTraefikInstances"
)

// TraefikInstanceServiceClient is a client for the mantrae.v1.TraefikInstanceService service.
type TraefikInstanceServiceClient interface {
	GetTraefikInstance(context.Context, *connect.Request[v1.GetTraefikInstanceRequest]) (*connect.Response[v1.GetTraefikInstanceResponse], error)
	DeleteTraefikInstance(context.Context, *connect.Request[v1.DeleteTraefikInstanceRequest]) (*connect.Response[v1.DeleteTraefikInstanceResponse], error)
	ListTraefikInstances(context.Context, *connect.Request[v1.ListTraefikInstancesRequest]) (*connect.Response[v1.ListTraefikInstancesResponse], error)
}

// NewTraefikInstanceServiceClient constructs a client for the mantrae.v1.TraefikInstanceService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTraefikInstanceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TraefikInstanceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	traefikInstanceServiceMethods := v1.File_mantrae_v1_traefik_instance_proto.Services().ByName("TraefikInstanceService").Methods()
	return &traefikInstanceServiceClient{
		getTraefikInstance: connect.NewClient[v1.GetTraefikInstanceRequest, v1.GetTraefikInstanceResponse](
			httpClient,
			baseURL+TraefikInstanceServiceGetTraefikInstanceProcedure,
			connect.WithSchema(traefikInstanceServiceMethods.ByName("GetTraefikInstance")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		deleteTraefikInstance: connect.NewClient[v1.DeleteTraefikInstanceRequest, v1.DeleteTraefikInstanceResponse](
			httpClient,
			baseURL+TraefikInstanceServiceDeleteTraefikInstanceProcedure,
			connect.WithSchema(traefikInstanceServiceMethods.ByName("DeleteTraefikInstance")),
			connect.WithClientOptions(opts...),
		),
		listTraefikInstances: connect.NewClient[v1.ListTraefikInstancesRequest, v1.ListTraefikInstancesResponse](
			httpClient,
			baseURL+TraefikInstanceServiceListTraefikInstancesProcedure,
			connect.WithSchema(traefikInstanceServiceMethods.ByName("ListTraefikInstances")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// traefikInstanceServiceClient implements TraefikInstanceServiceClient.
type traefikInstanceServiceClient struct {
	getTraefikInstance    *connect.Client[v1.GetTraefikInstanceRequest, v1.GetTraefikInstanceResponse]
	deleteTraefikInstance *connect.Client[v1.DeleteTraefikInstanceRequest, v1.DeleteTraefikInstanceResponse]
	listTraefikInstances  *connect.Client[v1.ListTraefikInstancesRequest, v1.ListTraefikInstancesResponse]
}

// GetTraefikInstance calls mantrae.v1.TraefikInstanceService.GetTraefikInstance.
func (c *traefikInstanceServiceClient) GetTraefikInstance(ctx context.Context, req *connect.Request[v1.GetTraefikInstanceRequest]) (*connect.Response[v1.GetTraefikInstanceResponse], error) {
	return c.getTraefikInstance.CallUnary(ctx, req)
}

// DeleteTraefikInstance calls mantrae.v1.TraefikInstanceService.DeleteTraefikInstance.
func (c *traefikInstanceServiceClient) DeleteTraefikInstance(ctx context.Context, req *connect.Request[v1.DeleteTraefikInstanceRequest]) (*connect.Response[v1.DeleteTraefikInstanceResponse], error) {
	return c.deleteTraefikInstance.CallUnary(ctx, req)
}

// ListTraefikInstances calls mantrae.v1.TraefikInstanceService.ListTraefikInstances.
func (c *traefikInstanceServiceClient) ListTraefikInstances(ctx context.Context, req *connect.Request[v1.ListTraefikInstancesRequest]) (*connect.Response[v1.ListTraefikInstancesResponse], error) {
	return c.listTraefikInstances.CallUnary(ctx, req)
}

// TraefikInstanceServiceHandler is an implementation of the mantrae.v1.TraefikInstanceService
// service.
type TraefikInstanceServiceHandler interface {
	GetTraefikInstance(context.Context, *connect.Request[v1.GetTraefikInstanceRequest]) (*connect.Response[v1.GetTraefikInstanceResponse], error)
	DeleteTraefikInstance(context.Context, *connect.Request[v1.DeleteTraefikInstanceRequest]) (*connect.Response[v1.DeleteTraefikInstanceResponse], error)
	ListTraefikInstances(context.Context, *connect.Request[v1.ListTraefikInstancesRequest]) (*connect.Response[v1.ListTraefikInstancesResponse], error)
}

// NewTraefikInstanceServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTraefikInstanceServiceHandler(svc TraefikInstanceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	traefikInstanceServiceMethods := v1.File_mantrae_v1_traefik_instance_proto.Services().ByName("TraefikInstanceService").Methods()
	traefikInstanceServiceGetTraefikInstanceHandler := connect.NewUnaryHandler(
		TraefikInstanceServiceGetTraefikInstanceProcedure,
		svc.GetTraefikInstance,
		connect.WithSchema(traefikInstanceServiceMethods.ByName("GetTraefikInstance")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	traefikInstanceServiceDeleteTraefikInstanceHandler := connect.NewUnaryHandler(
		TraefikInstanceServiceDeleteTraefikInstanceProcedure,
		svc.DeleteTraefikInstance,
		connect.WithSchema(traefikInstanceServiceMethods.ByName("DeleteTraefikInstance")),
		connect.WithHandlerOptions(opts...),
	)
	traefikInstanceServiceListTraefikInstancesHandler := connect.NewUnaryHandler(
		TraefikInstanceServiceListTraefikInstancesProcedure,
		svc.ListTraefikInstances,
		connect.WithSchema(traefikInstanceServiceMethods.ByName("ListTraefikInstances")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/mantrae.v1.TraefikInstanceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TraefikInstanceServiceGetTraefikInstanceProcedure:
			traefikInstanceServiceGetTraefikInstanceHandler.ServeHTTP(w, r)
		case TraefikInstanceServiceDeleteTraefikInstanceProcedure:
			traefikInstanceServiceDeleteTraefikInstanceHandler.ServeHTTP(w, r)
		case TraefikInstanceServiceListTraefikInstancesProcedure:
			traefikInstanceServiceListTraefikInstancesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTraefikInstanceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTraefikInstanceServiceHandler struct{}

func (UnimplementedTraefikInstanceServiceHandler) GetTraefikInstance(context.Context, *connect.Request[v1.GetTraefikInstanceRequest]) (*connect.Response[v1.GetTraefikInstanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.TraefikInstanceService.GetTraefikInstance is not implemented"))
}

func (UnimplementedTraefikInstanceServiceHandler) DeleteTraefikInstance(context.Context, *connect.Request[v1.DeleteTraefikInstanceRequest]) (*connect.Response[v1.DeleteTraefikInstanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.TraefikInstanceService.DeleteTraefikInstance is not implemented"))
}

func (UnimplementedTraefikInstanceServiceHandler) ListTraefikInstances(context.Context, *connect.Request[v1.ListTraefikInstancesRequest]) (*connect.Response[v1.ListTraefikInstancesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.TraefikInstanceService.ListTraefikInstances is not implemented"))
}
