// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mantrae/v1/backup.proto

package mantraev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/mizuchilabs/mantrae/proto/gen/mantrae/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BackupServiceName is the fully-qualified name of the BackupService service.
	BackupServiceName = "mantrae.v1.BackupService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BackupServiceCreateBackupProcedure is the fully-qualified name of the BackupService's
	// CreateBackup RPC.
	BackupServiceCreateBackupProcedure = "/mantrae.v1.BackupService/CreateBackup"
	// BackupServiceRestoreBackupProcedure is the fully-qualified name of the BackupService's
	// RestoreBackup RPC.
	BackupServiceRestoreBackupProcedure = "/mantrae.v1.BackupService/RestoreBackup"
	// BackupServiceListBackupsProcedure is the fully-qualified name of the BackupService's ListBackups
	// RPC.
	BackupServiceListBackupsProcedure = "/mantrae.v1.BackupService/ListBackups"
	// BackupServiceDeleteBackupProcedure is the fully-qualified name of the BackupService's
	// DeleteBackup RPC.
	BackupServiceDeleteBackupProcedure = "/mantrae.v1.BackupService/DeleteBackup"
	// BackupServiceDownloadBackupProcedure is the fully-qualified name of the BackupService's
	// DownloadBackup RPC.
	BackupServiceDownloadBackupProcedure = "/mantrae.v1.BackupService/DownloadBackup"
)

// BackupServiceClient is a client for the mantrae.v1.BackupService service.
type BackupServiceClient interface {
	CreateBackup(context.Context, *connect.Request[v1.CreateBackupRequest]) (*connect.Response[v1.CreateBackupResponse], error)
	RestoreBackup(context.Context, *connect.Request[v1.RestoreBackupRequest]) (*connect.Response[v1.RestoreBackupResponse], error)
	ListBackups(context.Context, *connect.Request[v1.ListBackupsRequest]) (*connect.Response[v1.ListBackupsResponse], error)
	DeleteBackup(context.Context, *connect.Request[v1.DeleteBackupRequest]) (*connect.Response[v1.DeleteBackupResponse], error)
	DownloadBackup(context.Context, *connect.Request[v1.DownloadBackupRequest]) (*connect.ServerStreamForClient[v1.DownloadBackupResponse], error)
}

// NewBackupServiceClient constructs a client for the mantrae.v1.BackupService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBackupServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BackupServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	backupServiceMethods := v1.File_mantrae_v1_backup_proto.Services().ByName("BackupService").Methods()
	return &backupServiceClient{
		createBackup: connect.NewClient[v1.CreateBackupRequest, v1.CreateBackupResponse](
			httpClient,
			baseURL+BackupServiceCreateBackupProcedure,
			connect.WithSchema(backupServiceMethods.ByName("CreateBackup")),
			connect.WithClientOptions(opts...),
		),
		restoreBackup: connect.NewClient[v1.RestoreBackupRequest, v1.RestoreBackupResponse](
			httpClient,
			baseURL+BackupServiceRestoreBackupProcedure,
			connect.WithSchema(backupServiceMethods.ByName("RestoreBackup")),
			connect.WithClientOptions(opts...),
		),
		listBackups: connect.NewClient[v1.ListBackupsRequest, v1.ListBackupsResponse](
			httpClient,
			baseURL+BackupServiceListBackupsProcedure,
			connect.WithSchema(backupServiceMethods.ByName("ListBackups")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		deleteBackup: connect.NewClient[v1.DeleteBackupRequest, v1.DeleteBackupResponse](
			httpClient,
			baseURL+BackupServiceDeleteBackupProcedure,
			connect.WithSchema(backupServiceMethods.ByName("DeleteBackup")),
			connect.WithClientOptions(opts...),
		),
		downloadBackup: connect.NewClient[v1.DownloadBackupRequest, v1.DownloadBackupResponse](
			httpClient,
			baseURL+BackupServiceDownloadBackupProcedure,
			connect.WithSchema(backupServiceMethods.ByName("DownloadBackup")),
			connect.WithClientOptions(opts...),
		),
	}
}

// backupServiceClient implements BackupServiceClient.
type backupServiceClient struct {
	createBackup   *connect.Client[v1.CreateBackupRequest, v1.CreateBackupResponse]
	restoreBackup  *connect.Client[v1.RestoreBackupRequest, v1.RestoreBackupResponse]
	listBackups    *connect.Client[v1.ListBackupsRequest, v1.ListBackupsResponse]
	deleteBackup   *connect.Client[v1.DeleteBackupRequest, v1.DeleteBackupResponse]
	downloadBackup *connect.Client[v1.DownloadBackupRequest, v1.DownloadBackupResponse]
}

// CreateBackup calls mantrae.v1.BackupService.CreateBackup.
func (c *backupServiceClient) CreateBackup(ctx context.Context, req *connect.Request[v1.CreateBackupRequest]) (*connect.Response[v1.CreateBackupResponse], error) {
	return c.createBackup.CallUnary(ctx, req)
}

// RestoreBackup calls mantrae.v1.BackupService.RestoreBackup.
func (c *backupServiceClient) RestoreBackup(ctx context.Context, req *connect.Request[v1.RestoreBackupRequest]) (*connect.Response[v1.RestoreBackupResponse], error) {
	return c.restoreBackup.CallUnary(ctx, req)
}

// ListBackups calls mantrae.v1.BackupService.ListBackups.
func (c *backupServiceClient) ListBackups(ctx context.Context, req *connect.Request[v1.ListBackupsRequest]) (*connect.Response[v1.ListBackupsResponse], error) {
	return c.listBackups.CallUnary(ctx, req)
}

// DeleteBackup calls mantrae.v1.BackupService.DeleteBackup.
func (c *backupServiceClient) DeleteBackup(ctx context.Context, req *connect.Request[v1.DeleteBackupRequest]) (*connect.Response[v1.DeleteBackupResponse], error) {
	return c.deleteBackup.CallUnary(ctx, req)
}

// DownloadBackup calls mantrae.v1.BackupService.DownloadBackup.
func (c *backupServiceClient) DownloadBackup(ctx context.Context, req *connect.Request[v1.DownloadBackupRequest]) (*connect.ServerStreamForClient[v1.DownloadBackupResponse], error) {
	return c.downloadBackup.CallServerStream(ctx, req)
}

// BackupServiceHandler is an implementation of the mantrae.v1.BackupService service.
type BackupServiceHandler interface {
	CreateBackup(context.Context, *connect.Request[v1.CreateBackupRequest]) (*connect.Response[v1.CreateBackupResponse], error)
	RestoreBackup(context.Context, *connect.Request[v1.RestoreBackupRequest]) (*connect.Response[v1.RestoreBackupResponse], error)
	ListBackups(context.Context, *connect.Request[v1.ListBackupsRequest]) (*connect.Response[v1.ListBackupsResponse], error)
	DeleteBackup(context.Context, *connect.Request[v1.DeleteBackupRequest]) (*connect.Response[v1.DeleteBackupResponse], error)
	DownloadBackup(context.Context, *connect.Request[v1.DownloadBackupRequest], *connect.ServerStream[v1.DownloadBackupResponse]) error
}

// NewBackupServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBackupServiceHandler(svc BackupServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	backupServiceMethods := v1.File_mantrae_v1_backup_proto.Services().ByName("BackupService").Methods()
	backupServiceCreateBackupHandler := connect.NewUnaryHandler(
		BackupServiceCreateBackupProcedure,
		svc.CreateBackup,
		connect.WithSchema(backupServiceMethods.ByName("CreateBackup")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceRestoreBackupHandler := connect.NewUnaryHandler(
		BackupServiceRestoreBackupProcedure,
		svc.RestoreBackup,
		connect.WithSchema(backupServiceMethods.ByName("RestoreBackup")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceListBackupsHandler := connect.NewUnaryHandler(
		BackupServiceListBackupsProcedure,
		svc.ListBackups,
		connect.WithSchema(backupServiceMethods.ByName("ListBackups")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceDeleteBackupHandler := connect.NewUnaryHandler(
		BackupServiceDeleteBackupProcedure,
		svc.DeleteBackup,
		connect.WithSchema(backupServiceMethods.ByName("DeleteBackup")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceDownloadBackupHandler := connect.NewServerStreamHandler(
		BackupServiceDownloadBackupProcedure,
		svc.DownloadBackup,
		connect.WithSchema(backupServiceMethods.ByName("DownloadBackup")),
		connect.WithHandlerOptions(opts...),
	)
	return "/mantrae.v1.BackupService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BackupServiceCreateBackupProcedure:
			backupServiceCreateBackupHandler.ServeHTTP(w, r)
		case BackupServiceRestoreBackupProcedure:
			backupServiceRestoreBackupHandler.ServeHTTP(w, r)
		case BackupServiceListBackupsProcedure:
			backupServiceListBackupsHandler.ServeHTTP(w, r)
		case BackupServiceDeleteBackupProcedure:
			backupServiceDeleteBackupHandler.ServeHTTP(w, r)
		case BackupServiceDownloadBackupProcedure:
			backupServiceDownloadBackupHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBackupServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBackupServiceHandler struct{}

func (UnimplementedBackupServiceHandler) CreateBackup(context.Context, *connect.Request[v1.CreateBackupRequest]) (*connect.Response[v1.CreateBackupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.BackupService.CreateBackup is not implemented"))
}

func (UnimplementedBackupServiceHandler) RestoreBackup(context.Context, *connect.Request[v1.RestoreBackupRequest]) (*connect.Response[v1.RestoreBackupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.BackupService.RestoreBackup is not implemented"))
}

func (UnimplementedBackupServiceHandler) ListBackups(context.Context, *connect.Request[v1.ListBackupsRequest]) (*connect.Response[v1.ListBackupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.BackupService.ListBackups is not implemented"))
}

func (UnimplementedBackupServiceHandler) DeleteBackup(context.Context, *connect.Request[v1.DeleteBackupRequest]) (*connect.Response[v1.DeleteBackupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.BackupService.DeleteBackup is not implemented"))
}

func (UnimplementedBackupServiceHandler) DownloadBackup(context.Context, *connect.Request[v1.DownloadBackupRequest], *connect.ServerStream[v1.DownloadBackupResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.BackupService.DownloadBackup is not implemented"))
}
