// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mantrae/v1/event.proto

package mantraev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/mizuchilabs/mantrae/proto/gen/mantrae/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EventServiceName is the fully-qualified name of the EventService service.
	EventServiceName = "mantrae.v1.EventService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EventServiceProfileEventsProcedure is the fully-qualified name of the EventService's
	// ProfileEvents RPC.
	EventServiceProfileEventsProcedure = "/mantrae.v1.EventService/ProfileEvents"
	// EventServiceGlobalEventsProcedure is the fully-qualified name of the EventService's GlobalEvents
	// RPC.
	EventServiceGlobalEventsProcedure = "/mantrae.v1.EventService/GlobalEvents"
)

// EventServiceClient is a client for the mantrae.v1.EventService service.
type EventServiceClient interface {
	// Profile-scoped events (routers, services, middlewares, entrypoints)
	ProfileEvents(context.Context, *connect.Request[v1.ProfileEventsRequest]) (*connect.ServerStreamForClient[v1.ProfileEventsResponse], error)
	// Global events (users, dns)
	GlobalEvents(context.Context, *connect.Request[v1.GlobalEventsRequest]) (*connect.ServerStreamForClient[v1.GlobalEventsResponse], error)
}

// NewEventServiceClient constructs a client for the mantrae.v1.EventService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEventServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EventServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	eventServiceMethods := v1.File_mantrae_v1_event_proto.Services().ByName("EventService").Methods()
	return &eventServiceClient{
		profileEvents: connect.NewClient[v1.ProfileEventsRequest, v1.ProfileEventsResponse](
			httpClient,
			baseURL+EventServiceProfileEventsProcedure,
			connect.WithSchema(eventServiceMethods.ByName("ProfileEvents")),
			connect.WithClientOptions(opts...),
		),
		globalEvents: connect.NewClient[v1.GlobalEventsRequest, v1.GlobalEventsResponse](
			httpClient,
			baseURL+EventServiceGlobalEventsProcedure,
			connect.WithSchema(eventServiceMethods.ByName("GlobalEvents")),
			connect.WithClientOptions(opts...),
		),
	}
}

// eventServiceClient implements EventServiceClient.
type eventServiceClient struct {
	profileEvents *connect.Client[v1.ProfileEventsRequest, v1.ProfileEventsResponse]
	globalEvents  *connect.Client[v1.GlobalEventsRequest, v1.GlobalEventsResponse]
}

// ProfileEvents calls mantrae.v1.EventService.ProfileEvents.
func (c *eventServiceClient) ProfileEvents(ctx context.Context, req *connect.Request[v1.ProfileEventsRequest]) (*connect.ServerStreamForClient[v1.ProfileEventsResponse], error) {
	return c.profileEvents.CallServerStream(ctx, req)
}

// GlobalEvents calls mantrae.v1.EventService.GlobalEvents.
func (c *eventServiceClient) GlobalEvents(ctx context.Context, req *connect.Request[v1.GlobalEventsRequest]) (*connect.ServerStreamForClient[v1.GlobalEventsResponse], error) {
	return c.globalEvents.CallServerStream(ctx, req)
}

// EventServiceHandler is an implementation of the mantrae.v1.EventService service.
type EventServiceHandler interface {
	// Profile-scoped events (routers, services, middlewares, entrypoints)
	ProfileEvents(context.Context, *connect.Request[v1.ProfileEventsRequest], *connect.ServerStream[v1.ProfileEventsResponse]) error
	// Global events (users, dns)
	GlobalEvents(context.Context, *connect.Request[v1.GlobalEventsRequest], *connect.ServerStream[v1.GlobalEventsResponse]) error
}

// NewEventServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEventServiceHandler(svc EventServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	eventServiceMethods := v1.File_mantrae_v1_event_proto.Services().ByName("EventService").Methods()
	eventServiceProfileEventsHandler := connect.NewServerStreamHandler(
		EventServiceProfileEventsProcedure,
		svc.ProfileEvents,
		connect.WithSchema(eventServiceMethods.ByName("ProfileEvents")),
		connect.WithHandlerOptions(opts...),
	)
	eventServiceGlobalEventsHandler := connect.NewServerStreamHandler(
		EventServiceGlobalEventsProcedure,
		svc.GlobalEvents,
		connect.WithSchema(eventServiceMethods.ByName("GlobalEvents")),
		connect.WithHandlerOptions(opts...),
	)
	return "/mantrae.v1.EventService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EventServiceProfileEventsProcedure:
			eventServiceProfileEventsHandler.ServeHTTP(w, r)
		case EventServiceGlobalEventsProcedure:
			eventServiceGlobalEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEventServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEventServiceHandler struct{}

func (UnimplementedEventServiceHandler) ProfileEvents(context.Context, *connect.Request[v1.ProfileEventsRequest], *connect.ServerStream[v1.ProfileEventsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.EventService.ProfileEvents is not implemented"))
}

func (UnimplementedEventServiceHandler) GlobalEvents(context.Context, *connect.Request[v1.GlobalEventsRequest], *connect.ServerStream[v1.GlobalEventsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.EventService.GlobalEvents is not implemented"))
}
