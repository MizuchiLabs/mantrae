// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mantrae/v1/service.proto

package mantraev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/mizuchilabs/mantrae/proto/gen/mantrae/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServiceServiceName is the fully-qualified name of the ServiceService service.
	ServiceServiceName = "mantrae.v1.ServiceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceServiceGetServiceProcedure is the fully-qualified name of the ServiceService's GetService
	// RPC.
	ServiceServiceGetServiceProcedure = "/mantrae.v1.ServiceService/GetService"
	// ServiceServiceCreateServiceProcedure is the fully-qualified name of the ServiceService's
	// CreateService RPC.
	ServiceServiceCreateServiceProcedure = "/mantrae.v1.ServiceService/CreateService"
	// ServiceServiceUpdateServiceProcedure is the fully-qualified name of the ServiceService's
	// UpdateService RPC.
	ServiceServiceUpdateServiceProcedure = "/mantrae.v1.ServiceService/UpdateService"
	// ServiceServiceDeleteServiceProcedure is the fully-qualified name of the ServiceService's
	// DeleteService RPC.
	ServiceServiceDeleteServiceProcedure = "/mantrae.v1.ServiceService/DeleteService"
	// ServiceServiceListServicesProcedure is the fully-qualified name of the ServiceService's
	// ListServices RPC.
	ServiceServiceListServicesProcedure = "/mantrae.v1.ServiceService/ListServices"
	// ServiceServiceGetServiceByRouterProcedure is the fully-qualified name of the ServiceService's
	// GetServiceByRouter RPC.
	ServiceServiceGetServiceByRouterProcedure = "/mantrae.v1.ServiceService/GetServiceByRouter"
)

// ServiceServiceClient is a client for the mantrae.v1.ServiceService service.
type ServiceServiceClient interface {
	GetService(context.Context, *connect.Request[v1.GetServiceRequest]) (*connect.Response[v1.GetServiceResponse], error)
	CreateService(context.Context, *connect.Request[v1.CreateServiceRequest]) (*connect.Response[v1.CreateServiceResponse], error)
	UpdateService(context.Context, *connect.Request[v1.UpdateServiceRequest]) (*connect.Response[v1.UpdateServiceResponse], error)
	DeleteService(context.Context, *connect.Request[v1.DeleteServiceRequest]) (*connect.Response[v1.DeleteServiceResponse], error)
	ListServices(context.Context, *connect.Request[v1.ListServicesRequest]) (*connect.Response[v1.ListServicesResponse], error)
	GetServiceByRouter(context.Context, *connect.Request[v1.GetServiceByRouterRequest]) (*connect.Response[v1.GetServiceByRouterResponse], error)
}

// NewServiceServiceClient constructs a client for the mantrae.v1.ServiceService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServiceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	serviceServiceMethods := v1.File_mantrae_v1_service_proto.Services().ByName("ServiceService").Methods()
	return &serviceServiceClient{
		getService: connect.NewClient[v1.GetServiceRequest, v1.GetServiceResponse](
			httpClient,
			baseURL+ServiceServiceGetServiceProcedure,
			connect.WithSchema(serviceServiceMethods.ByName("GetService")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createService: connect.NewClient[v1.CreateServiceRequest, v1.CreateServiceResponse](
			httpClient,
			baseURL+ServiceServiceCreateServiceProcedure,
			connect.WithSchema(serviceServiceMethods.ByName("CreateService")),
			connect.WithClientOptions(opts...),
		),
		updateService: connect.NewClient[v1.UpdateServiceRequest, v1.UpdateServiceResponse](
			httpClient,
			baseURL+ServiceServiceUpdateServiceProcedure,
			connect.WithSchema(serviceServiceMethods.ByName("UpdateService")),
			connect.WithClientOptions(opts...),
		),
		deleteService: connect.NewClient[v1.DeleteServiceRequest, v1.DeleteServiceResponse](
			httpClient,
			baseURL+ServiceServiceDeleteServiceProcedure,
			connect.WithSchema(serviceServiceMethods.ByName("DeleteService")),
			connect.WithClientOptions(opts...),
		),
		listServices: connect.NewClient[v1.ListServicesRequest, v1.ListServicesResponse](
			httpClient,
			baseURL+ServiceServiceListServicesProcedure,
			connect.WithSchema(serviceServiceMethods.ByName("ListServices")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getServiceByRouter: connect.NewClient[v1.GetServiceByRouterRequest, v1.GetServiceByRouterResponse](
			httpClient,
			baseURL+ServiceServiceGetServiceByRouterProcedure,
			connect.WithSchema(serviceServiceMethods.ByName("GetServiceByRouter")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// serviceServiceClient implements ServiceServiceClient.
type serviceServiceClient struct {
	getService         *connect.Client[v1.GetServiceRequest, v1.GetServiceResponse]
	createService      *connect.Client[v1.CreateServiceRequest, v1.CreateServiceResponse]
	updateService      *connect.Client[v1.UpdateServiceRequest, v1.UpdateServiceResponse]
	deleteService      *connect.Client[v1.DeleteServiceRequest, v1.DeleteServiceResponse]
	listServices       *connect.Client[v1.ListServicesRequest, v1.ListServicesResponse]
	getServiceByRouter *connect.Client[v1.GetServiceByRouterRequest, v1.GetServiceByRouterResponse]
}

// GetService calls mantrae.v1.ServiceService.GetService.
func (c *serviceServiceClient) GetService(ctx context.Context, req *connect.Request[v1.GetServiceRequest]) (*connect.Response[v1.GetServiceResponse], error) {
	return c.getService.CallUnary(ctx, req)
}

// CreateService calls mantrae.v1.ServiceService.CreateService.
func (c *serviceServiceClient) CreateService(ctx context.Context, req *connect.Request[v1.CreateServiceRequest]) (*connect.Response[v1.CreateServiceResponse], error) {
	return c.createService.CallUnary(ctx, req)
}

// UpdateService calls mantrae.v1.ServiceService.UpdateService.
func (c *serviceServiceClient) UpdateService(ctx context.Context, req *connect.Request[v1.UpdateServiceRequest]) (*connect.Response[v1.UpdateServiceResponse], error) {
	return c.updateService.CallUnary(ctx, req)
}

// DeleteService calls mantrae.v1.ServiceService.DeleteService.
func (c *serviceServiceClient) DeleteService(ctx context.Context, req *connect.Request[v1.DeleteServiceRequest]) (*connect.Response[v1.DeleteServiceResponse], error) {
	return c.deleteService.CallUnary(ctx, req)
}

// ListServices calls mantrae.v1.ServiceService.ListServices.
func (c *serviceServiceClient) ListServices(ctx context.Context, req *connect.Request[v1.ListServicesRequest]) (*connect.Response[v1.ListServicesResponse], error) {
	return c.listServices.CallUnary(ctx, req)
}

// GetServiceByRouter calls mantrae.v1.ServiceService.GetServiceByRouter.
func (c *serviceServiceClient) GetServiceByRouter(ctx context.Context, req *connect.Request[v1.GetServiceByRouterRequest]) (*connect.Response[v1.GetServiceByRouterResponse], error) {
	return c.getServiceByRouter.CallUnary(ctx, req)
}

// ServiceServiceHandler is an implementation of the mantrae.v1.ServiceService service.
type ServiceServiceHandler interface {
	GetService(context.Context, *connect.Request[v1.GetServiceRequest]) (*connect.Response[v1.GetServiceResponse], error)
	CreateService(context.Context, *connect.Request[v1.CreateServiceRequest]) (*connect.Response[v1.CreateServiceResponse], error)
	UpdateService(context.Context, *connect.Request[v1.UpdateServiceRequest]) (*connect.Response[v1.UpdateServiceResponse], error)
	DeleteService(context.Context, *connect.Request[v1.DeleteServiceRequest]) (*connect.Response[v1.DeleteServiceResponse], error)
	ListServices(context.Context, *connect.Request[v1.ListServicesRequest]) (*connect.Response[v1.ListServicesResponse], error)
	GetServiceByRouter(context.Context, *connect.Request[v1.GetServiceByRouterRequest]) (*connect.Response[v1.GetServiceByRouterResponse], error)
}

// NewServiceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceServiceHandler(svc ServiceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serviceServiceMethods := v1.File_mantrae_v1_service_proto.Services().ByName("ServiceService").Methods()
	serviceServiceGetServiceHandler := connect.NewUnaryHandler(
		ServiceServiceGetServiceProcedure,
		svc.GetService,
		connect.WithSchema(serviceServiceMethods.ByName("GetService")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	serviceServiceCreateServiceHandler := connect.NewUnaryHandler(
		ServiceServiceCreateServiceProcedure,
		svc.CreateService,
		connect.WithSchema(serviceServiceMethods.ByName("CreateService")),
		connect.WithHandlerOptions(opts...),
	)
	serviceServiceUpdateServiceHandler := connect.NewUnaryHandler(
		ServiceServiceUpdateServiceProcedure,
		svc.UpdateService,
		connect.WithSchema(serviceServiceMethods.ByName("UpdateService")),
		connect.WithHandlerOptions(opts...),
	)
	serviceServiceDeleteServiceHandler := connect.NewUnaryHandler(
		ServiceServiceDeleteServiceProcedure,
		svc.DeleteService,
		connect.WithSchema(serviceServiceMethods.ByName("DeleteService")),
		connect.WithHandlerOptions(opts...),
	)
	serviceServiceListServicesHandler := connect.NewUnaryHandler(
		ServiceServiceListServicesProcedure,
		svc.ListServices,
		connect.WithSchema(serviceServiceMethods.ByName("ListServices")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	serviceServiceGetServiceByRouterHandler := connect.NewUnaryHandler(
		ServiceServiceGetServiceByRouterProcedure,
		svc.GetServiceByRouter,
		connect.WithSchema(serviceServiceMethods.ByName("GetServiceByRouter")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/mantrae.v1.ServiceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceServiceGetServiceProcedure:
			serviceServiceGetServiceHandler.ServeHTTP(w, r)
		case ServiceServiceCreateServiceProcedure:
			serviceServiceCreateServiceHandler.ServeHTTP(w, r)
		case ServiceServiceUpdateServiceProcedure:
			serviceServiceUpdateServiceHandler.ServeHTTP(w, r)
		case ServiceServiceDeleteServiceProcedure:
			serviceServiceDeleteServiceHandler.ServeHTTP(w, r)
		case ServiceServiceListServicesProcedure:
			serviceServiceListServicesHandler.ServeHTTP(w, r)
		case ServiceServiceGetServiceByRouterProcedure:
			serviceServiceGetServiceByRouterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceServiceHandler struct{}

func (UnimplementedServiceServiceHandler) GetService(context.Context, *connect.Request[v1.GetServiceRequest]) (*connect.Response[v1.GetServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.ServiceService.GetService is not implemented"))
}

func (UnimplementedServiceServiceHandler) CreateService(context.Context, *connect.Request[v1.CreateServiceRequest]) (*connect.Response[v1.CreateServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.ServiceService.CreateService is not implemented"))
}

func (UnimplementedServiceServiceHandler) UpdateService(context.Context, *connect.Request[v1.UpdateServiceRequest]) (*connect.Response[v1.UpdateServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.ServiceService.UpdateService is not implemented"))
}

func (UnimplementedServiceServiceHandler) DeleteService(context.Context, *connect.Request[v1.DeleteServiceRequest]) (*connect.Response[v1.DeleteServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.ServiceService.DeleteService is not implemented"))
}

func (UnimplementedServiceServiceHandler) ListServices(context.Context, *connect.Request[v1.ListServicesRequest]) (*connect.Response[v1.ListServicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.ServiceService.ListServices is not implemented"))
}

func (UnimplementedServiceServiceHandler) GetServiceByRouter(context.Context, *connect.Request[v1.GetServiceByRouterRequest]) (*connect.Response[v1.GetServiceByRouterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.ServiceService.GetServiceByRouter is not implemented"))
}
