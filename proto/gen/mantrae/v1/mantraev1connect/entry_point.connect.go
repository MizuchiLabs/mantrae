// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mantrae/v1/entry_point.proto

package mantraev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/mizuchilabs/mantrae/proto/gen/mantrae/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EntryPointServiceName is the fully-qualified name of the EntryPointService service.
	EntryPointServiceName = "mantrae.v1.EntryPointService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EntryPointServiceGetEntryPointProcedure is the fully-qualified name of the EntryPointService's
	// GetEntryPoint RPC.
	EntryPointServiceGetEntryPointProcedure = "/mantrae.v1.EntryPointService/GetEntryPoint"
	// EntryPointServiceCreateEntryPointProcedure is the fully-qualified name of the EntryPointService's
	// CreateEntryPoint RPC.
	EntryPointServiceCreateEntryPointProcedure = "/mantrae.v1.EntryPointService/CreateEntryPoint"
	// EntryPointServiceUpdateEntryPointProcedure is the fully-qualified name of the EntryPointService's
	// UpdateEntryPoint RPC.
	EntryPointServiceUpdateEntryPointProcedure = "/mantrae.v1.EntryPointService/UpdateEntryPoint"
	// EntryPointServiceDeleteEntryPointProcedure is the fully-qualified name of the EntryPointService's
	// DeleteEntryPoint RPC.
	EntryPointServiceDeleteEntryPointProcedure = "/mantrae.v1.EntryPointService/DeleteEntryPoint"
	// EntryPointServiceListEntryPointsProcedure is the fully-qualified name of the EntryPointService's
	// ListEntryPoints RPC.
	EntryPointServiceListEntryPointsProcedure = "/mantrae.v1.EntryPointService/ListEntryPoints"
)

// EntryPointServiceClient is a client for the mantrae.v1.EntryPointService service.
type EntryPointServiceClient interface {
	GetEntryPoint(context.Context, *connect.Request[v1.GetEntryPointRequest]) (*connect.Response[v1.GetEntryPointResponse], error)
	CreateEntryPoint(context.Context, *connect.Request[v1.CreateEntryPointRequest]) (*connect.Response[v1.CreateEntryPointResponse], error)
	UpdateEntryPoint(context.Context, *connect.Request[v1.UpdateEntryPointRequest]) (*connect.Response[v1.UpdateEntryPointResponse], error)
	DeleteEntryPoint(context.Context, *connect.Request[v1.DeleteEntryPointRequest]) (*connect.Response[v1.DeleteEntryPointResponse], error)
	ListEntryPoints(context.Context, *connect.Request[v1.ListEntryPointsRequest]) (*connect.Response[v1.ListEntryPointsResponse], error)
}

// NewEntryPointServiceClient constructs a client for the mantrae.v1.EntryPointService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEntryPointServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EntryPointServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	entryPointServiceMethods := v1.File_mantrae_v1_entry_point_proto.Services().ByName("EntryPointService").Methods()
	return &entryPointServiceClient{
		getEntryPoint: connect.NewClient[v1.GetEntryPointRequest, v1.GetEntryPointResponse](
			httpClient,
			baseURL+EntryPointServiceGetEntryPointProcedure,
			connect.WithSchema(entryPointServiceMethods.ByName("GetEntryPoint")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createEntryPoint: connect.NewClient[v1.CreateEntryPointRequest, v1.CreateEntryPointResponse](
			httpClient,
			baseURL+EntryPointServiceCreateEntryPointProcedure,
			connect.WithSchema(entryPointServiceMethods.ByName("CreateEntryPoint")),
			connect.WithClientOptions(opts...),
		),
		updateEntryPoint: connect.NewClient[v1.UpdateEntryPointRequest, v1.UpdateEntryPointResponse](
			httpClient,
			baseURL+EntryPointServiceUpdateEntryPointProcedure,
			connect.WithSchema(entryPointServiceMethods.ByName("UpdateEntryPoint")),
			connect.WithClientOptions(opts...),
		),
		deleteEntryPoint: connect.NewClient[v1.DeleteEntryPointRequest, v1.DeleteEntryPointResponse](
			httpClient,
			baseURL+EntryPointServiceDeleteEntryPointProcedure,
			connect.WithSchema(entryPointServiceMethods.ByName("DeleteEntryPoint")),
			connect.WithClientOptions(opts...),
		),
		listEntryPoints: connect.NewClient[v1.ListEntryPointsRequest, v1.ListEntryPointsResponse](
			httpClient,
			baseURL+EntryPointServiceListEntryPointsProcedure,
			connect.WithSchema(entryPointServiceMethods.ByName("ListEntryPoints")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// entryPointServiceClient implements EntryPointServiceClient.
type entryPointServiceClient struct {
	getEntryPoint    *connect.Client[v1.GetEntryPointRequest, v1.GetEntryPointResponse]
	createEntryPoint *connect.Client[v1.CreateEntryPointRequest, v1.CreateEntryPointResponse]
	updateEntryPoint *connect.Client[v1.UpdateEntryPointRequest, v1.UpdateEntryPointResponse]
	deleteEntryPoint *connect.Client[v1.DeleteEntryPointRequest, v1.DeleteEntryPointResponse]
	listEntryPoints  *connect.Client[v1.ListEntryPointsRequest, v1.ListEntryPointsResponse]
}

// GetEntryPoint calls mantrae.v1.EntryPointService.GetEntryPoint.
func (c *entryPointServiceClient) GetEntryPoint(ctx context.Context, req *connect.Request[v1.GetEntryPointRequest]) (*connect.Response[v1.GetEntryPointResponse], error) {
	return c.getEntryPoint.CallUnary(ctx, req)
}

// CreateEntryPoint calls mantrae.v1.EntryPointService.CreateEntryPoint.
func (c *entryPointServiceClient) CreateEntryPoint(ctx context.Context, req *connect.Request[v1.CreateEntryPointRequest]) (*connect.Response[v1.CreateEntryPointResponse], error) {
	return c.createEntryPoint.CallUnary(ctx, req)
}

// UpdateEntryPoint calls mantrae.v1.EntryPointService.UpdateEntryPoint.
func (c *entryPointServiceClient) UpdateEntryPoint(ctx context.Context, req *connect.Request[v1.UpdateEntryPointRequest]) (*connect.Response[v1.UpdateEntryPointResponse], error) {
	return c.updateEntryPoint.CallUnary(ctx, req)
}

// DeleteEntryPoint calls mantrae.v1.EntryPointService.DeleteEntryPoint.
func (c *entryPointServiceClient) DeleteEntryPoint(ctx context.Context, req *connect.Request[v1.DeleteEntryPointRequest]) (*connect.Response[v1.DeleteEntryPointResponse], error) {
	return c.deleteEntryPoint.CallUnary(ctx, req)
}

// ListEntryPoints calls mantrae.v1.EntryPointService.ListEntryPoints.
func (c *entryPointServiceClient) ListEntryPoints(ctx context.Context, req *connect.Request[v1.ListEntryPointsRequest]) (*connect.Response[v1.ListEntryPointsResponse], error) {
	return c.listEntryPoints.CallUnary(ctx, req)
}

// EntryPointServiceHandler is an implementation of the mantrae.v1.EntryPointService service.
type EntryPointServiceHandler interface {
	GetEntryPoint(context.Context, *connect.Request[v1.GetEntryPointRequest]) (*connect.Response[v1.GetEntryPointResponse], error)
	CreateEntryPoint(context.Context, *connect.Request[v1.CreateEntryPointRequest]) (*connect.Response[v1.CreateEntryPointResponse], error)
	UpdateEntryPoint(context.Context, *connect.Request[v1.UpdateEntryPointRequest]) (*connect.Response[v1.UpdateEntryPointResponse], error)
	DeleteEntryPoint(context.Context, *connect.Request[v1.DeleteEntryPointRequest]) (*connect.Response[v1.DeleteEntryPointResponse], error)
	ListEntryPoints(context.Context, *connect.Request[v1.ListEntryPointsRequest]) (*connect.Response[v1.ListEntryPointsResponse], error)
}

// NewEntryPointServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEntryPointServiceHandler(svc EntryPointServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	entryPointServiceMethods := v1.File_mantrae_v1_entry_point_proto.Services().ByName("EntryPointService").Methods()
	entryPointServiceGetEntryPointHandler := connect.NewUnaryHandler(
		EntryPointServiceGetEntryPointProcedure,
		svc.GetEntryPoint,
		connect.WithSchema(entryPointServiceMethods.ByName("GetEntryPoint")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	entryPointServiceCreateEntryPointHandler := connect.NewUnaryHandler(
		EntryPointServiceCreateEntryPointProcedure,
		svc.CreateEntryPoint,
		connect.WithSchema(entryPointServiceMethods.ByName("CreateEntryPoint")),
		connect.WithHandlerOptions(opts...),
	)
	entryPointServiceUpdateEntryPointHandler := connect.NewUnaryHandler(
		EntryPointServiceUpdateEntryPointProcedure,
		svc.UpdateEntryPoint,
		connect.WithSchema(entryPointServiceMethods.ByName("UpdateEntryPoint")),
		connect.WithHandlerOptions(opts...),
	)
	entryPointServiceDeleteEntryPointHandler := connect.NewUnaryHandler(
		EntryPointServiceDeleteEntryPointProcedure,
		svc.DeleteEntryPoint,
		connect.WithSchema(entryPointServiceMethods.ByName("DeleteEntryPoint")),
		connect.WithHandlerOptions(opts...),
	)
	entryPointServiceListEntryPointsHandler := connect.NewUnaryHandler(
		EntryPointServiceListEntryPointsProcedure,
		svc.ListEntryPoints,
		connect.WithSchema(entryPointServiceMethods.ByName("ListEntryPoints")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/mantrae.v1.EntryPointService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EntryPointServiceGetEntryPointProcedure:
			entryPointServiceGetEntryPointHandler.ServeHTTP(w, r)
		case EntryPointServiceCreateEntryPointProcedure:
			entryPointServiceCreateEntryPointHandler.ServeHTTP(w, r)
		case EntryPointServiceUpdateEntryPointProcedure:
			entryPointServiceUpdateEntryPointHandler.ServeHTTP(w, r)
		case EntryPointServiceDeleteEntryPointProcedure:
			entryPointServiceDeleteEntryPointHandler.ServeHTTP(w, r)
		case EntryPointServiceListEntryPointsProcedure:
			entryPointServiceListEntryPointsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEntryPointServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEntryPointServiceHandler struct{}

func (UnimplementedEntryPointServiceHandler) GetEntryPoint(context.Context, *connect.Request[v1.GetEntryPointRequest]) (*connect.Response[v1.GetEntryPointResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.EntryPointService.GetEntryPoint is not implemented"))
}

func (UnimplementedEntryPointServiceHandler) CreateEntryPoint(context.Context, *connect.Request[v1.CreateEntryPointRequest]) (*connect.Response[v1.CreateEntryPointResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.EntryPointService.CreateEntryPoint is not implemented"))
}

func (UnimplementedEntryPointServiceHandler) UpdateEntryPoint(context.Context, *connect.Request[v1.UpdateEntryPointRequest]) (*connect.Response[v1.UpdateEntryPointResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.EntryPointService.UpdateEntryPoint is not implemented"))
}

func (UnimplementedEntryPointServiceHandler) DeleteEntryPoint(context.Context, *connect.Request[v1.DeleteEntryPointRequest]) (*connect.Response[v1.DeleteEntryPointResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.EntryPointService.DeleteEntryPoint is not implemented"))
}

func (UnimplementedEntryPointServiceHandler) ListEntryPoints(context.Context, *connect.Request[v1.ListEntryPointsRequest]) (*connect.Response[v1.ListEntryPointsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.EntryPointService.ListEntryPoints is not implemented"))
}
