// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mantrae/v1/middleware.proto

package mantraev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/mizuchilabs/mantrae/proto/gen/mantrae/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MiddlewareServiceName is the fully-qualified name of the MiddlewareService service.
	MiddlewareServiceName = "mantrae.v1.MiddlewareService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MiddlewareServiceGetMiddlewareProcedure is the fully-qualified name of the MiddlewareService's
	// GetMiddleware RPC.
	MiddlewareServiceGetMiddlewareProcedure = "/mantrae.v1.MiddlewareService/GetMiddleware"
	// MiddlewareServiceCreateMiddlewareProcedure is the fully-qualified name of the MiddlewareService's
	// CreateMiddleware RPC.
	MiddlewareServiceCreateMiddlewareProcedure = "/mantrae.v1.MiddlewareService/CreateMiddleware"
	// MiddlewareServiceUpdateMiddlewareProcedure is the fully-qualified name of the MiddlewareService's
	// UpdateMiddleware RPC.
	MiddlewareServiceUpdateMiddlewareProcedure = "/mantrae.v1.MiddlewareService/UpdateMiddleware"
	// MiddlewareServiceDeleteMiddlewareProcedure is the fully-qualified name of the MiddlewareService's
	// DeleteMiddleware RPC.
	MiddlewareServiceDeleteMiddlewareProcedure = "/mantrae.v1.MiddlewareService/DeleteMiddleware"
	// MiddlewareServiceListMiddlewaresProcedure is the fully-qualified name of the MiddlewareService's
	// ListMiddlewares RPC.
	MiddlewareServiceListMiddlewaresProcedure = "/mantrae.v1.MiddlewareService/ListMiddlewares"
	// MiddlewareServiceGetMiddlewarePluginsProcedure is the fully-qualified name of the
	// MiddlewareService's GetMiddlewarePlugins RPC.
	MiddlewareServiceGetMiddlewarePluginsProcedure = "/mantrae.v1.MiddlewareService/GetMiddlewarePlugins"
)

// MiddlewareServiceClient is a client for the mantrae.v1.MiddlewareService service.
type MiddlewareServiceClient interface {
	GetMiddleware(context.Context, *connect.Request[v1.GetMiddlewareRequest]) (*connect.Response[v1.GetMiddlewareResponse], error)
	CreateMiddleware(context.Context, *connect.Request[v1.CreateMiddlewareRequest]) (*connect.Response[v1.CreateMiddlewareResponse], error)
	UpdateMiddleware(context.Context, *connect.Request[v1.UpdateMiddlewareRequest]) (*connect.Response[v1.UpdateMiddlewareResponse], error)
	DeleteMiddleware(context.Context, *connect.Request[v1.DeleteMiddlewareRequest]) (*connect.Response[v1.DeleteMiddlewareResponse], error)
	ListMiddlewares(context.Context, *connect.Request[v1.ListMiddlewaresRequest]) (*connect.Response[v1.ListMiddlewaresResponse], error)
	GetMiddlewarePlugins(context.Context, *connect.Request[v1.GetMiddlewarePluginsRequest]) (*connect.Response[v1.GetMiddlewarePluginsResponse], error)
}

// NewMiddlewareServiceClient constructs a client for the mantrae.v1.MiddlewareService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMiddlewareServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MiddlewareServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	middlewareServiceMethods := v1.File_mantrae_v1_middleware_proto.Services().ByName("MiddlewareService").Methods()
	return &middlewareServiceClient{
		getMiddleware: connect.NewClient[v1.GetMiddlewareRequest, v1.GetMiddlewareResponse](
			httpClient,
			baseURL+MiddlewareServiceGetMiddlewareProcedure,
			connect.WithSchema(middlewareServiceMethods.ByName("GetMiddleware")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createMiddleware: connect.NewClient[v1.CreateMiddlewareRequest, v1.CreateMiddlewareResponse](
			httpClient,
			baseURL+MiddlewareServiceCreateMiddlewareProcedure,
			connect.WithSchema(middlewareServiceMethods.ByName("CreateMiddleware")),
			connect.WithClientOptions(opts...),
		),
		updateMiddleware: connect.NewClient[v1.UpdateMiddlewareRequest, v1.UpdateMiddlewareResponse](
			httpClient,
			baseURL+MiddlewareServiceUpdateMiddlewareProcedure,
			connect.WithSchema(middlewareServiceMethods.ByName("UpdateMiddleware")),
			connect.WithClientOptions(opts...),
		),
		deleteMiddleware: connect.NewClient[v1.DeleteMiddlewareRequest, v1.DeleteMiddlewareResponse](
			httpClient,
			baseURL+MiddlewareServiceDeleteMiddlewareProcedure,
			connect.WithSchema(middlewareServiceMethods.ByName("DeleteMiddleware")),
			connect.WithClientOptions(opts...),
		),
		listMiddlewares: connect.NewClient[v1.ListMiddlewaresRequest, v1.ListMiddlewaresResponse](
			httpClient,
			baseURL+MiddlewareServiceListMiddlewaresProcedure,
			connect.WithSchema(middlewareServiceMethods.ByName("ListMiddlewares")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getMiddlewarePlugins: connect.NewClient[v1.GetMiddlewarePluginsRequest, v1.GetMiddlewarePluginsResponse](
			httpClient,
			baseURL+MiddlewareServiceGetMiddlewarePluginsProcedure,
			connect.WithSchema(middlewareServiceMethods.ByName("GetMiddlewarePlugins")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// middlewareServiceClient implements MiddlewareServiceClient.
type middlewareServiceClient struct {
	getMiddleware        *connect.Client[v1.GetMiddlewareRequest, v1.GetMiddlewareResponse]
	createMiddleware     *connect.Client[v1.CreateMiddlewareRequest, v1.CreateMiddlewareResponse]
	updateMiddleware     *connect.Client[v1.UpdateMiddlewareRequest, v1.UpdateMiddlewareResponse]
	deleteMiddleware     *connect.Client[v1.DeleteMiddlewareRequest, v1.DeleteMiddlewareResponse]
	listMiddlewares      *connect.Client[v1.ListMiddlewaresRequest, v1.ListMiddlewaresResponse]
	getMiddlewarePlugins *connect.Client[v1.GetMiddlewarePluginsRequest, v1.GetMiddlewarePluginsResponse]
}

// GetMiddleware calls mantrae.v1.MiddlewareService.GetMiddleware.
func (c *middlewareServiceClient) GetMiddleware(ctx context.Context, req *connect.Request[v1.GetMiddlewareRequest]) (*connect.Response[v1.GetMiddlewareResponse], error) {
	return c.getMiddleware.CallUnary(ctx, req)
}

// CreateMiddleware calls mantrae.v1.MiddlewareService.CreateMiddleware.
func (c *middlewareServiceClient) CreateMiddleware(ctx context.Context, req *connect.Request[v1.CreateMiddlewareRequest]) (*connect.Response[v1.CreateMiddlewareResponse], error) {
	return c.createMiddleware.CallUnary(ctx, req)
}

// UpdateMiddleware calls mantrae.v1.MiddlewareService.UpdateMiddleware.
func (c *middlewareServiceClient) UpdateMiddleware(ctx context.Context, req *connect.Request[v1.UpdateMiddlewareRequest]) (*connect.Response[v1.UpdateMiddlewareResponse], error) {
	return c.updateMiddleware.CallUnary(ctx, req)
}

// DeleteMiddleware calls mantrae.v1.MiddlewareService.DeleteMiddleware.
func (c *middlewareServiceClient) DeleteMiddleware(ctx context.Context, req *connect.Request[v1.DeleteMiddlewareRequest]) (*connect.Response[v1.DeleteMiddlewareResponse], error) {
	return c.deleteMiddleware.CallUnary(ctx, req)
}

// ListMiddlewares calls mantrae.v1.MiddlewareService.ListMiddlewares.
func (c *middlewareServiceClient) ListMiddlewares(ctx context.Context, req *connect.Request[v1.ListMiddlewaresRequest]) (*connect.Response[v1.ListMiddlewaresResponse], error) {
	return c.listMiddlewares.CallUnary(ctx, req)
}

// GetMiddlewarePlugins calls mantrae.v1.MiddlewareService.GetMiddlewarePlugins.
func (c *middlewareServiceClient) GetMiddlewarePlugins(ctx context.Context, req *connect.Request[v1.GetMiddlewarePluginsRequest]) (*connect.Response[v1.GetMiddlewarePluginsResponse], error) {
	return c.getMiddlewarePlugins.CallUnary(ctx, req)
}

// MiddlewareServiceHandler is an implementation of the mantrae.v1.MiddlewareService service.
type MiddlewareServiceHandler interface {
	GetMiddleware(context.Context, *connect.Request[v1.GetMiddlewareRequest]) (*connect.Response[v1.GetMiddlewareResponse], error)
	CreateMiddleware(context.Context, *connect.Request[v1.CreateMiddlewareRequest]) (*connect.Response[v1.CreateMiddlewareResponse], error)
	UpdateMiddleware(context.Context, *connect.Request[v1.UpdateMiddlewareRequest]) (*connect.Response[v1.UpdateMiddlewareResponse], error)
	DeleteMiddleware(context.Context, *connect.Request[v1.DeleteMiddlewareRequest]) (*connect.Response[v1.DeleteMiddlewareResponse], error)
	ListMiddlewares(context.Context, *connect.Request[v1.ListMiddlewaresRequest]) (*connect.Response[v1.ListMiddlewaresResponse], error)
	GetMiddlewarePlugins(context.Context, *connect.Request[v1.GetMiddlewarePluginsRequest]) (*connect.Response[v1.GetMiddlewarePluginsResponse], error)
}

// NewMiddlewareServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMiddlewareServiceHandler(svc MiddlewareServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	middlewareServiceMethods := v1.File_mantrae_v1_middleware_proto.Services().ByName("MiddlewareService").Methods()
	middlewareServiceGetMiddlewareHandler := connect.NewUnaryHandler(
		MiddlewareServiceGetMiddlewareProcedure,
		svc.GetMiddleware,
		connect.WithSchema(middlewareServiceMethods.ByName("GetMiddleware")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	middlewareServiceCreateMiddlewareHandler := connect.NewUnaryHandler(
		MiddlewareServiceCreateMiddlewareProcedure,
		svc.CreateMiddleware,
		connect.WithSchema(middlewareServiceMethods.ByName("CreateMiddleware")),
		connect.WithHandlerOptions(opts...),
	)
	middlewareServiceUpdateMiddlewareHandler := connect.NewUnaryHandler(
		MiddlewareServiceUpdateMiddlewareProcedure,
		svc.UpdateMiddleware,
		connect.WithSchema(middlewareServiceMethods.ByName("UpdateMiddleware")),
		connect.WithHandlerOptions(opts...),
	)
	middlewareServiceDeleteMiddlewareHandler := connect.NewUnaryHandler(
		MiddlewareServiceDeleteMiddlewareProcedure,
		svc.DeleteMiddleware,
		connect.WithSchema(middlewareServiceMethods.ByName("DeleteMiddleware")),
		connect.WithHandlerOptions(opts...),
	)
	middlewareServiceListMiddlewaresHandler := connect.NewUnaryHandler(
		MiddlewareServiceListMiddlewaresProcedure,
		svc.ListMiddlewares,
		connect.WithSchema(middlewareServiceMethods.ByName("ListMiddlewares")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	middlewareServiceGetMiddlewarePluginsHandler := connect.NewUnaryHandler(
		MiddlewareServiceGetMiddlewarePluginsProcedure,
		svc.GetMiddlewarePlugins,
		connect.WithSchema(middlewareServiceMethods.ByName("GetMiddlewarePlugins")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/mantrae.v1.MiddlewareService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MiddlewareServiceGetMiddlewareProcedure:
			middlewareServiceGetMiddlewareHandler.ServeHTTP(w, r)
		case MiddlewareServiceCreateMiddlewareProcedure:
			middlewareServiceCreateMiddlewareHandler.ServeHTTP(w, r)
		case MiddlewareServiceUpdateMiddlewareProcedure:
			middlewareServiceUpdateMiddlewareHandler.ServeHTTP(w, r)
		case MiddlewareServiceDeleteMiddlewareProcedure:
			middlewareServiceDeleteMiddlewareHandler.ServeHTTP(w, r)
		case MiddlewareServiceListMiddlewaresProcedure:
			middlewareServiceListMiddlewaresHandler.ServeHTTP(w, r)
		case MiddlewareServiceGetMiddlewarePluginsProcedure:
			middlewareServiceGetMiddlewarePluginsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMiddlewareServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMiddlewareServiceHandler struct{}

func (UnimplementedMiddlewareServiceHandler) GetMiddleware(context.Context, *connect.Request[v1.GetMiddlewareRequest]) (*connect.Response[v1.GetMiddlewareResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.MiddlewareService.GetMiddleware is not implemented"))
}

func (UnimplementedMiddlewareServiceHandler) CreateMiddleware(context.Context, *connect.Request[v1.CreateMiddlewareRequest]) (*connect.Response[v1.CreateMiddlewareResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.MiddlewareService.CreateMiddleware is not implemented"))
}

func (UnimplementedMiddlewareServiceHandler) UpdateMiddleware(context.Context, *connect.Request[v1.UpdateMiddlewareRequest]) (*connect.Response[v1.UpdateMiddlewareResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.MiddlewareService.UpdateMiddleware is not implemented"))
}

func (UnimplementedMiddlewareServiceHandler) DeleteMiddleware(context.Context, *connect.Request[v1.DeleteMiddlewareRequest]) (*connect.Response[v1.DeleteMiddlewareResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.MiddlewareService.DeleteMiddleware is not implemented"))
}

func (UnimplementedMiddlewareServiceHandler) ListMiddlewares(context.Context, *connect.Request[v1.ListMiddlewaresRequest]) (*connect.Response[v1.ListMiddlewaresResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.MiddlewareService.ListMiddlewares is not implemented"))
}

func (UnimplementedMiddlewareServiceHandler) GetMiddlewarePlugins(context.Context, *connect.Request[v1.GetMiddlewarePluginsRequest]) (*connect.Response[v1.GetMiddlewarePluginsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.MiddlewareService.GetMiddlewarePlugins is not implemented"))
}
