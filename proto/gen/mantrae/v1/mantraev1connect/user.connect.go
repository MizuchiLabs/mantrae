// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mantrae/v1/user.proto

package mantraev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/mizuchilabs/mantrae/proto/gen/mantrae/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "mantrae.v1.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceLoginUserProcedure is the fully-qualified name of the UserService's LoginUser RPC.
	UserServiceLoginUserProcedure = "/mantrae.v1.UserService/LoginUser"
	// UserServiceVerifyJWTProcedure is the fully-qualified name of the UserService's VerifyJWT RPC.
	UserServiceVerifyJWTProcedure = "/mantrae.v1.UserService/VerifyJWT"
	// UserServiceVerifyOTPProcedure is the fully-qualified name of the UserService's VerifyOTP RPC.
	UserServiceVerifyOTPProcedure = "/mantrae.v1.UserService/VerifyOTP"
	// UserServiceSendOTPProcedure is the fully-qualified name of the UserService's SendOTP RPC.
	UserServiceSendOTPProcedure = "/mantrae.v1.UserService/SendOTP"
	// UserServiceGetUserProcedure is the fully-qualified name of the UserService's GetUser RPC.
	UserServiceGetUserProcedure = "/mantrae.v1.UserService/GetUser"
	// UserServiceCreateUserProcedure is the fully-qualified name of the UserService's CreateUser RPC.
	UserServiceCreateUserProcedure = "/mantrae.v1.UserService/CreateUser"
	// UserServiceUpdateUserProcedure is the fully-qualified name of the UserService's UpdateUser RPC.
	UserServiceUpdateUserProcedure = "/mantrae.v1.UserService/UpdateUser"
	// UserServiceDeleteUserProcedure is the fully-qualified name of the UserService's DeleteUser RPC.
	UserServiceDeleteUserProcedure = "/mantrae.v1.UserService/DeleteUser"
	// UserServiceListUsersProcedure is the fully-qualified name of the UserService's ListUsers RPC.
	UserServiceListUsersProcedure = "/mantrae.v1.UserService/ListUsers"
	// UserServiceGetOIDCStatusProcedure is the fully-qualified name of the UserService's GetOIDCStatus
	// RPC.
	UserServiceGetOIDCStatusProcedure = "/mantrae.v1.UserService/GetOIDCStatus"
)

// UserServiceClient is a client for the mantrae.v1.UserService service.
type UserServiceClient interface {
	LoginUser(context.Context, *connect.Request[v1.LoginUserRequest]) (*connect.Response[v1.LoginUserResponse], error)
	VerifyJWT(context.Context, *connect.Request[v1.VerifyJWTRequest]) (*connect.Response[v1.VerifyJWTResponse], error)
	VerifyOTP(context.Context, *connect.Request[v1.VerifyOTPRequest]) (*connect.Response[v1.VerifyOTPResponse], error)
	SendOTP(context.Context, *connect.Request[v1.SendOTPRequest]) (*connect.Response[v1.SendOTPResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	GetOIDCStatus(context.Context, *connect.Request[v1.GetOIDCStatusRequest]) (*connect.Response[v1.GetOIDCStatusResponse], error)
}

// NewUserServiceClient constructs a client for the mantrae.v1.UserService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := v1.File_mantrae_v1_user_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		loginUser: connect.NewClient[v1.LoginUserRequest, v1.LoginUserResponse](
			httpClient,
			baseURL+UserServiceLoginUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("LoginUser")),
			connect.WithClientOptions(opts...),
		),
		verifyJWT: connect.NewClient[v1.VerifyJWTRequest, v1.VerifyJWTResponse](
			httpClient,
			baseURL+UserServiceVerifyJWTProcedure,
			connect.WithSchema(userServiceMethods.ByName("VerifyJWT")),
			connect.WithClientOptions(opts...),
		),
		verifyOTP: connect.NewClient[v1.VerifyOTPRequest, v1.VerifyOTPResponse](
			httpClient,
			baseURL+UserServiceVerifyOTPProcedure,
			connect.WithSchema(userServiceMethods.ByName("VerifyOTP")),
			connect.WithClientOptions(opts...),
		),
		sendOTP: connect.NewClient[v1.SendOTPRequest, v1.SendOTPResponse](
			httpClient,
			baseURL+UserServiceSendOTPProcedure,
			connect.WithSchema(userServiceMethods.ByName("SendOTP")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+UserServiceGetUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUser")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createUser: connect.NewClient[v1.CreateUserRequest, v1.CreateUserResponse](
			httpClient,
			baseURL+UserServiceCreateUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("CreateUser")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[v1.UpdateUserRequest, v1.UpdateUserResponse](
			httpClient,
			baseURL+UserServiceUpdateUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[v1.DeleteUserRequest, v1.DeleteUserResponse](
			httpClient,
			baseURL+UserServiceDeleteUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("DeleteUser")),
			connect.WithClientOptions(opts...),
		),
		listUsers: connect.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+UserServiceListUsersProcedure,
			connect.WithSchema(userServiceMethods.ByName("ListUsers")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getOIDCStatus: connect.NewClient[v1.GetOIDCStatusRequest, v1.GetOIDCStatusResponse](
			httpClient,
			baseURL+UserServiceGetOIDCStatusProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetOIDCStatus")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	loginUser     *connect.Client[v1.LoginUserRequest, v1.LoginUserResponse]
	verifyJWT     *connect.Client[v1.VerifyJWTRequest, v1.VerifyJWTResponse]
	verifyOTP     *connect.Client[v1.VerifyOTPRequest, v1.VerifyOTPResponse]
	sendOTP       *connect.Client[v1.SendOTPRequest, v1.SendOTPResponse]
	getUser       *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
	createUser    *connect.Client[v1.CreateUserRequest, v1.CreateUserResponse]
	updateUser    *connect.Client[v1.UpdateUserRequest, v1.UpdateUserResponse]
	deleteUser    *connect.Client[v1.DeleteUserRequest, v1.DeleteUserResponse]
	listUsers     *connect.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	getOIDCStatus *connect.Client[v1.GetOIDCStatusRequest, v1.GetOIDCStatusResponse]
}

// LoginUser calls mantrae.v1.UserService.LoginUser.
func (c *userServiceClient) LoginUser(ctx context.Context, req *connect.Request[v1.LoginUserRequest]) (*connect.Response[v1.LoginUserResponse], error) {
	return c.loginUser.CallUnary(ctx, req)
}

// VerifyJWT calls mantrae.v1.UserService.VerifyJWT.
func (c *userServiceClient) VerifyJWT(ctx context.Context, req *connect.Request[v1.VerifyJWTRequest]) (*connect.Response[v1.VerifyJWTResponse], error) {
	return c.verifyJWT.CallUnary(ctx, req)
}

// VerifyOTP calls mantrae.v1.UserService.VerifyOTP.
func (c *userServiceClient) VerifyOTP(ctx context.Context, req *connect.Request[v1.VerifyOTPRequest]) (*connect.Response[v1.VerifyOTPResponse], error) {
	return c.verifyOTP.CallUnary(ctx, req)
}

// SendOTP calls mantrae.v1.UserService.SendOTP.
func (c *userServiceClient) SendOTP(ctx context.Context, req *connect.Request[v1.SendOTPRequest]) (*connect.Response[v1.SendOTPResponse], error) {
	return c.sendOTP.CallUnary(ctx, req)
}

// GetUser calls mantrae.v1.UserService.GetUser.
func (c *userServiceClient) GetUser(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// CreateUser calls mantrae.v1.UserService.CreateUser.
func (c *userServiceClient) CreateUser(ctx context.Context, req *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// UpdateUser calls mantrae.v1.UserService.UpdateUser.
func (c *userServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// DeleteUser calls mantrae.v1.UserService.DeleteUser.
func (c *userServiceClient) DeleteUser(ctx context.Context, req *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// ListUsers calls mantrae.v1.UserService.ListUsers.
func (c *userServiceClient) ListUsers(ctx context.Context, req *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// GetOIDCStatus calls mantrae.v1.UserService.GetOIDCStatus.
func (c *userServiceClient) GetOIDCStatus(ctx context.Context, req *connect.Request[v1.GetOIDCStatusRequest]) (*connect.Response[v1.GetOIDCStatusResponse], error) {
	return c.getOIDCStatus.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the mantrae.v1.UserService service.
type UserServiceHandler interface {
	LoginUser(context.Context, *connect.Request[v1.LoginUserRequest]) (*connect.Response[v1.LoginUserResponse], error)
	VerifyJWT(context.Context, *connect.Request[v1.VerifyJWTRequest]) (*connect.Response[v1.VerifyJWTResponse], error)
	VerifyOTP(context.Context, *connect.Request[v1.VerifyOTPRequest]) (*connect.Response[v1.VerifyOTPResponse], error)
	SendOTP(context.Context, *connect.Request[v1.SendOTPRequest]) (*connect.Response[v1.SendOTPResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error)
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	GetOIDCStatus(context.Context, *connect.Request[v1.GetOIDCStatusRequest]) (*connect.Response[v1.GetOIDCStatusResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := v1.File_mantrae_v1_user_proto.Services().ByName("UserService").Methods()
	userServiceLoginUserHandler := connect.NewUnaryHandler(
		UserServiceLoginUserProcedure,
		svc.LoginUser,
		connect.WithSchema(userServiceMethods.ByName("LoginUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceVerifyJWTHandler := connect.NewUnaryHandler(
		UserServiceVerifyJWTProcedure,
		svc.VerifyJWT,
		connect.WithSchema(userServiceMethods.ByName("VerifyJWT")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceVerifyOTPHandler := connect.NewUnaryHandler(
		UserServiceVerifyOTPProcedure,
		svc.VerifyOTP,
		connect.WithSchema(userServiceMethods.ByName("VerifyOTP")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceSendOTPHandler := connect.NewUnaryHandler(
		UserServiceSendOTPProcedure,
		svc.SendOTP,
		connect.WithSchema(userServiceMethods.ByName("SendOTP")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserHandler := connect.NewUnaryHandler(
		UserServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(userServiceMethods.ByName("GetUser")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	userServiceCreateUserHandler := connect.NewUnaryHandler(
		UserServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(userServiceMethods.ByName("CreateUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateUserHandler := connect.NewUnaryHandler(
		UserServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(userServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceDeleteUserHandler := connect.NewUnaryHandler(
		UserServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(userServiceMethods.ByName("DeleteUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListUsersHandler := connect.NewUnaryHandler(
		UserServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(userServiceMethods.ByName("ListUsers")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetOIDCStatusHandler := connect.NewUnaryHandler(
		UserServiceGetOIDCStatusProcedure,
		svc.GetOIDCStatus,
		connect.WithSchema(userServiceMethods.ByName("GetOIDCStatus")),
		connect.WithHandlerOptions(opts...),
	)
	return "/mantrae.v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceLoginUserProcedure:
			userServiceLoginUserHandler.ServeHTTP(w, r)
		case UserServiceVerifyJWTProcedure:
			userServiceVerifyJWTHandler.ServeHTTP(w, r)
		case UserServiceVerifyOTPProcedure:
			userServiceVerifyOTPHandler.ServeHTTP(w, r)
		case UserServiceSendOTPProcedure:
			userServiceSendOTPHandler.ServeHTTP(w, r)
		case UserServiceGetUserProcedure:
			userServiceGetUserHandler.ServeHTTP(w, r)
		case UserServiceCreateUserProcedure:
			userServiceCreateUserHandler.ServeHTTP(w, r)
		case UserServiceUpdateUserProcedure:
			userServiceUpdateUserHandler.ServeHTTP(w, r)
		case UserServiceDeleteUserProcedure:
			userServiceDeleteUserHandler.ServeHTTP(w, r)
		case UserServiceListUsersProcedure:
			userServiceListUsersHandler.ServeHTTP(w, r)
		case UserServiceGetOIDCStatusProcedure:
			userServiceGetOIDCStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) LoginUser(context.Context, *connect.Request[v1.LoginUserRequest]) (*connect.Response[v1.LoginUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.UserService.LoginUser is not implemented"))
}

func (UnimplementedUserServiceHandler) VerifyJWT(context.Context, *connect.Request[v1.VerifyJWTRequest]) (*connect.Response[v1.VerifyJWTResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.UserService.VerifyJWT is not implemented"))
}

func (UnimplementedUserServiceHandler) VerifyOTP(context.Context, *connect.Request[v1.VerifyOTPRequest]) (*connect.Response[v1.VerifyOTPResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.UserService.VerifyOTP is not implemented"))
}

func (UnimplementedUserServiceHandler) SendOTP(context.Context, *connect.Request[v1.SendOTPRequest]) (*connect.Response[v1.SendOTPResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.UserService.SendOTP is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.UserService.GetUser is not implemented"))
}

func (UnimplementedUserServiceHandler) CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.UserService.CreateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.UserService.UpdateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) DeleteUser(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[v1.DeleteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.UserService.DeleteUser is not implemented"))
}

func (UnimplementedUserServiceHandler) ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.UserService.ListUsers is not implemented"))
}

func (UnimplementedUserServiceHandler) GetOIDCStatus(context.Context, *connect.Request[v1.GetOIDCStatusRequest]) (*connect.Response[v1.GetOIDCStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.UserService.GetOIDCStatus is not implemented"))
}
