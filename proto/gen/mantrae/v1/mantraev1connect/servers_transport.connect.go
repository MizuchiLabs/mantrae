// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mantrae/v1/servers_transport.proto

package mantraev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/mizuchilabs/mantrae/proto/gen/mantrae/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServersTransportServiceName is the fully-qualified name of the ServersTransportService service.
	ServersTransportServiceName = "mantrae.v1.ServersTransportService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServersTransportServiceGetServersTransportProcedure is the fully-qualified name of the
	// ServersTransportService's GetServersTransport RPC.
	ServersTransportServiceGetServersTransportProcedure = "/mantrae.v1.ServersTransportService/GetServersTransport"
	// ServersTransportServiceCreateServersTransportProcedure is the fully-qualified name of the
	// ServersTransportService's CreateServersTransport RPC.
	ServersTransportServiceCreateServersTransportProcedure = "/mantrae.v1.ServersTransportService/CreateServersTransport"
	// ServersTransportServiceUpdateServersTransportProcedure is the fully-qualified name of the
	// ServersTransportService's UpdateServersTransport RPC.
	ServersTransportServiceUpdateServersTransportProcedure = "/mantrae.v1.ServersTransportService/UpdateServersTransport"
	// ServersTransportServiceDeleteServersTransportProcedure is the fully-qualified name of the
	// ServersTransportService's DeleteServersTransport RPC.
	ServersTransportServiceDeleteServersTransportProcedure = "/mantrae.v1.ServersTransportService/DeleteServersTransport"
	// ServersTransportServiceListServersTransportsProcedure is the fully-qualified name of the
	// ServersTransportService's ListServersTransports RPC.
	ServersTransportServiceListServersTransportsProcedure = "/mantrae.v1.ServersTransportService/ListServersTransports"
)

// ServersTransportServiceClient is a client for the mantrae.v1.ServersTransportService service.
type ServersTransportServiceClient interface {
	GetServersTransport(context.Context, *connect.Request[v1.GetServersTransportRequest]) (*connect.Response[v1.GetServersTransportResponse], error)
	CreateServersTransport(context.Context, *connect.Request[v1.CreateServersTransportRequest]) (*connect.Response[v1.CreateServersTransportResponse], error)
	UpdateServersTransport(context.Context, *connect.Request[v1.UpdateServersTransportRequest]) (*connect.Response[v1.UpdateServersTransportResponse], error)
	DeleteServersTransport(context.Context, *connect.Request[v1.DeleteServersTransportRequest]) (*connect.Response[v1.DeleteServersTransportResponse], error)
	ListServersTransports(context.Context, *connect.Request[v1.ListServersTransportsRequest]) (*connect.Response[v1.ListServersTransportsResponse], error)
}

// NewServersTransportServiceClient constructs a client for the mantrae.v1.ServersTransportService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServersTransportServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServersTransportServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	serversTransportServiceMethods := v1.File_mantrae_v1_servers_transport_proto.Services().ByName("ServersTransportService").Methods()
	return &serversTransportServiceClient{
		getServersTransport: connect.NewClient[v1.GetServersTransportRequest, v1.GetServersTransportResponse](
			httpClient,
			baseURL+ServersTransportServiceGetServersTransportProcedure,
			connect.WithSchema(serversTransportServiceMethods.ByName("GetServersTransport")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createServersTransport: connect.NewClient[v1.CreateServersTransportRequest, v1.CreateServersTransportResponse](
			httpClient,
			baseURL+ServersTransportServiceCreateServersTransportProcedure,
			connect.WithSchema(serversTransportServiceMethods.ByName("CreateServersTransport")),
			connect.WithClientOptions(opts...),
		),
		updateServersTransport: connect.NewClient[v1.UpdateServersTransportRequest, v1.UpdateServersTransportResponse](
			httpClient,
			baseURL+ServersTransportServiceUpdateServersTransportProcedure,
			connect.WithSchema(serversTransportServiceMethods.ByName("UpdateServersTransport")),
			connect.WithClientOptions(opts...),
		),
		deleteServersTransport: connect.NewClient[v1.DeleteServersTransportRequest, v1.DeleteServersTransportResponse](
			httpClient,
			baseURL+ServersTransportServiceDeleteServersTransportProcedure,
			connect.WithSchema(serversTransportServiceMethods.ByName("DeleteServersTransport")),
			connect.WithClientOptions(opts...),
		),
		listServersTransports: connect.NewClient[v1.ListServersTransportsRequest, v1.ListServersTransportsResponse](
			httpClient,
			baseURL+ServersTransportServiceListServersTransportsProcedure,
			connect.WithSchema(serversTransportServiceMethods.ByName("ListServersTransports")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// serversTransportServiceClient implements ServersTransportServiceClient.
type serversTransportServiceClient struct {
	getServersTransport    *connect.Client[v1.GetServersTransportRequest, v1.GetServersTransportResponse]
	createServersTransport *connect.Client[v1.CreateServersTransportRequest, v1.CreateServersTransportResponse]
	updateServersTransport *connect.Client[v1.UpdateServersTransportRequest, v1.UpdateServersTransportResponse]
	deleteServersTransport *connect.Client[v1.DeleteServersTransportRequest, v1.DeleteServersTransportResponse]
	listServersTransports  *connect.Client[v1.ListServersTransportsRequest, v1.ListServersTransportsResponse]
}

// GetServersTransport calls mantrae.v1.ServersTransportService.GetServersTransport.
func (c *serversTransportServiceClient) GetServersTransport(ctx context.Context, req *connect.Request[v1.GetServersTransportRequest]) (*connect.Response[v1.GetServersTransportResponse], error) {
	return c.getServersTransport.CallUnary(ctx, req)
}

// CreateServersTransport calls mantrae.v1.ServersTransportService.CreateServersTransport.
func (c *serversTransportServiceClient) CreateServersTransport(ctx context.Context, req *connect.Request[v1.CreateServersTransportRequest]) (*connect.Response[v1.CreateServersTransportResponse], error) {
	return c.createServersTransport.CallUnary(ctx, req)
}

// UpdateServersTransport calls mantrae.v1.ServersTransportService.UpdateServersTransport.
func (c *serversTransportServiceClient) UpdateServersTransport(ctx context.Context, req *connect.Request[v1.UpdateServersTransportRequest]) (*connect.Response[v1.UpdateServersTransportResponse], error) {
	return c.updateServersTransport.CallUnary(ctx, req)
}

// DeleteServersTransport calls mantrae.v1.ServersTransportService.DeleteServersTransport.
func (c *serversTransportServiceClient) DeleteServersTransport(ctx context.Context, req *connect.Request[v1.DeleteServersTransportRequest]) (*connect.Response[v1.DeleteServersTransportResponse], error) {
	return c.deleteServersTransport.CallUnary(ctx, req)
}

// ListServersTransports calls mantrae.v1.ServersTransportService.ListServersTransports.
func (c *serversTransportServiceClient) ListServersTransports(ctx context.Context, req *connect.Request[v1.ListServersTransportsRequest]) (*connect.Response[v1.ListServersTransportsResponse], error) {
	return c.listServersTransports.CallUnary(ctx, req)
}

// ServersTransportServiceHandler is an implementation of the mantrae.v1.ServersTransportService
// service.
type ServersTransportServiceHandler interface {
	GetServersTransport(context.Context, *connect.Request[v1.GetServersTransportRequest]) (*connect.Response[v1.GetServersTransportResponse], error)
	CreateServersTransport(context.Context, *connect.Request[v1.CreateServersTransportRequest]) (*connect.Response[v1.CreateServersTransportResponse], error)
	UpdateServersTransport(context.Context, *connect.Request[v1.UpdateServersTransportRequest]) (*connect.Response[v1.UpdateServersTransportResponse], error)
	DeleteServersTransport(context.Context, *connect.Request[v1.DeleteServersTransportRequest]) (*connect.Response[v1.DeleteServersTransportResponse], error)
	ListServersTransports(context.Context, *connect.Request[v1.ListServersTransportsRequest]) (*connect.Response[v1.ListServersTransportsResponse], error)
}

// NewServersTransportServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServersTransportServiceHandler(svc ServersTransportServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serversTransportServiceMethods := v1.File_mantrae_v1_servers_transport_proto.Services().ByName("ServersTransportService").Methods()
	serversTransportServiceGetServersTransportHandler := connect.NewUnaryHandler(
		ServersTransportServiceGetServersTransportProcedure,
		svc.GetServersTransport,
		connect.WithSchema(serversTransportServiceMethods.ByName("GetServersTransport")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	serversTransportServiceCreateServersTransportHandler := connect.NewUnaryHandler(
		ServersTransportServiceCreateServersTransportProcedure,
		svc.CreateServersTransport,
		connect.WithSchema(serversTransportServiceMethods.ByName("CreateServersTransport")),
		connect.WithHandlerOptions(opts...),
	)
	serversTransportServiceUpdateServersTransportHandler := connect.NewUnaryHandler(
		ServersTransportServiceUpdateServersTransportProcedure,
		svc.UpdateServersTransport,
		connect.WithSchema(serversTransportServiceMethods.ByName("UpdateServersTransport")),
		connect.WithHandlerOptions(opts...),
	)
	serversTransportServiceDeleteServersTransportHandler := connect.NewUnaryHandler(
		ServersTransportServiceDeleteServersTransportProcedure,
		svc.DeleteServersTransport,
		connect.WithSchema(serversTransportServiceMethods.ByName("DeleteServersTransport")),
		connect.WithHandlerOptions(opts...),
	)
	serversTransportServiceListServersTransportsHandler := connect.NewUnaryHandler(
		ServersTransportServiceListServersTransportsProcedure,
		svc.ListServersTransports,
		connect.WithSchema(serversTransportServiceMethods.ByName("ListServersTransports")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/mantrae.v1.ServersTransportService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServersTransportServiceGetServersTransportProcedure:
			serversTransportServiceGetServersTransportHandler.ServeHTTP(w, r)
		case ServersTransportServiceCreateServersTransportProcedure:
			serversTransportServiceCreateServersTransportHandler.ServeHTTP(w, r)
		case ServersTransportServiceUpdateServersTransportProcedure:
			serversTransportServiceUpdateServersTransportHandler.ServeHTTP(w, r)
		case ServersTransportServiceDeleteServersTransportProcedure:
			serversTransportServiceDeleteServersTransportHandler.ServeHTTP(w, r)
		case ServersTransportServiceListServersTransportsProcedure:
			serversTransportServiceListServersTransportsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServersTransportServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServersTransportServiceHandler struct{}

func (UnimplementedServersTransportServiceHandler) GetServersTransport(context.Context, *connect.Request[v1.GetServersTransportRequest]) (*connect.Response[v1.GetServersTransportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.ServersTransportService.GetServersTransport is not implemented"))
}

func (UnimplementedServersTransportServiceHandler) CreateServersTransport(context.Context, *connect.Request[v1.CreateServersTransportRequest]) (*connect.Response[v1.CreateServersTransportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.ServersTransportService.CreateServersTransport is not implemented"))
}

func (UnimplementedServersTransportServiceHandler) UpdateServersTransport(context.Context, *connect.Request[v1.UpdateServersTransportRequest]) (*connect.Response[v1.UpdateServersTransportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.ServersTransportService.UpdateServersTransport is not implemented"))
}

func (UnimplementedServersTransportServiceHandler) DeleteServersTransport(context.Context, *connect.Request[v1.DeleteServersTransportRequest]) (*connect.Response[v1.DeleteServersTransportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.ServersTransportService.DeleteServersTransport is not implemented"))
}

func (UnimplementedServersTransportServiceHandler) ListServersTransports(context.Context, *connect.Request[v1.ListServersTransportsRequest]) (*connect.Response[v1.ListServersTransportsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.ServersTransportService.ListServersTransports is not implemented"))
}
