// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mantrae/v1/util.proto

package mantraev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/mizuchilabs/mantrae/proto/gen/mantrae/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UtilServiceName is the fully-qualified name of the UtilService service.
	UtilServiceName = "mantrae.v1.UtilService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UtilServiceGetVersionProcedure is the fully-qualified name of the UtilService's GetVersion RPC.
	UtilServiceGetVersionProcedure = "/mantrae.v1.UtilService/GetVersion"
	// UtilServiceGetPublicIPProcedure is the fully-qualified name of the UtilService's GetPublicIP RPC.
	UtilServiceGetPublicIPProcedure = "/mantrae.v1.UtilService/GetPublicIP"
)

// UtilServiceClient is a client for the mantrae.v1.UtilService service.
type UtilServiceClient interface {
	GetVersion(context.Context, *connect.Request[v1.GetVersionRequest]) (*connect.Response[v1.GetVersionResponse], error)
	GetPublicIP(context.Context, *connect.Request[v1.GetPublicIPRequest]) (*connect.Response[v1.GetPublicIPResponse], error)
}

// NewUtilServiceClient constructs a client for the mantrae.v1.UtilService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUtilServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UtilServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	utilServiceMethods := v1.File_mantrae_v1_util_proto.Services().ByName("UtilService").Methods()
	return &utilServiceClient{
		getVersion: connect.NewClient[v1.GetVersionRequest, v1.GetVersionResponse](
			httpClient,
			baseURL+UtilServiceGetVersionProcedure,
			connect.WithSchema(utilServiceMethods.ByName("GetVersion")),
			connect.WithClientOptions(opts...),
		),
		getPublicIP: connect.NewClient[v1.GetPublicIPRequest, v1.GetPublicIPResponse](
			httpClient,
			baseURL+UtilServiceGetPublicIPProcedure,
			connect.WithSchema(utilServiceMethods.ByName("GetPublicIP")),
			connect.WithClientOptions(opts...),
		),
	}
}

// utilServiceClient implements UtilServiceClient.
type utilServiceClient struct {
	getVersion  *connect.Client[v1.GetVersionRequest, v1.GetVersionResponse]
	getPublicIP *connect.Client[v1.GetPublicIPRequest, v1.GetPublicIPResponse]
}

// GetVersion calls mantrae.v1.UtilService.GetVersion.
func (c *utilServiceClient) GetVersion(ctx context.Context, req *connect.Request[v1.GetVersionRequest]) (*connect.Response[v1.GetVersionResponse], error) {
	return c.getVersion.CallUnary(ctx, req)
}

// GetPublicIP calls mantrae.v1.UtilService.GetPublicIP.
func (c *utilServiceClient) GetPublicIP(ctx context.Context, req *connect.Request[v1.GetPublicIPRequest]) (*connect.Response[v1.GetPublicIPResponse], error) {
	return c.getPublicIP.CallUnary(ctx, req)
}

// UtilServiceHandler is an implementation of the mantrae.v1.UtilService service.
type UtilServiceHandler interface {
	GetVersion(context.Context, *connect.Request[v1.GetVersionRequest]) (*connect.Response[v1.GetVersionResponse], error)
	GetPublicIP(context.Context, *connect.Request[v1.GetPublicIPRequest]) (*connect.Response[v1.GetPublicIPResponse], error)
}

// NewUtilServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUtilServiceHandler(svc UtilServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	utilServiceMethods := v1.File_mantrae_v1_util_proto.Services().ByName("UtilService").Methods()
	utilServiceGetVersionHandler := connect.NewUnaryHandler(
		UtilServiceGetVersionProcedure,
		svc.GetVersion,
		connect.WithSchema(utilServiceMethods.ByName("GetVersion")),
		connect.WithHandlerOptions(opts...),
	)
	utilServiceGetPublicIPHandler := connect.NewUnaryHandler(
		UtilServiceGetPublicIPProcedure,
		svc.GetPublicIP,
		connect.WithSchema(utilServiceMethods.ByName("GetPublicIP")),
		connect.WithHandlerOptions(opts...),
	)
	return "/mantrae.v1.UtilService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UtilServiceGetVersionProcedure:
			utilServiceGetVersionHandler.ServeHTTP(w, r)
		case UtilServiceGetPublicIPProcedure:
			utilServiceGetPublicIPHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUtilServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUtilServiceHandler struct{}

func (UnimplementedUtilServiceHandler) GetVersion(context.Context, *connect.Request[v1.GetVersionRequest]) (*connect.Response[v1.GetVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.UtilService.GetVersion is not implemented"))
}

func (UnimplementedUtilServiceHandler) GetPublicIP(context.Context, *connect.Request[v1.GetPublicIPRequest]) (*connect.Response[v1.GetPublicIPResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.UtilService.GetPublicIP is not implemented"))
}
