// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mantrae/v1/agent_management.proto

package mantraev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/mizuchilabs/mantrae/proto/gen/mantrae/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AgentManagementServiceName is the fully-qualified name of the AgentManagementService service.
	AgentManagementServiceName = "mantrae.v1.AgentManagementService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AgentManagementServiceGetAgentProcedure is the fully-qualified name of the
	// AgentManagementService's GetAgent RPC.
	AgentManagementServiceGetAgentProcedure = "/mantrae.v1.AgentManagementService/GetAgent"
	// AgentManagementServiceCreateAgentProcedure is the fully-qualified name of the
	// AgentManagementService's CreateAgent RPC.
	AgentManagementServiceCreateAgentProcedure = "/mantrae.v1.AgentManagementService/CreateAgent"
	// AgentManagementServiceUpdateAgentIPProcedure is the fully-qualified name of the
	// AgentManagementService's UpdateAgentIP RPC.
	AgentManagementServiceUpdateAgentIPProcedure = "/mantrae.v1.AgentManagementService/UpdateAgentIP"
	// AgentManagementServiceDeleteAgentProcedure is the fully-qualified name of the
	// AgentManagementService's DeleteAgent RPC.
	AgentManagementServiceDeleteAgentProcedure = "/mantrae.v1.AgentManagementService/DeleteAgent"
	// AgentManagementServiceListAgentsProcedure is the fully-qualified name of the
	// AgentManagementService's ListAgents RPC.
	AgentManagementServiceListAgentsProcedure = "/mantrae.v1.AgentManagementService/ListAgents"
	// AgentManagementServiceRotateAgentTokenProcedure is the fully-qualified name of the
	// AgentManagementService's RotateAgentToken RPC.
	AgentManagementServiceRotateAgentTokenProcedure = "/mantrae.v1.AgentManagementService/RotateAgentToken"
	// AgentManagementServiceBootstrapAgentProcedure is the fully-qualified name of the
	// AgentManagementService's BootstrapAgent RPC.
	AgentManagementServiceBootstrapAgentProcedure = "/mantrae.v1.AgentManagementService/BootstrapAgent"
)

// AgentManagementServiceClient is a client for the mantrae.v1.AgentManagementService service.
type AgentManagementServiceClient interface {
	GetAgent(context.Context, *connect.Request[v1.GetAgentRequest]) (*connect.Response[v1.GetAgentResponse], error)
	CreateAgent(context.Context, *connect.Request[v1.CreateAgentRequest]) (*connect.Response[v1.CreateAgentResponse], error)
	UpdateAgentIP(context.Context, *connect.Request[v1.UpdateAgentIPRequest]) (*connect.Response[v1.UpdateAgentIPResponse], error)
	DeleteAgent(context.Context, *connect.Request[v1.DeleteAgentRequest]) (*connect.Response[v1.DeleteAgentResponse], error)
	ListAgents(context.Context, *connect.Request[v1.ListAgentsRequest]) (*connect.Response[v1.ListAgentsResponse], error)
	RotateAgentToken(context.Context, *connect.Request[v1.RotateAgentTokenRequest]) (*connect.Response[v1.RotateAgentTokenResponse], error)
	BootstrapAgent(context.Context, *connect.Request[v1.BootstrapAgentRequest]) (*connect.Response[v1.BootstrapAgentResponse], error)
}

// NewAgentManagementServiceClient constructs a client for the mantrae.v1.AgentManagementService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAgentManagementServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AgentManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	agentManagementServiceMethods := v1.File_mantrae_v1_agent_management_proto.Services().ByName("AgentManagementService").Methods()
	return &agentManagementServiceClient{
		getAgent: connect.NewClient[v1.GetAgentRequest, v1.GetAgentResponse](
			httpClient,
			baseURL+AgentManagementServiceGetAgentProcedure,
			connect.WithSchema(agentManagementServiceMethods.ByName("GetAgent")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createAgent: connect.NewClient[v1.CreateAgentRequest, v1.CreateAgentResponse](
			httpClient,
			baseURL+AgentManagementServiceCreateAgentProcedure,
			connect.WithSchema(agentManagementServiceMethods.ByName("CreateAgent")),
			connect.WithClientOptions(opts...),
		),
		updateAgentIP: connect.NewClient[v1.UpdateAgentIPRequest, v1.UpdateAgentIPResponse](
			httpClient,
			baseURL+AgentManagementServiceUpdateAgentIPProcedure,
			connect.WithSchema(agentManagementServiceMethods.ByName("UpdateAgentIP")),
			connect.WithClientOptions(opts...),
		),
		deleteAgent: connect.NewClient[v1.DeleteAgentRequest, v1.DeleteAgentResponse](
			httpClient,
			baseURL+AgentManagementServiceDeleteAgentProcedure,
			connect.WithSchema(agentManagementServiceMethods.ByName("DeleteAgent")),
			connect.WithClientOptions(opts...),
		),
		listAgents: connect.NewClient[v1.ListAgentsRequest, v1.ListAgentsResponse](
			httpClient,
			baseURL+AgentManagementServiceListAgentsProcedure,
			connect.WithSchema(agentManagementServiceMethods.ByName("ListAgents")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		rotateAgentToken: connect.NewClient[v1.RotateAgentTokenRequest, v1.RotateAgentTokenResponse](
			httpClient,
			baseURL+AgentManagementServiceRotateAgentTokenProcedure,
			connect.WithSchema(agentManagementServiceMethods.ByName("RotateAgentToken")),
			connect.WithClientOptions(opts...),
		),
		bootstrapAgent: connect.NewClient[v1.BootstrapAgentRequest, v1.BootstrapAgentResponse](
			httpClient,
			baseURL+AgentManagementServiceBootstrapAgentProcedure,
			connect.WithSchema(agentManagementServiceMethods.ByName("BootstrapAgent")),
			connect.WithClientOptions(opts...),
		),
	}
}

// agentManagementServiceClient implements AgentManagementServiceClient.
type agentManagementServiceClient struct {
	getAgent         *connect.Client[v1.GetAgentRequest, v1.GetAgentResponse]
	createAgent      *connect.Client[v1.CreateAgentRequest, v1.CreateAgentResponse]
	updateAgentIP    *connect.Client[v1.UpdateAgentIPRequest, v1.UpdateAgentIPResponse]
	deleteAgent      *connect.Client[v1.DeleteAgentRequest, v1.DeleteAgentResponse]
	listAgents       *connect.Client[v1.ListAgentsRequest, v1.ListAgentsResponse]
	rotateAgentToken *connect.Client[v1.RotateAgentTokenRequest, v1.RotateAgentTokenResponse]
	bootstrapAgent   *connect.Client[v1.BootstrapAgentRequest, v1.BootstrapAgentResponse]
}

// GetAgent calls mantrae.v1.AgentManagementService.GetAgent.
func (c *agentManagementServiceClient) GetAgent(ctx context.Context, req *connect.Request[v1.GetAgentRequest]) (*connect.Response[v1.GetAgentResponse], error) {
	return c.getAgent.CallUnary(ctx, req)
}

// CreateAgent calls mantrae.v1.AgentManagementService.CreateAgent.
func (c *agentManagementServiceClient) CreateAgent(ctx context.Context, req *connect.Request[v1.CreateAgentRequest]) (*connect.Response[v1.CreateAgentResponse], error) {
	return c.createAgent.CallUnary(ctx, req)
}

// UpdateAgentIP calls mantrae.v1.AgentManagementService.UpdateAgentIP.
func (c *agentManagementServiceClient) UpdateAgentIP(ctx context.Context, req *connect.Request[v1.UpdateAgentIPRequest]) (*connect.Response[v1.UpdateAgentIPResponse], error) {
	return c.updateAgentIP.CallUnary(ctx, req)
}

// DeleteAgent calls mantrae.v1.AgentManagementService.DeleteAgent.
func (c *agentManagementServiceClient) DeleteAgent(ctx context.Context, req *connect.Request[v1.DeleteAgentRequest]) (*connect.Response[v1.DeleteAgentResponse], error) {
	return c.deleteAgent.CallUnary(ctx, req)
}

// ListAgents calls mantrae.v1.AgentManagementService.ListAgents.
func (c *agentManagementServiceClient) ListAgents(ctx context.Context, req *connect.Request[v1.ListAgentsRequest]) (*connect.Response[v1.ListAgentsResponse], error) {
	return c.listAgents.CallUnary(ctx, req)
}

// RotateAgentToken calls mantrae.v1.AgentManagementService.RotateAgentToken.
func (c *agentManagementServiceClient) RotateAgentToken(ctx context.Context, req *connect.Request[v1.RotateAgentTokenRequest]) (*connect.Response[v1.RotateAgentTokenResponse], error) {
	return c.rotateAgentToken.CallUnary(ctx, req)
}

// BootstrapAgent calls mantrae.v1.AgentManagementService.BootstrapAgent.
func (c *agentManagementServiceClient) BootstrapAgent(ctx context.Context, req *connect.Request[v1.BootstrapAgentRequest]) (*connect.Response[v1.BootstrapAgentResponse], error) {
	return c.bootstrapAgent.CallUnary(ctx, req)
}

// AgentManagementServiceHandler is an implementation of the mantrae.v1.AgentManagementService
// service.
type AgentManagementServiceHandler interface {
	GetAgent(context.Context, *connect.Request[v1.GetAgentRequest]) (*connect.Response[v1.GetAgentResponse], error)
	CreateAgent(context.Context, *connect.Request[v1.CreateAgentRequest]) (*connect.Response[v1.CreateAgentResponse], error)
	UpdateAgentIP(context.Context, *connect.Request[v1.UpdateAgentIPRequest]) (*connect.Response[v1.UpdateAgentIPResponse], error)
	DeleteAgent(context.Context, *connect.Request[v1.DeleteAgentRequest]) (*connect.Response[v1.DeleteAgentResponse], error)
	ListAgents(context.Context, *connect.Request[v1.ListAgentsRequest]) (*connect.Response[v1.ListAgentsResponse], error)
	RotateAgentToken(context.Context, *connect.Request[v1.RotateAgentTokenRequest]) (*connect.Response[v1.RotateAgentTokenResponse], error)
	BootstrapAgent(context.Context, *connect.Request[v1.BootstrapAgentRequest]) (*connect.Response[v1.BootstrapAgentResponse], error)
}

// NewAgentManagementServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAgentManagementServiceHandler(svc AgentManagementServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	agentManagementServiceMethods := v1.File_mantrae_v1_agent_management_proto.Services().ByName("AgentManagementService").Methods()
	agentManagementServiceGetAgentHandler := connect.NewUnaryHandler(
		AgentManagementServiceGetAgentProcedure,
		svc.GetAgent,
		connect.WithSchema(agentManagementServiceMethods.ByName("GetAgent")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	agentManagementServiceCreateAgentHandler := connect.NewUnaryHandler(
		AgentManagementServiceCreateAgentProcedure,
		svc.CreateAgent,
		connect.WithSchema(agentManagementServiceMethods.ByName("CreateAgent")),
		connect.WithHandlerOptions(opts...),
	)
	agentManagementServiceUpdateAgentIPHandler := connect.NewUnaryHandler(
		AgentManagementServiceUpdateAgentIPProcedure,
		svc.UpdateAgentIP,
		connect.WithSchema(agentManagementServiceMethods.ByName("UpdateAgentIP")),
		connect.WithHandlerOptions(opts...),
	)
	agentManagementServiceDeleteAgentHandler := connect.NewUnaryHandler(
		AgentManagementServiceDeleteAgentProcedure,
		svc.DeleteAgent,
		connect.WithSchema(agentManagementServiceMethods.ByName("DeleteAgent")),
		connect.WithHandlerOptions(opts...),
	)
	agentManagementServiceListAgentsHandler := connect.NewUnaryHandler(
		AgentManagementServiceListAgentsProcedure,
		svc.ListAgents,
		connect.WithSchema(agentManagementServiceMethods.ByName("ListAgents")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	agentManagementServiceRotateAgentTokenHandler := connect.NewUnaryHandler(
		AgentManagementServiceRotateAgentTokenProcedure,
		svc.RotateAgentToken,
		connect.WithSchema(agentManagementServiceMethods.ByName("RotateAgentToken")),
		connect.WithHandlerOptions(opts...),
	)
	agentManagementServiceBootstrapAgentHandler := connect.NewUnaryHandler(
		AgentManagementServiceBootstrapAgentProcedure,
		svc.BootstrapAgent,
		connect.WithSchema(agentManagementServiceMethods.ByName("BootstrapAgent")),
		connect.WithHandlerOptions(opts...),
	)
	return "/mantrae.v1.AgentManagementService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AgentManagementServiceGetAgentProcedure:
			agentManagementServiceGetAgentHandler.ServeHTTP(w, r)
		case AgentManagementServiceCreateAgentProcedure:
			agentManagementServiceCreateAgentHandler.ServeHTTP(w, r)
		case AgentManagementServiceUpdateAgentIPProcedure:
			agentManagementServiceUpdateAgentIPHandler.ServeHTTP(w, r)
		case AgentManagementServiceDeleteAgentProcedure:
			agentManagementServiceDeleteAgentHandler.ServeHTTP(w, r)
		case AgentManagementServiceListAgentsProcedure:
			agentManagementServiceListAgentsHandler.ServeHTTP(w, r)
		case AgentManagementServiceRotateAgentTokenProcedure:
			agentManagementServiceRotateAgentTokenHandler.ServeHTTP(w, r)
		case AgentManagementServiceBootstrapAgentProcedure:
			agentManagementServiceBootstrapAgentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAgentManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAgentManagementServiceHandler struct{}

func (UnimplementedAgentManagementServiceHandler) GetAgent(context.Context, *connect.Request[v1.GetAgentRequest]) (*connect.Response[v1.GetAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.AgentManagementService.GetAgent is not implemented"))
}

func (UnimplementedAgentManagementServiceHandler) CreateAgent(context.Context, *connect.Request[v1.CreateAgentRequest]) (*connect.Response[v1.CreateAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.AgentManagementService.CreateAgent is not implemented"))
}

func (UnimplementedAgentManagementServiceHandler) UpdateAgentIP(context.Context, *connect.Request[v1.UpdateAgentIPRequest]) (*connect.Response[v1.UpdateAgentIPResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.AgentManagementService.UpdateAgentIP is not implemented"))
}

func (UnimplementedAgentManagementServiceHandler) DeleteAgent(context.Context, *connect.Request[v1.DeleteAgentRequest]) (*connect.Response[v1.DeleteAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.AgentManagementService.DeleteAgent is not implemented"))
}

func (UnimplementedAgentManagementServiceHandler) ListAgents(context.Context, *connect.Request[v1.ListAgentsRequest]) (*connect.Response[v1.ListAgentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.AgentManagementService.ListAgents is not implemented"))
}

func (UnimplementedAgentManagementServiceHandler) RotateAgentToken(context.Context, *connect.Request[v1.RotateAgentTokenRequest]) (*connect.Response[v1.RotateAgentTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.AgentManagementService.RotateAgentToken is not implemented"))
}

func (UnimplementedAgentManagementServiceHandler) BootstrapAgent(context.Context, *connect.Request[v1.BootstrapAgentRequest]) (*connect.Response[v1.BootstrapAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.AgentManagementService.BootstrapAgent is not implemented"))
}
