// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mantrae/v1/router.proto

package mantraev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/mizuchilabs/mantrae/proto/gen/mantrae/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RouterServiceName is the fully-qualified name of the RouterService service.
	RouterServiceName = "mantrae.v1.RouterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RouterServiceGetRouterProcedure is the fully-qualified name of the RouterService's GetRouter RPC.
	RouterServiceGetRouterProcedure = "/mantrae.v1.RouterService/GetRouter"
	// RouterServiceCreateRouterProcedure is the fully-qualified name of the RouterService's
	// CreateRouter RPC.
	RouterServiceCreateRouterProcedure = "/mantrae.v1.RouterService/CreateRouter"
	// RouterServiceUpdateRouterProcedure is the fully-qualified name of the RouterService's
	// UpdateRouter RPC.
	RouterServiceUpdateRouterProcedure = "/mantrae.v1.RouterService/UpdateRouter"
	// RouterServiceDeleteRouterProcedure is the fully-qualified name of the RouterService's
	// DeleteRouter RPC.
	RouterServiceDeleteRouterProcedure = "/mantrae.v1.RouterService/DeleteRouter"
	// RouterServiceListRoutersProcedure is the fully-qualified name of the RouterService's ListRouters
	// RPC.
	RouterServiceListRoutersProcedure = "/mantrae.v1.RouterService/ListRouters"
)

// RouterServiceClient is a client for the mantrae.v1.RouterService service.
type RouterServiceClient interface {
	GetRouter(context.Context, *connect.Request[v1.GetRouterRequest]) (*connect.Response[v1.GetRouterResponse], error)
	CreateRouter(context.Context, *connect.Request[v1.CreateRouterRequest]) (*connect.Response[v1.CreateRouterResponse], error)
	UpdateRouter(context.Context, *connect.Request[v1.UpdateRouterRequest]) (*connect.Response[v1.UpdateRouterResponse], error)
	DeleteRouter(context.Context, *connect.Request[v1.DeleteRouterRequest]) (*connect.Response[v1.DeleteRouterResponse], error)
	ListRouters(context.Context, *connect.Request[v1.ListRoutersRequest]) (*connect.Response[v1.ListRoutersResponse], error)
}

// NewRouterServiceClient constructs a client for the mantrae.v1.RouterService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRouterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RouterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	routerServiceMethods := v1.File_mantrae_v1_router_proto.Services().ByName("RouterService").Methods()
	return &routerServiceClient{
		getRouter: connect.NewClient[v1.GetRouterRequest, v1.GetRouterResponse](
			httpClient,
			baseURL+RouterServiceGetRouterProcedure,
			connect.WithSchema(routerServiceMethods.ByName("GetRouter")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createRouter: connect.NewClient[v1.CreateRouterRequest, v1.CreateRouterResponse](
			httpClient,
			baseURL+RouterServiceCreateRouterProcedure,
			connect.WithSchema(routerServiceMethods.ByName("CreateRouter")),
			connect.WithClientOptions(opts...),
		),
		updateRouter: connect.NewClient[v1.UpdateRouterRequest, v1.UpdateRouterResponse](
			httpClient,
			baseURL+RouterServiceUpdateRouterProcedure,
			connect.WithSchema(routerServiceMethods.ByName("UpdateRouter")),
			connect.WithClientOptions(opts...),
		),
		deleteRouter: connect.NewClient[v1.DeleteRouterRequest, v1.DeleteRouterResponse](
			httpClient,
			baseURL+RouterServiceDeleteRouterProcedure,
			connect.WithSchema(routerServiceMethods.ByName("DeleteRouter")),
			connect.WithClientOptions(opts...),
		),
		listRouters: connect.NewClient[v1.ListRoutersRequest, v1.ListRoutersResponse](
			httpClient,
			baseURL+RouterServiceListRoutersProcedure,
			connect.WithSchema(routerServiceMethods.ByName("ListRouters")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// routerServiceClient implements RouterServiceClient.
type routerServiceClient struct {
	getRouter    *connect.Client[v1.GetRouterRequest, v1.GetRouterResponse]
	createRouter *connect.Client[v1.CreateRouterRequest, v1.CreateRouterResponse]
	updateRouter *connect.Client[v1.UpdateRouterRequest, v1.UpdateRouterResponse]
	deleteRouter *connect.Client[v1.DeleteRouterRequest, v1.DeleteRouterResponse]
	listRouters  *connect.Client[v1.ListRoutersRequest, v1.ListRoutersResponse]
}

// GetRouter calls mantrae.v1.RouterService.GetRouter.
func (c *routerServiceClient) GetRouter(ctx context.Context, req *connect.Request[v1.GetRouterRequest]) (*connect.Response[v1.GetRouterResponse], error) {
	return c.getRouter.CallUnary(ctx, req)
}

// CreateRouter calls mantrae.v1.RouterService.CreateRouter.
func (c *routerServiceClient) CreateRouter(ctx context.Context, req *connect.Request[v1.CreateRouterRequest]) (*connect.Response[v1.CreateRouterResponse], error) {
	return c.createRouter.CallUnary(ctx, req)
}

// UpdateRouter calls mantrae.v1.RouterService.UpdateRouter.
func (c *routerServiceClient) UpdateRouter(ctx context.Context, req *connect.Request[v1.UpdateRouterRequest]) (*connect.Response[v1.UpdateRouterResponse], error) {
	return c.updateRouter.CallUnary(ctx, req)
}

// DeleteRouter calls mantrae.v1.RouterService.DeleteRouter.
func (c *routerServiceClient) DeleteRouter(ctx context.Context, req *connect.Request[v1.DeleteRouterRequest]) (*connect.Response[v1.DeleteRouterResponse], error) {
	return c.deleteRouter.CallUnary(ctx, req)
}

// ListRouters calls mantrae.v1.RouterService.ListRouters.
func (c *routerServiceClient) ListRouters(ctx context.Context, req *connect.Request[v1.ListRoutersRequest]) (*connect.Response[v1.ListRoutersResponse], error) {
	return c.listRouters.CallUnary(ctx, req)
}

// RouterServiceHandler is an implementation of the mantrae.v1.RouterService service.
type RouterServiceHandler interface {
	GetRouter(context.Context, *connect.Request[v1.GetRouterRequest]) (*connect.Response[v1.GetRouterResponse], error)
	CreateRouter(context.Context, *connect.Request[v1.CreateRouterRequest]) (*connect.Response[v1.CreateRouterResponse], error)
	UpdateRouter(context.Context, *connect.Request[v1.UpdateRouterRequest]) (*connect.Response[v1.UpdateRouterResponse], error)
	DeleteRouter(context.Context, *connect.Request[v1.DeleteRouterRequest]) (*connect.Response[v1.DeleteRouterResponse], error)
	ListRouters(context.Context, *connect.Request[v1.ListRoutersRequest]) (*connect.Response[v1.ListRoutersResponse], error)
}

// NewRouterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRouterServiceHandler(svc RouterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	routerServiceMethods := v1.File_mantrae_v1_router_proto.Services().ByName("RouterService").Methods()
	routerServiceGetRouterHandler := connect.NewUnaryHandler(
		RouterServiceGetRouterProcedure,
		svc.GetRouter,
		connect.WithSchema(routerServiceMethods.ByName("GetRouter")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	routerServiceCreateRouterHandler := connect.NewUnaryHandler(
		RouterServiceCreateRouterProcedure,
		svc.CreateRouter,
		connect.WithSchema(routerServiceMethods.ByName("CreateRouter")),
		connect.WithHandlerOptions(opts...),
	)
	routerServiceUpdateRouterHandler := connect.NewUnaryHandler(
		RouterServiceUpdateRouterProcedure,
		svc.UpdateRouter,
		connect.WithSchema(routerServiceMethods.ByName("UpdateRouter")),
		connect.WithHandlerOptions(opts...),
	)
	routerServiceDeleteRouterHandler := connect.NewUnaryHandler(
		RouterServiceDeleteRouterProcedure,
		svc.DeleteRouter,
		connect.WithSchema(routerServiceMethods.ByName("DeleteRouter")),
		connect.WithHandlerOptions(opts...),
	)
	routerServiceListRoutersHandler := connect.NewUnaryHandler(
		RouterServiceListRoutersProcedure,
		svc.ListRouters,
		connect.WithSchema(routerServiceMethods.ByName("ListRouters")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/mantrae.v1.RouterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RouterServiceGetRouterProcedure:
			routerServiceGetRouterHandler.ServeHTTP(w, r)
		case RouterServiceCreateRouterProcedure:
			routerServiceCreateRouterHandler.ServeHTTP(w, r)
		case RouterServiceUpdateRouterProcedure:
			routerServiceUpdateRouterHandler.ServeHTTP(w, r)
		case RouterServiceDeleteRouterProcedure:
			routerServiceDeleteRouterHandler.ServeHTTP(w, r)
		case RouterServiceListRoutersProcedure:
			routerServiceListRoutersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRouterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRouterServiceHandler struct{}

func (UnimplementedRouterServiceHandler) GetRouter(context.Context, *connect.Request[v1.GetRouterRequest]) (*connect.Response[v1.GetRouterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.RouterService.GetRouter is not implemented"))
}

func (UnimplementedRouterServiceHandler) CreateRouter(context.Context, *connect.Request[v1.CreateRouterRequest]) (*connect.Response[v1.CreateRouterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.RouterService.CreateRouter is not implemented"))
}

func (UnimplementedRouterServiceHandler) UpdateRouter(context.Context, *connect.Request[v1.UpdateRouterRequest]) (*connect.Response[v1.UpdateRouterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.RouterService.UpdateRouter is not implemented"))
}

func (UnimplementedRouterServiceHandler) DeleteRouter(context.Context, *connect.Request[v1.DeleteRouterRequest]) (*connect.Response[v1.DeleteRouterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.RouterService.DeleteRouter is not implemented"))
}

func (UnimplementedRouterServiceHandler) ListRouters(context.Context, *connect.Request[v1.ListRoutersRequest]) (*connect.Response[v1.ListRoutersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.RouterService.ListRouters is not implemented"))
}
