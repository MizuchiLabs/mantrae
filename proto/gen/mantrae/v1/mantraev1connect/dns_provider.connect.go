// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mantrae/v1/dns_provider.proto

package mantraev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/mizuchilabs/mantrae/proto/gen/mantrae/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DnsProviderServiceName is the fully-qualified name of the DnsProviderService service.
	DnsProviderServiceName = "mantrae.v1.DnsProviderService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DnsProviderServiceGetDnsProviderProcedure is the fully-qualified name of the DnsProviderService's
	// GetDnsProvider RPC.
	DnsProviderServiceGetDnsProviderProcedure = "/mantrae.v1.DnsProviderService/GetDnsProvider"
	// DnsProviderServiceCreateDnsProviderProcedure is the fully-qualified name of the
	// DnsProviderService's CreateDnsProvider RPC.
	DnsProviderServiceCreateDnsProviderProcedure = "/mantrae.v1.DnsProviderService/CreateDnsProvider"
	// DnsProviderServiceUpdateDnsProviderProcedure is the fully-qualified name of the
	// DnsProviderService's UpdateDnsProvider RPC.
	DnsProviderServiceUpdateDnsProviderProcedure = "/mantrae.v1.DnsProviderService/UpdateDnsProvider"
	// DnsProviderServiceDeleteDnsProviderProcedure is the fully-qualified name of the
	// DnsProviderService's DeleteDnsProvider RPC.
	DnsProviderServiceDeleteDnsProviderProcedure = "/mantrae.v1.DnsProviderService/DeleteDnsProvider"
	// DnsProviderServiceListDnsProvidersProcedure is the fully-qualified name of the
	// DnsProviderService's ListDnsProviders RPC.
	DnsProviderServiceListDnsProvidersProcedure = "/mantrae.v1.DnsProviderService/ListDnsProviders"
)

// DnsProviderServiceClient is a client for the mantrae.v1.DnsProviderService service.
type DnsProviderServiceClient interface {
	GetDnsProvider(context.Context, *connect.Request[v1.GetDnsProviderRequest]) (*connect.Response[v1.GetDnsProviderResponse], error)
	CreateDnsProvider(context.Context, *connect.Request[v1.CreateDnsProviderRequest]) (*connect.Response[v1.CreateDnsProviderResponse], error)
	UpdateDnsProvider(context.Context, *connect.Request[v1.UpdateDnsProviderRequest]) (*connect.Response[v1.UpdateDnsProviderResponse], error)
	DeleteDnsProvider(context.Context, *connect.Request[v1.DeleteDnsProviderRequest]) (*connect.Response[v1.DeleteDnsProviderResponse], error)
	ListDnsProviders(context.Context, *connect.Request[v1.ListDnsProvidersRequest]) (*connect.Response[v1.ListDnsProvidersResponse], error)
}

// NewDnsProviderServiceClient constructs a client for the mantrae.v1.DnsProviderService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDnsProviderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DnsProviderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dnsProviderServiceMethods := v1.File_mantrae_v1_dns_provider_proto.Services().ByName("DnsProviderService").Methods()
	return &dnsProviderServiceClient{
		getDnsProvider: connect.NewClient[v1.GetDnsProviderRequest, v1.GetDnsProviderResponse](
			httpClient,
			baseURL+DnsProviderServiceGetDnsProviderProcedure,
			connect.WithSchema(dnsProviderServiceMethods.ByName("GetDnsProvider")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createDnsProvider: connect.NewClient[v1.CreateDnsProviderRequest, v1.CreateDnsProviderResponse](
			httpClient,
			baseURL+DnsProviderServiceCreateDnsProviderProcedure,
			connect.WithSchema(dnsProviderServiceMethods.ByName("CreateDnsProvider")),
			connect.WithClientOptions(opts...),
		),
		updateDnsProvider: connect.NewClient[v1.UpdateDnsProviderRequest, v1.UpdateDnsProviderResponse](
			httpClient,
			baseURL+DnsProviderServiceUpdateDnsProviderProcedure,
			connect.WithSchema(dnsProviderServiceMethods.ByName("UpdateDnsProvider")),
			connect.WithClientOptions(opts...),
		),
		deleteDnsProvider: connect.NewClient[v1.DeleteDnsProviderRequest, v1.DeleteDnsProviderResponse](
			httpClient,
			baseURL+DnsProviderServiceDeleteDnsProviderProcedure,
			connect.WithSchema(dnsProviderServiceMethods.ByName("DeleteDnsProvider")),
			connect.WithClientOptions(opts...),
		),
		listDnsProviders: connect.NewClient[v1.ListDnsProvidersRequest, v1.ListDnsProvidersResponse](
			httpClient,
			baseURL+DnsProviderServiceListDnsProvidersProcedure,
			connect.WithSchema(dnsProviderServiceMethods.ByName("ListDnsProviders")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// dnsProviderServiceClient implements DnsProviderServiceClient.
type dnsProviderServiceClient struct {
	getDnsProvider    *connect.Client[v1.GetDnsProviderRequest, v1.GetDnsProviderResponse]
	createDnsProvider *connect.Client[v1.CreateDnsProviderRequest, v1.CreateDnsProviderResponse]
	updateDnsProvider *connect.Client[v1.UpdateDnsProviderRequest, v1.UpdateDnsProviderResponse]
	deleteDnsProvider *connect.Client[v1.DeleteDnsProviderRequest, v1.DeleteDnsProviderResponse]
	listDnsProviders  *connect.Client[v1.ListDnsProvidersRequest, v1.ListDnsProvidersResponse]
}

// GetDnsProvider calls mantrae.v1.DnsProviderService.GetDnsProvider.
func (c *dnsProviderServiceClient) GetDnsProvider(ctx context.Context, req *connect.Request[v1.GetDnsProviderRequest]) (*connect.Response[v1.GetDnsProviderResponse], error) {
	return c.getDnsProvider.CallUnary(ctx, req)
}

// CreateDnsProvider calls mantrae.v1.DnsProviderService.CreateDnsProvider.
func (c *dnsProviderServiceClient) CreateDnsProvider(ctx context.Context, req *connect.Request[v1.CreateDnsProviderRequest]) (*connect.Response[v1.CreateDnsProviderResponse], error) {
	return c.createDnsProvider.CallUnary(ctx, req)
}

// UpdateDnsProvider calls mantrae.v1.DnsProviderService.UpdateDnsProvider.
func (c *dnsProviderServiceClient) UpdateDnsProvider(ctx context.Context, req *connect.Request[v1.UpdateDnsProviderRequest]) (*connect.Response[v1.UpdateDnsProviderResponse], error) {
	return c.updateDnsProvider.CallUnary(ctx, req)
}

// DeleteDnsProvider calls mantrae.v1.DnsProviderService.DeleteDnsProvider.
func (c *dnsProviderServiceClient) DeleteDnsProvider(ctx context.Context, req *connect.Request[v1.DeleteDnsProviderRequest]) (*connect.Response[v1.DeleteDnsProviderResponse], error) {
	return c.deleteDnsProvider.CallUnary(ctx, req)
}

// ListDnsProviders calls mantrae.v1.DnsProviderService.ListDnsProviders.
func (c *dnsProviderServiceClient) ListDnsProviders(ctx context.Context, req *connect.Request[v1.ListDnsProvidersRequest]) (*connect.Response[v1.ListDnsProvidersResponse], error) {
	return c.listDnsProviders.CallUnary(ctx, req)
}

// DnsProviderServiceHandler is an implementation of the mantrae.v1.DnsProviderService service.
type DnsProviderServiceHandler interface {
	GetDnsProvider(context.Context, *connect.Request[v1.GetDnsProviderRequest]) (*connect.Response[v1.GetDnsProviderResponse], error)
	CreateDnsProvider(context.Context, *connect.Request[v1.CreateDnsProviderRequest]) (*connect.Response[v1.CreateDnsProviderResponse], error)
	UpdateDnsProvider(context.Context, *connect.Request[v1.UpdateDnsProviderRequest]) (*connect.Response[v1.UpdateDnsProviderResponse], error)
	DeleteDnsProvider(context.Context, *connect.Request[v1.DeleteDnsProviderRequest]) (*connect.Response[v1.DeleteDnsProviderResponse], error)
	ListDnsProviders(context.Context, *connect.Request[v1.ListDnsProvidersRequest]) (*connect.Response[v1.ListDnsProvidersResponse], error)
}

// NewDnsProviderServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDnsProviderServiceHandler(svc DnsProviderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dnsProviderServiceMethods := v1.File_mantrae_v1_dns_provider_proto.Services().ByName("DnsProviderService").Methods()
	dnsProviderServiceGetDnsProviderHandler := connect.NewUnaryHandler(
		DnsProviderServiceGetDnsProviderProcedure,
		svc.GetDnsProvider,
		connect.WithSchema(dnsProviderServiceMethods.ByName("GetDnsProvider")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	dnsProviderServiceCreateDnsProviderHandler := connect.NewUnaryHandler(
		DnsProviderServiceCreateDnsProviderProcedure,
		svc.CreateDnsProvider,
		connect.WithSchema(dnsProviderServiceMethods.ByName("CreateDnsProvider")),
		connect.WithHandlerOptions(opts...),
	)
	dnsProviderServiceUpdateDnsProviderHandler := connect.NewUnaryHandler(
		DnsProviderServiceUpdateDnsProviderProcedure,
		svc.UpdateDnsProvider,
		connect.WithSchema(dnsProviderServiceMethods.ByName("UpdateDnsProvider")),
		connect.WithHandlerOptions(opts...),
	)
	dnsProviderServiceDeleteDnsProviderHandler := connect.NewUnaryHandler(
		DnsProviderServiceDeleteDnsProviderProcedure,
		svc.DeleteDnsProvider,
		connect.WithSchema(dnsProviderServiceMethods.ByName("DeleteDnsProvider")),
		connect.WithHandlerOptions(opts...),
	)
	dnsProviderServiceListDnsProvidersHandler := connect.NewUnaryHandler(
		DnsProviderServiceListDnsProvidersProcedure,
		svc.ListDnsProviders,
		connect.WithSchema(dnsProviderServiceMethods.ByName("ListDnsProviders")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/mantrae.v1.DnsProviderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DnsProviderServiceGetDnsProviderProcedure:
			dnsProviderServiceGetDnsProviderHandler.ServeHTTP(w, r)
		case DnsProviderServiceCreateDnsProviderProcedure:
			dnsProviderServiceCreateDnsProviderHandler.ServeHTTP(w, r)
		case DnsProviderServiceUpdateDnsProviderProcedure:
			dnsProviderServiceUpdateDnsProviderHandler.ServeHTTP(w, r)
		case DnsProviderServiceDeleteDnsProviderProcedure:
			dnsProviderServiceDeleteDnsProviderHandler.ServeHTTP(w, r)
		case DnsProviderServiceListDnsProvidersProcedure:
			dnsProviderServiceListDnsProvidersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDnsProviderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDnsProviderServiceHandler struct{}

func (UnimplementedDnsProviderServiceHandler) GetDnsProvider(context.Context, *connect.Request[v1.GetDnsProviderRequest]) (*connect.Response[v1.GetDnsProviderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.DnsProviderService.GetDnsProvider is not implemented"))
}

func (UnimplementedDnsProviderServiceHandler) CreateDnsProvider(context.Context, *connect.Request[v1.CreateDnsProviderRequest]) (*connect.Response[v1.CreateDnsProviderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.DnsProviderService.CreateDnsProvider is not implemented"))
}

func (UnimplementedDnsProviderServiceHandler) UpdateDnsProvider(context.Context, *connect.Request[v1.UpdateDnsProviderRequest]) (*connect.Response[v1.UpdateDnsProviderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.DnsProviderService.UpdateDnsProvider is not implemented"))
}

func (UnimplementedDnsProviderServiceHandler) DeleteDnsProvider(context.Context, *connect.Request[v1.DeleteDnsProviderRequest]) (*connect.Response[v1.DeleteDnsProviderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.DnsProviderService.DeleteDnsProvider is not implemented"))
}

func (UnimplementedDnsProviderServiceHandler) ListDnsProviders(context.Context, *connect.Request[v1.ListDnsProvidersRequest]) (*connect.Response[v1.ListDnsProvidersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mantrae.v1.DnsProviderService.ListDnsProviders is not implemented"))
}
