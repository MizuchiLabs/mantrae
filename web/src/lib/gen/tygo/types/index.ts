// Code generated by tygo. DO NOT EDIT.

//////////
// source: domains.go

/**
 * Domain holds a domain name with SANs.
 */
export interface Domain {
  /**
   * Main defines the main domain name.
   */
  main?: string;
  /**
   * SANs defines the subject alternative domain names.
   */
  sans?: string[];
}

//////////
// source: file_or_content.go

/**
 * FileOrContent holds a file path or content.
 */
export type FileOrContent = string;

//////////
// source: host_resolver.go

/**
 * HostResolverConfig contain configuration for CNAME Flattening.
 */
export interface HostResolverConfig {
  cnameFlattening?: boolean;
  resolvConfig?: string;
  resolvDepth?: number /* int */;
}

//////////
// source: http_code_range.go

/**
 * HTTPCodeRanges holds HTTP code ranges.
 */
export type HTTPCodeRanges = number /* int */[][];

//////////
// source: logs.go

/**
 * AccessLogKeep is the keep string value.
 */
export const AccessLogKeep = "keep";
/**
 * AccessLogDrop is the drop string value.
 */
export const AccessLogDrop = "drop";
/**
 * AccessLogRedact is the redact string value.
 */
export const AccessLogRedact = "redact";
/**
 * CommonFormat is the common logging format (CLF).
 */
export const CommonFormat: string = "common";
export const OTelTraefikServiceName = "traefik";
/**
 * TraefikLog holds the configuration settings for the traefik logger.
 */
export interface TraefikLog {
  level?: string;
  format?: string;
  noColor?: boolean;
  filePath?: string;
  maxSize?: number /* int */;
  maxAge?: number /* int */;
  maxBackups?: number /* int */;
  compress?: boolean;
  otlp?: OTelLog;
}
/**
 * AccessLog holds the configuration settings for the access logger (middlewares/accesslog).
 */
export interface AccessLog {
  filePath?: string;
  format?: string;
  filters?: AccessLogFilters;
  fields?: AccessLogFields;
  bufferingSize?: number /* int64 */;
  addInternals?: boolean;
  otlp?: OTelLog;
}
/**
 * AccessLogFilters holds filters configuration.
 */
export interface AccessLogFilters {
  statusCodes?: string[];
  retryAttempts?: boolean;
  minDuration?: any /* types.Duration */;
}
/**
 * FieldHeaders holds configuration for access log headers.
 */
export interface FieldHeaders {
  defaultMode?: string;
  names?: { [key: string]: string};
}
/**
 * AccessLogFields holds configuration for access log fields.
 */
export interface AccessLogFields {
  defaultMode?: string;
  names?: { [key: string]: string};
  headers?: FieldHeaders;
}
/**
 * OTelLog provides configuration settings for the open-telemetry logger.
 */
export interface OTelLog {
  serviceName?: string;
  resourceAttributes?: { [key: string]: string};
  grpc?: OTelGRPC;
  http?: OTelHTTP;
}

//////////
// source: metrics.go

/**
 * Metrics provides options to expose and send Traefik metrics to different third party monitoring systems.
 */
export interface Metrics {
  addInternals?: boolean;
  prometheus?: Prometheus;
  datadog?: Datadog;
  statsD?: Statsd;
  influxDB2?: InfluxDB2;
  otlp?: OTLP;
}
/**
 * Prometheus can contain specific configuration used by the Prometheus Metrics exporter.
 */
export interface Prometheus {
  buckets?: number /* float64 */[];
  addEntryPointsLabels?: boolean;
  addRoutersLabels?: boolean;
  addServicesLabels?: boolean;
  entryPoint?: string;
  manualRouting?: boolean;
  headerLabels?: { [key: string]: string};
}
/**
 * Datadog contains address and metrics pushing interval configuration.
 */
export interface Datadog {
  address?: string;
  pushInterval?: any /* types.Duration */;
  addEntryPointsLabels?: boolean;
  addRoutersLabels?: boolean;
  addServicesLabels?: boolean;
  prefix?: string;
}
/**
 * Statsd contains address and metrics pushing interval configuration.
 */
export interface Statsd {
  address?: string;
  pushInterval?: any /* types.Duration */;
  addEntryPointsLabels?: boolean;
  addRoutersLabels?: boolean;
  addServicesLabels?: boolean;
  prefix?: string;
}
/**
 * InfluxDB2 contains address, token and metrics pushing interval configuration.
 */
export interface InfluxDB2 {
  address?: string;
  token?: string;
  pushInterval?: any /* types.Duration */;
  org?: string;
  bucket?: string;
  addEntryPointsLabels?: boolean;
  addRoutersLabels?: boolean;
  addServicesLabels?: boolean;
  additionalLabels?: { [key: string]: string};
}
/**
 * OTLP contains specific configuration used by the OpenTelemetry Metrics exporter.
 */
export interface OTLP {
  grpc?: OTelGRPC;
  http?: OTelHTTP;
  addEntryPointsLabels?: boolean;
  addRoutersLabels?: boolean;
  addServicesLabels?: boolean;
  explicitBoundaries?: number /* float64 */[];
  pushInterval?: any /* types.Duration */;
  serviceName?: string;
}
/**
 * Statistics provides options for monitoring request and response stats.
 */
export interface Statistics {
  recentErrors?: number /* int */;
}

//////////
// source: otel.go

/**
 * OTelGRPC provides configuration settings for the gRPC open-telemetry.
 */
export interface OTelGRPC {
  endpoint?: string;
  insecure?: boolean;
  tls?: ClientTLS;
  headers?: { [key: string]: string};
}
/**
 * OTelHTTP provides configuration settings for the HTTP open-telemetry.
 */
export interface OTelHTTP {
  endpoint?: string;
  tls?: ClientTLS;
  headers?: { [key: string]: string};
}

//////////
// source: route_appender.go

/**
 * RouteAppender appends routes on a router (/api, /ping ...).
 */
export type RouteAppender = any;

//////////
// source: tls.go

/**
 * ClientTLS holds TLS specific configurations as client
 * CA, Cert and Key can be either path or file contents.
 */
export interface ClientTLS {
  ca?: string;
  cert?: string;
  key?: string;
  insecureSkipVerify?: boolean;
}

//////////
// source: tracing.go

/**
 * OTelTracing provides configuration settings for the open-telemetry tracer.
 */
export interface OTelTracing {
  grpc?: OTelGRPC;
  http?: OTelHTTP;
}
/**
 * tpCloser converts a TraceProvider into an io.Closer.
 */
