// Code generated by tygo. DO NOT EDIT.

import type { Domain } from '../types';

//////////
// source: certificate.go

/**
 * Certificates defines traefik certificates type
 * Certs and Keys could be either a file path, or the file content itself.
 */
export type Certificates = Certificate[];
/**
 * Certificate holds a SSL cert/key pair
 * Certs and Key could be either a file path, or the file content itself.
 */
export interface Certificate {
	certFile?: any /* types.FileOrContent */;
	keyFile?: any /* types.FileOrContent */;
}
/**
 * FileOrContent hold a file path or content.
 */
export type FileOrContent = string;

//////////
// source: certificate_store.go

/**
 * CertificateStore store for dynamic certificates.
 */
export interface CertificateStore {
	DynamicCerts?: any /* safe.Safe */;
	DefaultCertificate?: any /* tls.Certificate */;
	CertCache?: any /* cache.Cache */;
}

//////////
// source: tls.go

/**
 * ClientAuth defines the parameters of the client authentication part of the TLS connection, if any.
 */
export interface ClientAuth {
	caFiles?: any /* types.FileOrContent */[];
	/**
	 * ClientAuthType defines the client authentication type to apply.
	 * The available values are: "NoClientCert", "RequestClientCert", "VerifyClientCertIfGiven" and "RequireAndVerifyClientCert".
	 */
	clientAuthType?: string;
}
/**
 * Options configures TLS for an entry point.
 */
export interface Options {
	minVersion?: string;
	maxVersion?: string;
	cipherSuites?: string[];
	curvePreferences?: string[];
	clientAuth?: ClientAuth;
	sniStrict?: boolean;
	alpnProtocols?: string[];
	disableSessionTickets?: boolean;
	/**
	 * Deprecated: https://github.com/golang/go/issues/45430
	 */
	preferServerCipherSuites?: boolean;
}
/**
 * Store holds the options for a given Store.
 */
export interface Store {
	defaultCertificate?: Certificate;
	defaultGeneratedCert?: GeneratedCert;
}
/**
 * GeneratedCert defines the default generated certificate configuration.
 */
export interface GeneratedCert {
	/**
	 * Resolver is the name of the resolver that will be used to issue the DefaultCertificate.
	 */
	resolver?: string;
	/**
	 * Domain is the domain definition for the DefaultCertificate.
	 */
	domain?: Domain;
}
/**
 * CertAndStores allows mapping a TLS certificate to a list of entry points.
 */
export interface CertAndStores {
	Certificate: Certificate;
	stores?: string[];
}

//////////
// source: tlsmanager.go

/**
 * DefaultTLSConfigName is the name of the default set of options for configuring TLS.
 */
export const DefaultTLSConfigName = 'default';
/**
 * DefaultTLSStoreName is the name of the default store of TLS certificates.
 * Note that it actually is the only usable one for now.
 */
export const DefaultTLSStoreName = 'default';
/**
 * Manager is the TLS option/store/configuration factory.
 */
export interface Manager {}
