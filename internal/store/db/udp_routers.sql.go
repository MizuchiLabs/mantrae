// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: udp_routers.sql

package db

import (
	"context"

	"github.com/mizuchilabs/mantrae/internal/store/schema"
)

const countUdpRouters = `-- name: CountUdpRouters :one
SELECT
  COUNT(*)
FROM
  udp_routers
`

func (q *Queries) CountUdpRouters(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countUdpRoutersStmt, countUdpRouters)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUdpRoutersByAgent = `-- name: CountUdpRoutersByAgent :one
SELECT
  COUNT(*)
FROM
  udp_routers
WHERE
  agent_id = ?
`

func (q *Queries) CountUdpRoutersByAgent(ctx context.Context, agentID *string) (int64, error) {
	row := q.queryRow(ctx, q.countUdpRoutersByAgentStmt, countUdpRoutersByAgent, agentID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUdpRoutersByProfile = `-- name: CountUdpRoutersByProfile :one
SELECT
  COUNT(*)
FROM
  udp_routers
WHERE
  profile_id = ?
`

func (q *Queries) CountUdpRoutersByProfile(ctx context.Context, profileID int64) (int64, error) {
	row := q.queryRow(ctx, q.countUdpRoutersByProfileStmt, countUdpRoutersByProfile, profileID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUdpRouter = `-- name: CreateUdpRouter :one
INSERT INTO
  udp_routers (
    profile_id,
    agent_id,
    name,
    config,
    created_at,
    updated_at
  )
VALUES
  (?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP) RETURNING id, profile_id, agent_id, name, config, enabled, created_at, updated_at
`

type CreateUdpRouterParams struct {
	ProfileID int64             `json:"profileId"`
	AgentID   *string           `json:"agentId"`
	Name      string            `json:"name"`
	Config    *schema.UDPRouter `json:"config"`
}

func (q *Queries) CreateUdpRouter(ctx context.Context, arg CreateUdpRouterParams) (UdpRouter, error) {
	row := q.queryRow(ctx, q.createUdpRouterStmt, createUdpRouter,
		arg.ProfileID,
		arg.AgentID,
		arg.Name,
		arg.Config,
	)
	var i UdpRouter
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.AgentID,
		&i.Name,
		&i.Config,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUdpRouter = `-- name: DeleteUdpRouter :exec
DELETE FROM udp_routers
WHERE
  id = ?
`

func (q *Queries) DeleteUdpRouter(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteUdpRouterStmt, deleteUdpRouter, id)
	return err
}

const getUdpRouter = `-- name: GetUdpRouter :one
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at
FROM
  udp_routers
WHERE
  id = ?
`

func (q *Queries) GetUdpRouter(ctx context.Context, id int64) (UdpRouter, error) {
	row := q.queryRow(ctx, q.getUdpRouterStmt, getUdpRouter, id)
	var i UdpRouter
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.AgentID,
		&i.Name,
		&i.Config,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUdpRouters = `-- name: ListUdpRouters :many
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at
FROM
  udp_routers
WHERE
  profile_id = ?
ORDER BY
  name
LIMIT
  ?
OFFSET
  ?
`

type ListUdpRoutersParams struct {
	ProfileID int64 `json:"profileId"`
	Limit     int64 `json:"limit"`
	Offset    int64 `json:"offset"`
}

func (q *Queries) ListUdpRouters(ctx context.Context, arg ListUdpRoutersParams) ([]UdpRouter, error) {
	rows, err := q.query(ctx, q.listUdpRoutersStmt, listUdpRouters, arg.ProfileID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UdpRouter
	for rows.Next() {
		var i UdpRouter
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.AgentID,
			&i.Name,
			&i.Config,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUdpRoutersByAgent = `-- name: ListUdpRoutersByAgent :many
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at
FROM
  udp_routers
WHERE
  agent_id = ?
ORDER BY
  name
LIMIT
  ?
OFFSET
  ?
`

type ListUdpRoutersByAgentParams struct {
	AgentID *string `json:"agentId"`
	Limit   int64   `json:"limit"`
	Offset  int64   `json:"offset"`
}

func (q *Queries) ListUdpRoutersByAgent(ctx context.Context, arg ListUdpRoutersByAgentParams) ([]UdpRouter, error) {
	rows, err := q.query(ctx, q.listUdpRoutersByAgentStmt, listUdpRoutersByAgent, arg.AgentID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UdpRouter
	for rows.Next() {
		var i UdpRouter
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.AgentID,
			&i.Name,
			&i.Config,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUdpRouter = `-- name: UpdateUdpRouter :one
UPDATE udp_routers
SET
  name = ?,
  config = ?,
  enabled = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE
  id = ? RETURNING id, profile_id, agent_id, name, config, enabled, created_at, updated_at
`

type UpdateUdpRouterParams struct {
	Name    string            `json:"name"`
	Config  *schema.UDPRouter `json:"config"`
	Enabled bool              `json:"enabled"`
	ID      int64             `json:"id"`
}

func (q *Queries) UpdateUdpRouter(ctx context.Context, arg UpdateUdpRouterParams) (UdpRouter, error) {
	row := q.queryRow(ctx, q.updateUdpRouterStmt, updateUdpRouter,
		arg.Name,
		arg.Config,
		arg.Enabled,
		arg.ID,
	)
	var i UdpRouter
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.AgentID,
		&i.Name,
		&i.Config,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
