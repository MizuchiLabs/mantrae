// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: http_servers_transports.sql

package db

import (
	"context"

	"github.com/mizuchilabs/mantrae/internal/store/schema"
)

const countHttpServersTransports = `-- name: CountHttpServersTransports :one
SELECT
  COUNT(*)
FROM
  http_servers_transports
`

func (q *Queries) CountHttpServersTransports(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countHttpServersTransportsStmt, countHttpServersTransports)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countHttpServersTransportsByAgent = `-- name: CountHttpServersTransportsByAgent :one
SELECT
  COUNT(*)
FROM
  http_servers_transports
WHERE
  agent_id = ?
`

func (q *Queries) CountHttpServersTransportsByAgent(ctx context.Context, agentID *string) (int64, error) {
	row := q.queryRow(ctx, q.countHttpServersTransportsByAgentStmt, countHttpServersTransportsByAgent, agentID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countHttpServersTransportsByProfile = `-- name: CountHttpServersTransportsByProfile :one
SELECT
  COUNT(*)
FROM
  http_servers_transports
WHERE
  profile_id = ?
`

func (q *Queries) CountHttpServersTransportsByProfile(ctx context.Context, profileID int64) (int64, error) {
	row := q.queryRow(ctx, q.countHttpServersTransportsByProfileStmt, countHttpServersTransportsByProfile, profileID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createHttpServersTransport = `-- name: CreateHttpServersTransport :one
INSERT INTO
  http_servers_transports (
    profile_id,
    agent_id,
    name,
    config,
    created_at,
    updated_at
  )
VALUES
  (?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP) RETURNING id, profile_id, agent_id, name, config, enabled, created_at, updated_at
`

type CreateHttpServersTransportParams struct {
	ProfileID int64                        `json:"profileId"`
	AgentID   *string                      `json:"agentId"`
	Name      string                       `json:"name"`
	Config    *schema.HTTPServersTransport `json:"config"`
}

func (q *Queries) CreateHttpServersTransport(ctx context.Context, arg CreateHttpServersTransportParams) (HttpServersTransport, error) {
	row := q.queryRow(ctx, q.createHttpServersTransportStmt, createHttpServersTransport,
		arg.ProfileID,
		arg.AgentID,
		arg.Name,
		arg.Config,
	)
	var i HttpServersTransport
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.AgentID,
		&i.Name,
		&i.Config,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteHttpServersTransport = `-- name: DeleteHttpServersTransport :exec
DELETE FROM http_servers_transports
WHERE
  id = ?
`

func (q *Queries) DeleteHttpServersTransport(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteHttpServersTransportStmt, deleteHttpServersTransport, id)
	return err
}

const getHttpServersTransport = `-- name: GetHttpServersTransport :one
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at
FROM
  http_servers_transports
WHERE
  id = ?
`

func (q *Queries) GetHttpServersTransport(ctx context.Context, id int64) (HttpServersTransport, error) {
	row := q.queryRow(ctx, q.getHttpServersTransportStmt, getHttpServersTransport, id)
	var i HttpServersTransport
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.AgentID,
		&i.Name,
		&i.Config,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listHttpServersTransports = `-- name: ListHttpServersTransports :many
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at
FROM
  http_servers_transports
WHERE
  profile_id = ?
ORDER BY
  name
LIMIT
  ?
OFFSET
  ?
`

type ListHttpServersTransportsParams struct {
	ProfileID int64 `json:"profileId"`
	Limit     int64 `json:"limit"`
	Offset    int64 `json:"offset"`
}

func (q *Queries) ListHttpServersTransports(ctx context.Context, arg ListHttpServersTransportsParams) ([]HttpServersTransport, error) {
	rows, err := q.query(ctx, q.listHttpServersTransportsStmt, listHttpServersTransports, arg.ProfileID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HttpServersTransport
	for rows.Next() {
		var i HttpServersTransport
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.AgentID,
			&i.Name,
			&i.Config,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listHttpServersTransportsByAgent = `-- name: ListHttpServersTransportsByAgent :many
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at
FROM
  http_servers_transports
WHERE
  agent_id = ?
ORDER BY
  name
LIMIT
  ?
OFFSET
  ?
`

type ListHttpServersTransportsByAgentParams struct {
	AgentID *string `json:"agentId"`
	Limit   int64   `json:"limit"`
	Offset  int64   `json:"offset"`
}

func (q *Queries) ListHttpServersTransportsByAgent(ctx context.Context, arg ListHttpServersTransportsByAgentParams) ([]HttpServersTransport, error) {
	rows, err := q.query(ctx, q.listHttpServersTransportsByAgentStmt, listHttpServersTransportsByAgent, arg.AgentID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HttpServersTransport
	for rows.Next() {
		var i HttpServersTransport
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.AgentID,
			&i.Name,
			&i.Config,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listHttpServersTransportsEnabled = `-- name: ListHttpServersTransportsEnabled :many
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at
FROM
  http_servers_transports
WHERE
  profile_id = ?
  AND enabled = TRUE
ORDER BY
  name
LIMIT
  ?
OFFSET
  ?
`

type ListHttpServersTransportsEnabledParams struct {
	ProfileID int64 `json:"profileId"`
	Limit     int64 `json:"limit"`
	Offset    int64 `json:"offset"`
}

func (q *Queries) ListHttpServersTransportsEnabled(ctx context.Context, arg ListHttpServersTransportsEnabledParams) ([]HttpServersTransport, error) {
	rows, err := q.query(ctx, q.listHttpServersTransportsEnabledStmt, listHttpServersTransportsEnabled, arg.ProfileID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HttpServersTransport
	for rows.Next() {
		var i HttpServersTransport
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.AgentID,
			&i.Name,
			&i.Config,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHttpServersTransport = `-- name: UpdateHttpServersTransport :one
UPDATE http_servers_transports
SET
  name = ?,
  config = ?,
  enabled = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE
  id = ? RETURNING id, profile_id, agent_id, name, config, enabled, created_at, updated_at
`

type UpdateHttpServersTransportParams struct {
	Name    string                       `json:"name"`
	Config  *schema.HTTPServersTransport `json:"config"`
	Enabled bool                         `json:"enabled"`
	ID      int64                        `json:"id"`
}

func (q *Queries) UpdateHttpServersTransport(ctx context.Context, arg UpdateHttpServersTransportParams) (HttpServersTransport, error) {
	row := q.queryRow(ctx, q.updateHttpServersTransportStmt, updateHttpServersTransport,
		arg.Name,
		arg.Config,
		arg.Enabled,
		arg.ID,
	)
	var i HttpServersTransport
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.AgentID,
		&i.Name,
		&i.Config,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
