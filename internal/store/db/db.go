// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countAgentsStmt, err = db.PrepareContext(ctx, countAgents); err != nil {
		return nil, fmt.Errorf("error preparing query CountAgents: %w", err)
	}
	if q.countAuditLogsStmt, err = db.PrepareContext(ctx, countAuditLogs); err != nil {
		return nil, fmt.Errorf("error preparing query CountAuditLogs: %w", err)
	}
	if q.countDnsProvidersStmt, err = db.PrepareContext(ctx, countDnsProviders); err != nil {
		return nil, fmt.Errorf("error preparing query CountDnsProviders: %w", err)
	}
	if q.countEntryPointsStmt, err = db.PrepareContext(ctx, countEntryPoints); err != nil {
		return nil, fmt.Errorf("error preparing query CountEntryPoints: %w", err)
	}
	if q.countHttpMiddlewaresStmt, err = db.PrepareContext(ctx, countHttpMiddlewares); err != nil {
		return nil, fmt.Errorf("error preparing query CountHttpMiddlewares: %w", err)
	}
	if q.countHttpMiddlewaresByAgentStmt, err = db.PrepareContext(ctx, countHttpMiddlewaresByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query CountHttpMiddlewaresByAgent: %w", err)
	}
	if q.countHttpMiddlewaresByProfileStmt, err = db.PrepareContext(ctx, countHttpMiddlewaresByProfile); err != nil {
		return nil, fmt.Errorf("error preparing query CountHttpMiddlewaresByProfile: %w", err)
	}
	if q.countHttpRoutersStmt, err = db.PrepareContext(ctx, countHttpRouters); err != nil {
		return nil, fmt.Errorf("error preparing query CountHttpRouters: %w", err)
	}
	if q.countHttpRoutersByAgentStmt, err = db.PrepareContext(ctx, countHttpRoutersByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query CountHttpRoutersByAgent: %w", err)
	}
	if q.countHttpRoutersByProfileStmt, err = db.PrepareContext(ctx, countHttpRoutersByProfile); err != nil {
		return nil, fmt.Errorf("error preparing query CountHttpRoutersByProfile: %w", err)
	}
	if q.countHttpServersTransportsStmt, err = db.PrepareContext(ctx, countHttpServersTransports); err != nil {
		return nil, fmt.Errorf("error preparing query CountHttpServersTransports: %w", err)
	}
	if q.countHttpServersTransportsByAgentStmt, err = db.PrepareContext(ctx, countHttpServersTransportsByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query CountHttpServersTransportsByAgent: %w", err)
	}
	if q.countHttpServersTransportsByProfileStmt, err = db.PrepareContext(ctx, countHttpServersTransportsByProfile); err != nil {
		return nil, fmt.Errorf("error preparing query CountHttpServersTransportsByProfile: %w", err)
	}
	if q.countHttpServicesStmt, err = db.PrepareContext(ctx, countHttpServices); err != nil {
		return nil, fmt.Errorf("error preparing query CountHttpServices: %w", err)
	}
	if q.countHttpServicesByAgentStmt, err = db.PrepareContext(ctx, countHttpServicesByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query CountHttpServicesByAgent: %w", err)
	}
	if q.countHttpServicesByProfileStmt, err = db.PrepareContext(ctx, countHttpServicesByProfile); err != nil {
		return nil, fmt.Errorf("error preparing query CountHttpServicesByProfile: %w", err)
	}
	if q.countMiddlewaresByAgentStmt, err = db.PrepareContext(ctx, countMiddlewaresByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query CountMiddlewaresByAgent: %w", err)
	}
	if q.countMiddlewaresByProfileStmt, err = db.PrepareContext(ctx, countMiddlewaresByProfile); err != nil {
		return nil, fmt.Errorf("error preparing query CountMiddlewaresByProfile: %w", err)
	}
	if q.countProfilesStmt, err = db.PrepareContext(ctx, countProfiles); err != nil {
		return nil, fmt.Errorf("error preparing query CountProfiles: %w", err)
	}
	if q.countRoutersByAgentStmt, err = db.PrepareContext(ctx, countRoutersByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query CountRoutersByAgent: %w", err)
	}
	if q.countRoutersByProfileStmt, err = db.PrepareContext(ctx, countRoutersByProfile); err != nil {
		return nil, fmt.Errorf("error preparing query CountRoutersByProfile: %w", err)
	}
	if q.countServersTransportsByAgentStmt, err = db.PrepareContext(ctx, countServersTransportsByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query CountServersTransportsByAgent: %w", err)
	}
	if q.countServersTransportsByProfileStmt, err = db.PrepareContext(ctx, countServersTransportsByProfile); err != nil {
		return nil, fmt.Errorf("error preparing query CountServersTransportsByProfile: %w", err)
	}
	if q.countServicesByAgentStmt, err = db.PrepareContext(ctx, countServicesByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query CountServicesByAgent: %w", err)
	}
	if q.countServicesByProfileStmt, err = db.PrepareContext(ctx, countServicesByProfile); err != nil {
		return nil, fmt.Errorf("error preparing query CountServicesByProfile: %w", err)
	}
	if q.countTcpMiddlewaresStmt, err = db.PrepareContext(ctx, countTcpMiddlewares); err != nil {
		return nil, fmt.Errorf("error preparing query CountTcpMiddlewares: %w", err)
	}
	if q.countTcpMiddlewaresByAgentStmt, err = db.PrepareContext(ctx, countTcpMiddlewaresByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query CountTcpMiddlewaresByAgent: %w", err)
	}
	if q.countTcpMiddlewaresByProfileStmt, err = db.PrepareContext(ctx, countTcpMiddlewaresByProfile); err != nil {
		return nil, fmt.Errorf("error preparing query CountTcpMiddlewaresByProfile: %w", err)
	}
	if q.countTcpRoutersStmt, err = db.PrepareContext(ctx, countTcpRouters); err != nil {
		return nil, fmt.Errorf("error preparing query CountTcpRouters: %w", err)
	}
	if q.countTcpRoutersByAgentStmt, err = db.PrepareContext(ctx, countTcpRoutersByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query CountTcpRoutersByAgent: %w", err)
	}
	if q.countTcpRoutersByProfileStmt, err = db.PrepareContext(ctx, countTcpRoutersByProfile); err != nil {
		return nil, fmt.Errorf("error preparing query CountTcpRoutersByProfile: %w", err)
	}
	if q.countTcpServersTransportsStmt, err = db.PrepareContext(ctx, countTcpServersTransports); err != nil {
		return nil, fmt.Errorf("error preparing query CountTcpServersTransports: %w", err)
	}
	if q.countTcpServersTransportsByAgentStmt, err = db.PrepareContext(ctx, countTcpServersTransportsByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query CountTcpServersTransportsByAgent: %w", err)
	}
	if q.countTcpServersTransportsByProfileStmt, err = db.PrepareContext(ctx, countTcpServersTransportsByProfile); err != nil {
		return nil, fmt.Errorf("error preparing query CountTcpServersTransportsByProfile: %w", err)
	}
	if q.countTcpServicesStmt, err = db.PrepareContext(ctx, countTcpServices); err != nil {
		return nil, fmt.Errorf("error preparing query CountTcpServices: %w", err)
	}
	if q.countTcpServicesByAgentStmt, err = db.PrepareContext(ctx, countTcpServicesByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query CountTcpServicesByAgent: %w", err)
	}
	if q.countTcpServicesByProfileStmt, err = db.PrepareContext(ctx, countTcpServicesByProfile); err != nil {
		return nil, fmt.Errorf("error preparing query CountTcpServicesByProfile: %w", err)
	}
	if q.countTraefikInstancesStmt, err = db.PrepareContext(ctx, countTraefikInstances); err != nil {
		return nil, fmt.Errorf("error preparing query CountTraefikInstances: %w", err)
	}
	if q.countUdpRoutersStmt, err = db.PrepareContext(ctx, countUdpRouters); err != nil {
		return nil, fmt.Errorf("error preparing query CountUdpRouters: %w", err)
	}
	if q.countUdpRoutersByAgentStmt, err = db.PrepareContext(ctx, countUdpRoutersByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query CountUdpRoutersByAgent: %w", err)
	}
	if q.countUdpRoutersByProfileStmt, err = db.PrepareContext(ctx, countUdpRoutersByProfile); err != nil {
		return nil, fmt.Errorf("error preparing query CountUdpRoutersByProfile: %w", err)
	}
	if q.countUdpServicesStmt, err = db.PrepareContext(ctx, countUdpServices); err != nil {
		return nil, fmt.Errorf("error preparing query CountUdpServices: %w", err)
	}
	if q.countUdpServicesByAgentStmt, err = db.PrepareContext(ctx, countUdpServicesByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query CountUdpServicesByAgent: %w", err)
	}
	if q.countUdpServicesByProfileStmt, err = db.PrepareContext(ctx, countUdpServicesByProfile); err != nil {
		return nil, fmt.Errorf("error preparing query CountUdpServicesByProfile: %w", err)
	}
	if q.countUsersStmt, err = db.PrepareContext(ctx, countUsers); err != nil {
		return nil, fmt.Errorf("error preparing query CountUsers: %w", err)
	}
	if q.createAgentStmt, err = db.PrepareContext(ctx, createAgent); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAgent: %w", err)
	}
	if q.createAuditLogStmt, err = db.PrepareContext(ctx, createAuditLog); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAuditLog: %w", err)
	}
	if q.createDnsProviderStmt, err = db.PrepareContext(ctx, createDnsProvider); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDnsProvider: %w", err)
	}
	if q.createEntryPointStmt, err = db.PrepareContext(ctx, createEntryPoint); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEntryPoint: %w", err)
	}
	if q.createHttpMiddlewareStmt, err = db.PrepareContext(ctx, createHttpMiddleware); err != nil {
		return nil, fmt.Errorf("error preparing query CreateHttpMiddleware: %w", err)
	}
	if q.createHttpRouterStmt, err = db.PrepareContext(ctx, createHttpRouter); err != nil {
		return nil, fmt.Errorf("error preparing query CreateHttpRouter: %w", err)
	}
	if q.createHttpRouterDNSProviderStmt, err = db.PrepareContext(ctx, createHttpRouterDNSProvider); err != nil {
		return nil, fmt.Errorf("error preparing query CreateHttpRouterDNSProvider: %w", err)
	}
	if q.createHttpServersTransportStmt, err = db.PrepareContext(ctx, createHttpServersTransport); err != nil {
		return nil, fmt.Errorf("error preparing query CreateHttpServersTransport: %w", err)
	}
	if q.createHttpServiceStmt, err = db.PrepareContext(ctx, createHttpService); err != nil {
		return nil, fmt.Errorf("error preparing query CreateHttpService: %w", err)
	}
	if q.createProfileStmt, err = db.PrepareContext(ctx, createProfile); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProfile: %w", err)
	}
	if q.createTcpMiddlewareStmt, err = db.PrepareContext(ctx, createTcpMiddleware); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTcpMiddleware: %w", err)
	}
	if q.createTcpRouterStmt, err = db.PrepareContext(ctx, createTcpRouter); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTcpRouter: %w", err)
	}
	if q.createTcpRouterDNSProviderStmt, err = db.PrepareContext(ctx, createTcpRouterDNSProvider); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTcpRouterDNSProvider: %w", err)
	}
	if q.createTcpServersTransportStmt, err = db.PrepareContext(ctx, createTcpServersTransport); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTcpServersTransport: %w", err)
	}
	if q.createTcpServiceStmt, err = db.PrepareContext(ctx, createTcpService); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTcpService: %w", err)
	}
	if q.createUdpRouterStmt, err = db.PrepareContext(ctx, createUdpRouter); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUdpRouter: %w", err)
	}
	if q.createUdpServiceStmt, err = db.PrepareContext(ctx, createUdpService); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUdpService: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteAgentStmt, err = db.PrepareContext(ctx, deleteAgent); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAgent: %w", err)
	}
	if q.deleteDnsProviderStmt, err = db.PrepareContext(ctx, deleteDnsProvider); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteDnsProvider: %w", err)
	}
	if q.deleteEntryPointByIDStmt, err = db.PrepareContext(ctx, deleteEntryPointByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEntryPointByID: %w", err)
	}
	if q.deleteErrorByIdStmt, err = db.PrepareContext(ctx, deleteErrorById); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteErrorById: %w", err)
	}
	if q.deleteErrorsByProfileStmt, err = db.PrepareContext(ctx, deleteErrorsByProfile); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteErrorsByProfile: %w", err)
	}
	if q.deleteErrorsByProfileCategoryStmt, err = db.PrepareContext(ctx, deleteErrorsByProfileCategory); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteErrorsByProfileCategory: %w", err)
	}
	if q.deleteHttpMiddlewareStmt, err = db.PrepareContext(ctx, deleteHttpMiddleware); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteHttpMiddleware: %w", err)
	}
	if q.deleteHttpRouterStmt, err = db.PrepareContext(ctx, deleteHttpRouter); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteHttpRouter: %w", err)
	}
	if q.deleteHttpRouterDNSProviderStmt, err = db.PrepareContext(ctx, deleteHttpRouterDNSProvider); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteHttpRouterDNSProvider: %w", err)
	}
	if q.deleteHttpServersTransportStmt, err = db.PrepareContext(ctx, deleteHttpServersTransport); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteHttpServersTransport: %w", err)
	}
	if q.deleteHttpServiceStmt, err = db.PrepareContext(ctx, deleteHttpService); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteHttpService: %w", err)
	}
	if q.deleteOldAuditLogsStmt, err = db.PrepareContext(ctx, deleteOldAuditLogs); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteOldAuditLogs: %w", err)
	}
	if q.deleteProfileStmt, err = db.PrepareContext(ctx, deleteProfile); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProfile: %w", err)
	}
	if q.deleteSettingStmt, err = db.PrepareContext(ctx, deleteSetting); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSetting: %w", err)
	}
	if q.deleteTcpMiddlewareStmt, err = db.PrepareContext(ctx, deleteTcpMiddleware); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTcpMiddleware: %w", err)
	}
	if q.deleteTcpRouterStmt, err = db.PrepareContext(ctx, deleteTcpRouter); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTcpRouter: %w", err)
	}
	if q.deleteTcpRouterDNSProviderStmt, err = db.PrepareContext(ctx, deleteTcpRouterDNSProvider); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTcpRouterDNSProvider: %w", err)
	}
	if q.deleteTcpServersTransportStmt, err = db.PrepareContext(ctx, deleteTcpServersTransport); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTcpServersTransport: %w", err)
	}
	if q.deleteTcpServiceStmt, err = db.PrepareContext(ctx, deleteTcpService); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTcpService: %w", err)
	}
	if q.deleteTraefikInstanceByIDStmt, err = db.PrepareContext(ctx, deleteTraefikInstanceByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTraefikInstanceByID: %w", err)
	}
	if q.deleteUdpRouterStmt, err = db.PrepareContext(ctx, deleteUdpRouter); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUdpRouter: %w", err)
	}
	if q.deleteUdpServiceStmt, err = db.PrepareContext(ctx, deleteUdpService); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUdpService: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getAgentStmt, err = db.PrepareContext(ctx, getAgent); err != nil {
		return nil, fmt.Errorf("error preparing query GetAgent: %w", err)
	}
	if q.getDefaultDNSProviderStmt, err = db.PrepareContext(ctx, getDefaultDNSProvider); err != nil {
		return nil, fmt.Errorf("error preparing query GetDefaultDNSProvider: %w", err)
	}
	if q.getDefaultEntryPointStmt, err = db.PrepareContext(ctx, getDefaultEntryPoint); err != nil {
		return nil, fmt.Errorf("error preparing query GetDefaultEntryPoint: %w", err)
	}
	if q.getDnsProviderStmt, err = db.PrepareContext(ctx, getDnsProvider); err != nil {
		return nil, fmt.Errorf("error preparing query GetDnsProvider: %w", err)
	}
	if q.getDnsProviderByNameStmt, err = db.PrepareContext(ctx, getDnsProviderByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetDnsProviderByName: %w", err)
	}
	if q.getDnsProvidersByHttpRouterStmt, err = db.PrepareContext(ctx, getDnsProvidersByHttpRouter); err != nil {
		return nil, fmt.Errorf("error preparing query GetDnsProvidersByHttpRouter: %w", err)
	}
	if q.getDnsProvidersByTcpRouterStmt, err = db.PrepareContext(ctx, getDnsProvidersByTcpRouter); err != nil {
		return nil, fmt.Errorf("error preparing query GetDnsProvidersByTcpRouter: %w", err)
	}
	if q.getEntryPointStmt, err = db.PrepareContext(ctx, getEntryPoint); err != nil {
		return nil, fmt.Errorf("error preparing query GetEntryPoint: %w", err)
	}
	if q.getErrorsByProfileStmt, err = db.PrepareContext(ctx, getErrorsByProfile); err != nil {
		return nil, fmt.Errorf("error preparing query GetErrorsByProfile: %w", err)
	}
	if q.getHttpMiddlewareStmt, err = db.PrepareContext(ctx, getHttpMiddleware); err != nil {
		return nil, fmt.Errorf("error preparing query GetHttpMiddleware: %w", err)
	}
	if q.getHttpRouterStmt, err = db.PrepareContext(ctx, getHttpRouter); err != nil {
		return nil, fmt.Errorf("error preparing query GetHttpRouter: %w", err)
	}
	if q.getHttpRouterDomainsStmt, err = db.PrepareContext(ctx, getHttpRouterDomains); err != nil {
		return nil, fmt.Errorf("error preparing query GetHttpRouterDomains: %w", err)
	}
	if q.getHttpRoutersUsingEntryPointStmt, err = db.PrepareContext(ctx, getHttpRoutersUsingEntryPoint); err != nil {
		return nil, fmt.Errorf("error preparing query GetHttpRoutersUsingEntryPoint: %w", err)
	}
	if q.getHttpRoutersUsingMiddlewareStmt, err = db.PrepareContext(ctx, getHttpRoutersUsingMiddleware); err != nil {
		return nil, fmt.Errorf("error preparing query GetHttpRoutersUsingMiddleware: %w", err)
	}
	if q.getHttpServersTransportStmt, err = db.PrepareContext(ctx, getHttpServersTransport); err != nil {
		return nil, fmt.Errorf("error preparing query GetHttpServersTransport: %w", err)
	}
	if q.getHttpServiceStmt, err = db.PrepareContext(ctx, getHttpService); err != nil {
		return nil, fmt.Errorf("error preparing query GetHttpService: %w", err)
	}
	if q.getHttpServiceByNameStmt, err = db.PrepareContext(ctx, getHttpServiceByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetHttpServiceByName: %w", err)
	}
	if q.getProfileStmt, err = db.PrepareContext(ctx, getProfile); err != nil {
		return nil, fmt.Errorf("error preparing query GetProfile: %w", err)
	}
	if q.getProfileByNameStmt, err = db.PrepareContext(ctx, getProfileByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetProfileByName: %w", err)
	}
	if q.getSettingStmt, err = db.PrepareContext(ctx, getSetting); err != nil {
		return nil, fmt.Errorf("error preparing query GetSetting: %w", err)
	}
	if q.getTcpMiddlewareStmt, err = db.PrepareContext(ctx, getTcpMiddleware); err != nil {
		return nil, fmt.Errorf("error preparing query GetTcpMiddleware: %w", err)
	}
	if q.getTcpRouterStmt, err = db.PrepareContext(ctx, getTcpRouter); err != nil {
		return nil, fmt.Errorf("error preparing query GetTcpRouter: %w", err)
	}
	if q.getTcpRouterDomainsStmt, err = db.PrepareContext(ctx, getTcpRouterDomains); err != nil {
		return nil, fmt.Errorf("error preparing query GetTcpRouterDomains: %w", err)
	}
	if q.getTcpRoutersUsingEntryPointStmt, err = db.PrepareContext(ctx, getTcpRoutersUsingEntryPoint); err != nil {
		return nil, fmt.Errorf("error preparing query GetTcpRoutersUsingEntryPoint: %w", err)
	}
	if q.getTcpRoutersUsingMiddlewareStmt, err = db.PrepareContext(ctx, getTcpRoutersUsingMiddleware); err != nil {
		return nil, fmt.Errorf("error preparing query GetTcpRoutersUsingMiddleware: %w", err)
	}
	if q.getTcpServersTransportStmt, err = db.PrepareContext(ctx, getTcpServersTransport); err != nil {
		return nil, fmt.Errorf("error preparing query GetTcpServersTransport: %w", err)
	}
	if q.getTcpServiceStmt, err = db.PrepareContext(ctx, getTcpService); err != nil {
		return nil, fmt.Errorf("error preparing query GetTcpService: %w", err)
	}
	if q.getTcpServiceByNameStmt, err = db.PrepareContext(ctx, getTcpServiceByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetTcpServiceByName: %w", err)
	}
	if q.getTraefikInstanceByIDStmt, err = db.PrepareContext(ctx, getTraefikInstanceByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTraefikInstanceByID: %w", err)
	}
	if q.getTraefikInstanceByNameStmt, err = db.PrepareContext(ctx, getTraefikInstanceByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetTraefikInstanceByName: %w", err)
	}
	if q.getUdpRouterStmt, err = db.PrepareContext(ctx, getUdpRouter); err != nil {
		return nil, fmt.Errorf("error preparing query GetUdpRouter: %w", err)
	}
	if q.getUdpRoutersUsingEntryPointStmt, err = db.PrepareContext(ctx, getUdpRoutersUsingEntryPoint); err != nil {
		return nil, fmt.Errorf("error preparing query GetUdpRoutersUsingEntryPoint: %w", err)
	}
	if q.getUdpServiceStmt, err = db.PrepareContext(ctx, getUdpService); err != nil {
		return nil, fmt.Errorf("error preparing query GetUdpService: %w", err)
	}
	if q.getUdpServiceByNameStmt, err = db.PrepareContext(ctx, getUdpServiceByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetUdpServiceByName: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, getUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	if q.listAdminUsersStmt, err = db.PrepareContext(ctx, listAdminUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListAdminUsers: %w", err)
	}
	if q.listAgentsStmt, err = db.PrepareContext(ctx, listAgents); err != nil {
		return nil, fmt.Errorf("error preparing query ListAgents: %w", err)
	}
	if q.listAuditLogsStmt, err = db.PrepareContext(ctx, listAuditLogs); err != nil {
		return nil, fmt.Errorf("error preparing query ListAuditLogs: %w", err)
	}
	if q.listDnsProvidersStmt, err = db.PrepareContext(ctx, listDnsProviders); err != nil {
		return nil, fmt.Errorf("error preparing query ListDnsProviders: %w", err)
	}
	if q.listEntryPointsStmt, err = db.PrepareContext(ctx, listEntryPoints); err != nil {
		return nil, fmt.Errorf("error preparing query ListEntryPoints: %w", err)
	}
	if q.listErrorsStmt, err = db.PrepareContext(ctx, listErrors); err != nil {
		return nil, fmt.Errorf("error preparing query ListErrors: %w", err)
	}
	if q.listHttpMiddlewaresStmt, err = db.PrepareContext(ctx, listHttpMiddlewares); err != nil {
		return nil, fmt.Errorf("error preparing query ListHttpMiddlewares: %w", err)
	}
	if q.listHttpMiddlewaresByAgentStmt, err = db.PrepareContext(ctx, listHttpMiddlewaresByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query ListHttpMiddlewaresByAgent: %w", err)
	}
	if q.listHttpMiddlewaresEnabledStmt, err = db.PrepareContext(ctx, listHttpMiddlewaresEnabled); err != nil {
		return nil, fmt.Errorf("error preparing query ListHttpMiddlewaresEnabled: %w", err)
	}
	if q.listHttpRoutersStmt, err = db.PrepareContext(ctx, listHttpRouters); err != nil {
		return nil, fmt.Errorf("error preparing query ListHttpRouters: %w", err)
	}
	if q.listHttpRoutersByAgentStmt, err = db.PrepareContext(ctx, listHttpRoutersByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query ListHttpRoutersByAgent: %w", err)
	}
	if q.listHttpRoutersEnabledStmt, err = db.PrepareContext(ctx, listHttpRoutersEnabled); err != nil {
		return nil, fmt.Errorf("error preparing query ListHttpRoutersEnabled: %w", err)
	}
	if q.listHttpServersTransportsStmt, err = db.PrepareContext(ctx, listHttpServersTransports); err != nil {
		return nil, fmt.Errorf("error preparing query ListHttpServersTransports: %w", err)
	}
	if q.listHttpServersTransportsByAgentStmt, err = db.PrepareContext(ctx, listHttpServersTransportsByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query ListHttpServersTransportsByAgent: %w", err)
	}
	if q.listHttpServersTransportsEnabledStmt, err = db.PrepareContext(ctx, listHttpServersTransportsEnabled); err != nil {
		return nil, fmt.Errorf("error preparing query ListHttpServersTransportsEnabled: %w", err)
	}
	if q.listHttpServicesStmt, err = db.PrepareContext(ctx, listHttpServices); err != nil {
		return nil, fmt.Errorf("error preparing query ListHttpServices: %w", err)
	}
	if q.listHttpServicesByAgentStmt, err = db.PrepareContext(ctx, listHttpServicesByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query ListHttpServicesByAgent: %w", err)
	}
	if q.listHttpServicesEnabledStmt, err = db.PrepareContext(ctx, listHttpServicesEnabled); err != nil {
		return nil, fmt.Errorf("error preparing query ListHttpServicesEnabled: %w", err)
	}
	if q.listMiddlewaresByAgentStmt, err = db.PrepareContext(ctx, listMiddlewaresByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query ListMiddlewaresByAgent: %w", err)
	}
	if q.listMiddlewaresByProfileStmt, err = db.PrepareContext(ctx, listMiddlewaresByProfile); err != nil {
		return nil, fmt.Errorf("error preparing query ListMiddlewaresByProfile: %w", err)
	}
	if q.listProfilesStmt, err = db.PrepareContext(ctx, listProfiles); err != nil {
		return nil, fmt.Errorf("error preparing query ListProfiles: %w", err)
	}
	if q.listRoutersByAgentStmt, err = db.PrepareContext(ctx, listRoutersByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query ListRoutersByAgent: %w", err)
	}
	if q.listRoutersByProfileStmt, err = db.PrepareContext(ctx, listRoutersByProfile); err != nil {
		return nil, fmt.Errorf("error preparing query ListRoutersByProfile: %w", err)
	}
	if q.listServersTransportsByAgentStmt, err = db.PrepareContext(ctx, listServersTransportsByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query ListServersTransportsByAgent: %w", err)
	}
	if q.listServersTransportsByProfileStmt, err = db.PrepareContext(ctx, listServersTransportsByProfile); err != nil {
		return nil, fmt.Errorf("error preparing query ListServersTransportsByProfile: %w", err)
	}
	if q.listServicesByAgentStmt, err = db.PrepareContext(ctx, listServicesByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query ListServicesByAgent: %w", err)
	}
	if q.listServicesByProfileStmt, err = db.PrepareContext(ctx, listServicesByProfile); err != nil {
		return nil, fmt.Errorf("error preparing query ListServicesByProfile: %w", err)
	}
	if q.listSettingsStmt, err = db.PrepareContext(ctx, listSettings); err != nil {
		return nil, fmt.Errorf("error preparing query ListSettings: %w", err)
	}
	if q.listTcpMiddlewaresStmt, err = db.PrepareContext(ctx, listTcpMiddlewares); err != nil {
		return nil, fmt.Errorf("error preparing query ListTcpMiddlewares: %w", err)
	}
	if q.listTcpMiddlewaresByAgentStmt, err = db.PrepareContext(ctx, listTcpMiddlewaresByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query ListTcpMiddlewaresByAgent: %w", err)
	}
	if q.listTcpMiddlewaresEnabledStmt, err = db.PrepareContext(ctx, listTcpMiddlewaresEnabled); err != nil {
		return nil, fmt.Errorf("error preparing query ListTcpMiddlewaresEnabled: %w", err)
	}
	if q.listTcpRoutersStmt, err = db.PrepareContext(ctx, listTcpRouters); err != nil {
		return nil, fmt.Errorf("error preparing query ListTcpRouters: %w", err)
	}
	if q.listTcpRoutersByAgentStmt, err = db.PrepareContext(ctx, listTcpRoutersByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query ListTcpRoutersByAgent: %w", err)
	}
	if q.listTcpRoutersEnabledStmt, err = db.PrepareContext(ctx, listTcpRoutersEnabled); err != nil {
		return nil, fmt.Errorf("error preparing query ListTcpRoutersEnabled: %w", err)
	}
	if q.listTcpServersTransportsStmt, err = db.PrepareContext(ctx, listTcpServersTransports); err != nil {
		return nil, fmt.Errorf("error preparing query ListTcpServersTransports: %w", err)
	}
	if q.listTcpServersTransportsByAgentStmt, err = db.PrepareContext(ctx, listTcpServersTransportsByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query ListTcpServersTransportsByAgent: %w", err)
	}
	if q.listTcpServersTransportsEnabledStmt, err = db.PrepareContext(ctx, listTcpServersTransportsEnabled); err != nil {
		return nil, fmt.Errorf("error preparing query ListTcpServersTransportsEnabled: %w", err)
	}
	if q.listTcpServicesStmt, err = db.PrepareContext(ctx, listTcpServices); err != nil {
		return nil, fmt.Errorf("error preparing query ListTcpServices: %w", err)
	}
	if q.listTcpServicesByAgentStmt, err = db.PrepareContext(ctx, listTcpServicesByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query ListTcpServicesByAgent: %w", err)
	}
	if q.listTcpServicesEnabledStmt, err = db.PrepareContext(ctx, listTcpServicesEnabled); err != nil {
		return nil, fmt.Errorf("error preparing query ListTcpServicesEnabled: %w", err)
	}
	if q.listTraefikInstancesStmt, err = db.PrepareContext(ctx, listTraefikInstances); err != nil {
		return nil, fmt.Errorf("error preparing query ListTraefikInstances: %w", err)
	}
	if q.listUdpRoutersStmt, err = db.PrepareContext(ctx, listUdpRouters); err != nil {
		return nil, fmt.Errorf("error preparing query ListUdpRouters: %w", err)
	}
	if q.listUdpRoutersByAgentStmt, err = db.PrepareContext(ctx, listUdpRoutersByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query ListUdpRoutersByAgent: %w", err)
	}
	if q.listUdpRoutersEnabledStmt, err = db.PrepareContext(ctx, listUdpRoutersEnabled); err != nil {
		return nil, fmt.Errorf("error preparing query ListUdpRoutersEnabled: %w", err)
	}
	if q.listUdpServicesStmt, err = db.PrepareContext(ctx, listUdpServices); err != nil {
		return nil, fmt.Errorf("error preparing query ListUdpServices: %w", err)
	}
	if q.listUdpServicesByAgentStmt, err = db.PrepareContext(ctx, listUdpServicesByAgent); err != nil {
		return nil, fmt.Errorf("error preparing query ListUdpServicesByAgent: %w", err)
	}
	if q.listUdpServicesEnabledStmt, err = db.PrepareContext(ctx, listUdpServicesEnabled); err != nil {
		return nil, fmt.Errorf("error preparing query ListUdpServicesEnabled: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.logErrorStmt, err = db.PrepareContext(ctx, logError); err != nil {
		return nil, fmt.Errorf("error preparing query LogError: %w", err)
	}
	if q.purgeTraefikInstancesStmt, err = db.PrepareContext(ctx, purgeTraefikInstances); err != nil {
		return nil, fmt.Errorf("error preparing query PurgeTraefikInstances: %w", err)
	}
	if q.unsetDefaultDNSProviderStmt, err = db.PrepareContext(ctx, unsetDefaultDNSProvider); err != nil {
		return nil, fmt.Errorf("error preparing query UnsetDefaultDNSProvider: %w", err)
	}
	if q.unsetDefaultEntryPointStmt, err = db.PrepareContext(ctx, unsetDefaultEntryPoint); err != nil {
		return nil, fmt.Errorf("error preparing query UnsetDefaultEntryPoint: %w", err)
	}
	if q.unsetDefaultHttpMiddlewareStmt, err = db.PrepareContext(ctx, unsetDefaultHttpMiddleware); err != nil {
		return nil, fmt.Errorf("error preparing query UnsetDefaultHttpMiddleware: %w", err)
	}
	if q.unsetDefaultTcpMiddlewareStmt, err = db.PrepareContext(ctx, unsetDefaultTcpMiddleware); err != nil {
		return nil, fmt.Errorf("error preparing query UnsetDefaultTcpMiddleware: %w", err)
	}
	if q.updateAgentStmt, err = db.PrepareContext(ctx, updateAgent); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAgent: %w", err)
	}
	if q.updateAgentIPStmt, err = db.PrepareContext(ctx, updateAgentIP); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAgentIP: %w", err)
	}
	if q.updateAgentTokenStmt, err = db.PrepareContext(ctx, updateAgentToken); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAgentToken: %w", err)
	}
	if q.updateDnsProviderStmt, err = db.PrepareContext(ctx, updateDnsProvider); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateDnsProvider: %w", err)
	}
	if q.updateEntryPointStmt, err = db.PrepareContext(ctx, updateEntryPoint); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEntryPoint: %w", err)
	}
	if q.updateHttpMiddlewareStmt, err = db.PrepareContext(ctx, updateHttpMiddleware); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateHttpMiddleware: %w", err)
	}
	if q.updateHttpRouterStmt, err = db.PrepareContext(ctx, updateHttpRouter); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateHttpRouter: %w", err)
	}
	if q.updateHttpServersTransportStmt, err = db.PrepareContext(ctx, updateHttpServersTransport); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateHttpServersTransport: %w", err)
	}
	if q.updateHttpServiceStmt, err = db.PrepareContext(ctx, updateHttpService); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateHttpService: %w", err)
	}
	if q.updateProfileStmt, err = db.PrepareContext(ctx, updateProfile); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProfile: %w", err)
	}
	if q.updateTcpMiddlewareStmt, err = db.PrepareContext(ctx, updateTcpMiddleware); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTcpMiddleware: %w", err)
	}
	if q.updateTcpRouterStmt, err = db.PrepareContext(ctx, updateTcpRouter); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTcpRouter: %w", err)
	}
	if q.updateTcpServersTransportStmt, err = db.PrepareContext(ctx, updateTcpServersTransport); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTcpServersTransport: %w", err)
	}
	if q.updateTcpServiceStmt, err = db.PrepareContext(ctx, updateTcpService); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTcpService: %w", err)
	}
	if q.updateUdpRouterStmt, err = db.PrepareContext(ctx, updateUdpRouter); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUdpRouter: %w", err)
	}
	if q.updateUdpServiceStmt, err = db.PrepareContext(ctx, updateUdpService); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUdpService: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.updateUserLastLoginStmt, err = db.PrepareContext(ctx, updateUserLastLogin); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserLastLogin: %w", err)
	}
	if q.updateUserPasswordStmt, err = db.PrepareContext(ctx, updateUserPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPassword: %w", err)
	}
	if q.updateUserResetTokenStmt, err = db.PrepareContext(ctx, updateUserResetToken); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserResetToken: %w", err)
	}
	if q.upsertSettingStmt, err = db.PrepareContext(ctx, upsertSetting); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertSetting: %w", err)
	}
	if q.upsertTraefikInstanceStmt, err = db.PrepareContext(ctx, upsertTraefikInstance); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertTraefikInstance: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countAgentsStmt != nil {
		if cerr := q.countAgentsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countAgentsStmt: %w", cerr)
		}
	}
	if q.countAuditLogsStmt != nil {
		if cerr := q.countAuditLogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countAuditLogsStmt: %w", cerr)
		}
	}
	if q.countDnsProvidersStmt != nil {
		if cerr := q.countDnsProvidersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countDnsProvidersStmt: %w", cerr)
		}
	}
	if q.countEntryPointsStmt != nil {
		if cerr := q.countEntryPointsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countEntryPointsStmt: %w", cerr)
		}
	}
	if q.countHttpMiddlewaresStmt != nil {
		if cerr := q.countHttpMiddlewaresStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countHttpMiddlewaresStmt: %w", cerr)
		}
	}
	if q.countHttpMiddlewaresByAgentStmt != nil {
		if cerr := q.countHttpMiddlewaresByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countHttpMiddlewaresByAgentStmt: %w", cerr)
		}
	}
	if q.countHttpMiddlewaresByProfileStmt != nil {
		if cerr := q.countHttpMiddlewaresByProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countHttpMiddlewaresByProfileStmt: %w", cerr)
		}
	}
	if q.countHttpRoutersStmt != nil {
		if cerr := q.countHttpRoutersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countHttpRoutersStmt: %w", cerr)
		}
	}
	if q.countHttpRoutersByAgentStmt != nil {
		if cerr := q.countHttpRoutersByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countHttpRoutersByAgentStmt: %w", cerr)
		}
	}
	if q.countHttpRoutersByProfileStmt != nil {
		if cerr := q.countHttpRoutersByProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countHttpRoutersByProfileStmt: %w", cerr)
		}
	}
	if q.countHttpServersTransportsStmt != nil {
		if cerr := q.countHttpServersTransportsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countHttpServersTransportsStmt: %w", cerr)
		}
	}
	if q.countHttpServersTransportsByAgentStmt != nil {
		if cerr := q.countHttpServersTransportsByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countHttpServersTransportsByAgentStmt: %w", cerr)
		}
	}
	if q.countHttpServersTransportsByProfileStmt != nil {
		if cerr := q.countHttpServersTransportsByProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countHttpServersTransportsByProfileStmt: %w", cerr)
		}
	}
	if q.countHttpServicesStmt != nil {
		if cerr := q.countHttpServicesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countHttpServicesStmt: %w", cerr)
		}
	}
	if q.countHttpServicesByAgentStmt != nil {
		if cerr := q.countHttpServicesByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countHttpServicesByAgentStmt: %w", cerr)
		}
	}
	if q.countHttpServicesByProfileStmt != nil {
		if cerr := q.countHttpServicesByProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countHttpServicesByProfileStmt: %w", cerr)
		}
	}
	if q.countMiddlewaresByAgentStmt != nil {
		if cerr := q.countMiddlewaresByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countMiddlewaresByAgentStmt: %w", cerr)
		}
	}
	if q.countMiddlewaresByProfileStmt != nil {
		if cerr := q.countMiddlewaresByProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countMiddlewaresByProfileStmt: %w", cerr)
		}
	}
	if q.countProfilesStmt != nil {
		if cerr := q.countProfilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countProfilesStmt: %w", cerr)
		}
	}
	if q.countRoutersByAgentStmt != nil {
		if cerr := q.countRoutersByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countRoutersByAgentStmt: %w", cerr)
		}
	}
	if q.countRoutersByProfileStmt != nil {
		if cerr := q.countRoutersByProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countRoutersByProfileStmt: %w", cerr)
		}
	}
	if q.countServersTransportsByAgentStmt != nil {
		if cerr := q.countServersTransportsByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countServersTransportsByAgentStmt: %w", cerr)
		}
	}
	if q.countServersTransportsByProfileStmt != nil {
		if cerr := q.countServersTransportsByProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countServersTransportsByProfileStmt: %w", cerr)
		}
	}
	if q.countServicesByAgentStmt != nil {
		if cerr := q.countServicesByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countServicesByAgentStmt: %w", cerr)
		}
	}
	if q.countServicesByProfileStmt != nil {
		if cerr := q.countServicesByProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countServicesByProfileStmt: %w", cerr)
		}
	}
	if q.countTcpMiddlewaresStmt != nil {
		if cerr := q.countTcpMiddlewaresStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTcpMiddlewaresStmt: %w", cerr)
		}
	}
	if q.countTcpMiddlewaresByAgentStmt != nil {
		if cerr := q.countTcpMiddlewaresByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTcpMiddlewaresByAgentStmt: %w", cerr)
		}
	}
	if q.countTcpMiddlewaresByProfileStmt != nil {
		if cerr := q.countTcpMiddlewaresByProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTcpMiddlewaresByProfileStmt: %w", cerr)
		}
	}
	if q.countTcpRoutersStmt != nil {
		if cerr := q.countTcpRoutersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTcpRoutersStmt: %w", cerr)
		}
	}
	if q.countTcpRoutersByAgentStmt != nil {
		if cerr := q.countTcpRoutersByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTcpRoutersByAgentStmt: %w", cerr)
		}
	}
	if q.countTcpRoutersByProfileStmt != nil {
		if cerr := q.countTcpRoutersByProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTcpRoutersByProfileStmt: %w", cerr)
		}
	}
	if q.countTcpServersTransportsStmt != nil {
		if cerr := q.countTcpServersTransportsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTcpServersTransportsStmt: %w", cerr)
		}
	}
	if q.countTcpServersTransportsByAgentStmt != nil {
		if cerr := q.countTcpServersTransportsByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTcpServersTransportsByAgentStmt: %w", cerr)
		}
	}
	if q.countTcpServersTransportsByProfileStmt != nil {
		if cerr := q.countTcpServersTransportsByProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTcpServersTransportsByProfileStmt: %w", cerr)
		}
	}
	if q.countTcpServicesStmt != nil {
		if cerr := q.countTcpServicesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTcpServicesStmt: %w", cerr)
		}
	}
	if q.countTcpServicesByAgentStmt != nil {
		if cerr := q.countTcpServicesByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTcpServicesByAgentStmt: %w", cerr)
		}
	}
	if q.countTcpServicesByProfileStmt != nil {
		if cerr := q.countTcpServicesByProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTcpServicesByProfileStmt: %w", cerr)
		}
	}
	if q.countTraefikInstancesStmt != nil {
		if cerr := q.countTraefikInstancesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTraefikInstancesStmt: %w", cerr)
		}
	}
	if q.countUdpRoutersStmt != nil {
		if cerr := q.countUdpRoutersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countUdpRoutersStmt: %w", cerr)
		}
	}
	if q.countUdpRoutersByAgentStmt != nil {
		if cerr := q.countUdpRoutersByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countUdpRoutersByAgentStmt: %w", cerr)
		}
	}
	if q.countUdpRoutersByProfileStmt != nil {
		if cerr := q.countUdpRoutersByProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countUdpRoutersByProfileStmt: %w", cerr)
		}
	}
	if q.countUdpServicesStmt != nil {
		if cerr := q.countUdpServicesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countUdpServicesStmt: %w", cerr)
		}
	}
	if q.countUdpServicesByAgentStmt != nil {
		if cerr := q.countUdpServicesByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countUdpServicesByAgentStmt: %w", cerr)
		}
	}
	if q.countUdpServicesByProfileStmt != nil {
		if cerr := q.countUdpServicesByProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countUdpServicesByProfileStmt: %w", cerr)
		}
	}
	if q.countUsersStmt != nil {
		if cerr := q.countUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countUsersStmt: %w", cerr)
		}
	}
	if q.createAgentStmt != nil {
		if cerr := q.createAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAgentStmt: %w", cerr)
		}
	}
	if q.createAuditLogStmt != nil {
		if cerr := q.createAuditLogStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAuditLogStmt: %w", cerr)
		}
	}
	if q.createDnsProviderStmt != nil {
		if cerr := q.createDnsProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDnsProviderStmt: %w", cerr)
		}
	}
	if q.createEntryPointStmt != nil {
		if cerr := q.createEntryPointStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEntryPointStmt: %w", cerr)
		}
	}
	if q.createHttpMiddlewareStmt != nil {
		if cerr := q.createHttpMiddlewareStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createHttpMiddlewareStmt: %w", cerr)
		}
	}
	if q.createHttpRouterStmt != nil {
		if cerr := q.createHttpRouterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createHttpRouterStmt: %w", cerr)
		}
	}
	if q.createHttpRouterDNSProviderStmt != nil {
		if cerr := q.createHttpRouterDNSProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createHttpRouterDNSProviderStmt: %w", cerr)
		}
	}
	if q.createHttpServersTransportStmt != nil {
		if cerr := q.createHttpServersTransportStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createHttpServersTransportStmt: %w", cerr)
		}
	}
	if q.createHttpServiceStmt != nil {
		if cerr := q.createHttpServiceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createHttpServiceStmt: %w", cerr)
		}
	}
	if q.createProfileStmt != nil {
		if cerr := q.createProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProfileStmt: %w", cerr)
		}
	}
	if q.createTcpMiddlewareStmt != nil {
		if cerr := q.createTcpMiddlewareStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTcpMiddlewareStmt: %w", cerr)
		}
	}
	if q.createTcpRouterStmt != nil {
		if cerr := q.createTcpRouterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTcpRouterStmt: %w", cerr)
		}
	}
	if q.createTcpRouterDNSProviderStmt != nil {
		if cerr := q.createTcpRouterDNSProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTcpRouterDNSProviderStmt: %w", cerr)
		}
	}
	if q.createTcpServersTransportStmt != nil {
		if cerr := q.createTcpServersTransportStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTcpServersTransportStmt: %w", cerr)
		}
	}
	if q.createTcpServiceStmt != nil {
		if cerr := q.createTcpServiceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTcpServiceStmt: %w", cerr)
		}
	}
	if q.createUdpRouterStmt != nil {
		if cerr := q.createUdpRouterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUdpRouterStmt: %w", cerr)
		}
	}
	if q.createUdpServiceStmt != nil {
		if cerr := q.createUdpServiceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUdpServiceStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteAgentStmt != nil {
		if cerr := q.deleteAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAgentStmt: %w", cerr)
		}
	}
	if q.deleteDnsProviderStmt != nil {
		if cerr := q.deleteDnsProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteDnsProviderStmt: %w", cerr)
		}
	}
	if q.deleteEntryPointByIDStmt != nil {
		if cerr := q.deleteEntryPointByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEntryPointByIDStmt: %w", cerr)
		}
	}
	if q.deleteErrorByIdStmt != nil {
		if cerr := q.deleteErrorByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteErrorByIdStmt: %w", cerr)
		}
	}
	if q.deleteErrorsByProfileStmt != nil {
		if cerr := q.deleteErrorsByProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteErrorsByProfileStmt: %w", cerr)
		}
	}
	if q.deleteErrorsByProfileCategoryStmt != nil {
		if cerr := q.deleteErrorsByProfileCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteErrorsByProfileCategoryStmt: %w", cerr)
		}
	}
	if q.deleteHttpMiddlewareStmt != nil {
		if cerr := q.deleteHttpMiddlewareStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteHttpMiddlewareStmt: %w", cerr)
		}
	}
	if q.deleteHttpRouterStmt != nil {
		if cerr := q.deleteHttpRouterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteHttpRouterStmt: %w", cerr)
		}
	}
	if q.deleteHttpRouterDNSProviderStmt != nil {
		if cerr := q.deleteHttpRouterDNSProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteHttpRouterDNSProviderStmt: %w", cerr)
		}
	}
	if q.deleteHttpServersTransportStmt != nil {
		if cerr := q.deleteHttpServersTransportStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteHttpServersTransportStmt: %w", cerr)
		}
	}
	if q.deleteHttpServiceStmt != nil {
		if cerr := q.deleteHttpServiceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteHttpServiceStmt: %w", cerr)
		}
	}
	if q.deleteOldAuditLogsStmt != nil {
		if cerr := q.deleteOldAuditLogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteOldAuditLogsStmt: %w", cerr)
		}
	}
	if q.deleteProfileStmt != nil {
		if cerr := q.deleteProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProfileStmt: %w", cerr)
		}
	}
	if q.deleteSettingStmt != nil {
		if cerr := q.deleteSettingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSettingStmt: %w", cerr)
		}
	}
	if q.deleteTcpMiddlewareStmt != nil {
		if cerr := q.deleteTcpMiddlewareStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTcpMiddlewareStmt: %w", cerr)
		}
	}
	if q.deleteTcpRouterStmt != nil {
		if cerr := q.deleteTcpRouterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTcpRouterStmt: %w", cerr)
		}
	}
	if q.deleteTcpRouterDNSProviderStmt != nil {
		if cerr := q.deleteTcpRouterDNSProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTcpRouterDNSProviderStmt: %w", cerr)
		}
	}
	if q.deleteTcpServersTransportStmt != nil {
		if cerr := q.deleteTcpServersTransportStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTcpServersTransportStmt: %w", cerr)
		}
	}
	if q.deleteTcpServiceStmt != nil {
		if cerr := q.deleteTcpServiceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTcpServiceStmt: %w", cerr)
		}
	}
	if q.deleteTraefikInstanceByIDStmt != nil {
		if cerr := q.deleteTraefikInstanceByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTraefikInstanceByIDStmt: %w", cerr)
		}
	}
	if q.deleteUdpRouterStmt != nil {
		if cerr := q.deleteUdpRouterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUdpRouterStmt: %w", cerr)
		}
	}
	if q.deleteUdpServiceStmt != nil {
		if cerr := q.deleteUdpServiceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUdpServiceStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getAgentStmt != nil {
		if cerr := q.getAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAgentStmt: %w", cerr)
		}
	}
	if q.getDefaultDNSProviderStmt != nil {
		if cerr := q.getDefaultDNSProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDefaultDNSProviderStmt: %w", cerr)
		}
	}
	if q.getDefaultEntryPointStmt != nil {
		if cerr := q.getDefaultEntryPointStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDefaultEntryPointStmt: %w", cerr)
		}
	}
	if q.getDnsProviderStmt != nil {
		if cerr := q.getDnsProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDnsProviderStmt: %w", cerr)
		}
	}
	if q.getDnsProviderByNameStmt != nil {
		if cerr := q.getDnsProviderByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDnsProviderByNameStmt: %w", cerr)
		}
	}
	if q.getDnsProvidersByHttpRouterStmt != nil {
		if cerr := q.getDnsProvidersByHttpRouterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDnsProvidersByHttpRouterStmt: %w", cerr)
		}
	}
	if q.getDnsProvidersByTcpRouterStmt != nil {
		if cerr := q.getDnsProvidersByTcpRouterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDnsProvidersByTcpRouterStmt: %w", cerr)
		}
	}
	if q.getEntryPointStmt != nil {
		if cerr := q.getEntryPointStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEntryPointStmt: %w", cerr)
		}
	}
	if q.getErrorsByProfileStmt != nil {
		if cerr := q.getErrorsByProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getErrorsByProfileStmt: %w", cerr)
		}
	}
	if q.getHttpMiddlewareStmt != nil {
		if cerr := q.getHttpMiddlewareStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHttpMiddlewareStmt: %w", cerr)
		}
	}
	if q.getHttpRouterStmt != nil {
		if cerr := q.getHttpRouterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHttpRouterStmt: %w", cerr)
		}
	}
	if q.getHttpRouterDomainsStmt != nil {
		if cerr := q.getHttpRouterDomainsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHttpRouterDomainsStmt: %w", cerr)
		}
	}
	if q.getHttpRoutersUsingEntryPointStmt != nil {
		if cerr := q.getHttpRoutersUsingEntryPointStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHttpRoutersUsingEntryPointStmt: %w", cerr)
		}
	}
	if q.getHttpRoutersUsingMiddlewareStmt != nil {
		if cerr := q.getHttpRoutersUsingMiddlewareStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHttpRoutersUsingMiddlewareStmt: %w", cerr)
		}
	}
	if q.getHttpServersTransportStmt != nil {
		if cerr := q.getHttpServersTransportStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHttpServersTransportStmt: %w", cerr)
		}
	}
	if q.getHttpServiceStmt != nil {
		if cerr := q.getHttpServiceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHttpServiceStmt: %w", cerr)
		}
	}
	if q.getHttpServiceByNameStmt != nil {
		if cerr := q.getHttpServiceByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHttpServiceByNameStmt: %w", cerr)
		}
	}
	if q.getProfileStmt != nil {
		if cerr := q.getProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProfileStmt: %w", cerr)
		}
	}
	if q.getProfileByNameStmt != nil {
		if cerr := q.getProfileByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProfileByNameStmt: %w", cerr)
		}
	}
	if q.getSettingStmt != nil {
		if cerr := q.getSettingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSettingStmt: %w", cerr)
		}
	}
	if q.getTcpMiddlewareStmt != nil {
		if cerr := q.getTcpMiddlewareStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTcpMiddlewareStmt: %w", cerr)
		}
	}
	if q.getTcpRouterStmt != nil {
		if cerr := q.getTcpRouterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTcpRouterStmt: %w", cerr)
		}
	}
	if q.getTcpRouterDomainsStmt != nil {
		if cerr := q.getTcpRouterDomainsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTcpRouterDomainsStmt: %w", cerr)
		}
	}
	if q.getTcpRoutersUsingEntryPointStmt != nil {
		if cerr := q.getTcpRoutersUsingEntryPointStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTcpRoutersUsingEntryPointStmt: %w", cerr)
		}
	}
	if q.getTcpRoutersUsingMiddlewareStmt != nil {
		if cerr := q.getTcpRoutersUsingMiddlewareStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTcpRoutersUsingMiddlewareStmt: %w", cerr)
		}
	}
	if q.getTcpServersTransportStmt != nil {
		if cerr := q.getTcpServersTransportStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTcpServersTransportStmt: %w", cerr)
		}
	}
	if q.getTcpServiceStmt != nil {
		if cerr := q.getTcpServiceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTcpServiceStmt: %w", cerr)
		}
	}
	if q.getTcpServiceByNameStmt != nil {
		if cerr := q.getTcpServiceByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTcpServiceByNameStmt: %w", cerr)
		}
	}
	if q.getTraefikInstanceByIDStmt != nil {
		if cerr := q.getTraefikInstanceByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTraefikInstanceByIDStmt: %w", cerr)
		}
	}
	if q.getTraefikInstanceByNameStmt != nil {
		if cerr := q.getTraefikInstanceByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTraefikInstanceByNameStmt: %w", cerr)
		}
	}
	if q.getUdpRouterStmt != nil {
		if cerr := q.getUdpRouterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUdpRouterStmt: %w", cerr)
		}
	}
	if q.getUdpRoutersUsingEntryPointStmt != nil {
		if cerr := q.getUdpRoutersUsingEntryPointStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUdpRoutersUsingEntryPointStmt: %w", cerr)
		}
	}
	if q.getUdpServiceStmt != nil {
		if cerr := q.getUdpServiceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUdpServiceStmt: %w", cerr)
		}
	}
	if q.getUdpServiceByNameStmt != nil {
		if cerr := q.getUdpServiceByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUdpServiceByNameStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	if q.listAdminUsersStmt != nil {
		if cerr := q.listAdminUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAdminUsersStmt: %w", cerr)
		}
	}
	if q.listAgentsStmt != nil {
		if cerr := q.listAgentsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAgentsStmt: %w", cerr)
		}
	}
	if q.listAuditLogsStmt != nil {
		if cerr := q.listAuditLogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAuditLogsStmt: %w", cerr)
		}
	}
	if q.listDnsProvidersStmt != nil {
		if cerr := q.listDnsProvidersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listDnsProvidersStmt: %w", cerr)
		}
	}
	if q.listEntryPointsStmt != nil {
		if cerr := q.listEntryPointsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEntryPointsStmt: %w", cerr)
		}
	}
	if q.listErrorsStmt != nil {
		if cerr := q.listErrorsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listErrorsStmt: %w", cerr)
		}
	}
	if q.listHttpMiddlewaresStmt != nil {
		if cerr := q.listHttpMiddlewaresStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listHttpMiddlewaresStmt: %w", cerr)
		}
	}
	if q.listHttpMiddlewaresByAgentStmt != nil {
		if cerr := q.listHttpMiddlewaresByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listHttpMiddlewaresByAgentStmt: %w", cerr)
		}
	}
	if q.listHttpMiddlewaresEnabledStmt != nil {
		if cerr := q.listHttpMiddlewaresEnabledStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listHttpMiddlewaresEnabledStmt: %w", cerr)
		}
	}
	if q.listHttpRoutersStmt != nil {
		if cerr := q.listHttpRoutersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listHttpRoutersStmt: %w", cerr)
		}
	}
	if q.listHttpRoutersByAgentStmt != nil {
		if cerr := q.listHttpRoutersByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listHttpRoutersByAgentStmt: %w", cerr)
		}
	}
	if q.listHttpRoutersEnabledStmt != nil {
		if cerr := q.listHttpRoutersEnabledStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listHttpRoutersEnabledStmt: %w", cerr)
		}
	}
	if q.listHttpServersTransportsStmt != nil {
		if cerr := q.listHttpServersTransportsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listHttpServersTransportsStmt: %w", cerr)
		}
	}
	if q.listHttpServersTransportsByAgentStmt != nil {
		if cerr := q.listHttpServersTransportsByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listHttpServersTransportsByAgentStmt: %w", cerr)
		}
	}
	if q.listHttpServersTransportsEnabledStmt != nil {
		if cerr := q.listHttpServersTransportsEnabledStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listHttpServersTransportsEnabledStmt: %w", cerr)
		}
	}
	if q.listHttpServicesStmt != nil {
		if cerr := q.listHttpServicesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listHttpServicesStmt: %w", cerr)
		}
	}
	if q.listHttpServicesByAgentStmt != nil {
		if cerr := q.listHttpServicesByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listHttpServicesByAgentStmt: %w", cerr)
		}
	}
	if q.listHttpServicesEnabledStmt != nil {
		if cerr := q.listHttpServicesEnabledStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listHttpServicesEnabledStmt: %w", cerr)
		}
	}
	if q.listMiddlewaresByAgentStmt != nil {
		if cerr := q.listMiddlewaresByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listMiddlewaresByAgentStmt: %w", cerr)
		}
	}
	if q.listMiddlewaresByProfileStmt != nil {
		if cerr := q.listMiddlewaresByProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listMiddlewaresByProfileStmt: %w", cerr)
		}
	}
	if q.listProfilesStmt != nil {
		if cerr := q.listProfilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listProfilesStmt: %w", cerr)
		}
	}
	if q.listRoutersByAgentStmt != nil {
		if cerr := q.listRoutersByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRoutersByAgentStmt: %w", cerr)
		}
	}
	if q.listRoutersByProfileStmt != nil {
		if cerr := q.listRoutersByProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRoutersByProfileStmt: %w", cerr)
		}
	}
	if q.listServersTransportsByAgentStmt != nil {
		if cerr := q.listServersTransportsByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listServersTransportsByAgentStmt: %w", cerr)
		}
	}
	if q.listServersTransportsByProfileStmt != nil {
		if cerr := q.listServersTransportsByProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listServersTransportsByProfileStmt: %w", cerr)
		}
	}
	if q.listServicesByAgentStmt != nil {
		if cerr := q.listServicesByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listServicesByAgentStmt: %w", cerr)
		}
	}
	if q.listServicesByProfileStmt != nil {
		if cerr := q.listServicesByProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listServicesByProfileStmt: %w", cerr)
		}
	}
	if q.listSettingsStmt != nil {
		if cerr := q.listSettingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listSettingsStmt: %w", cerr)
		}
	}
	if q.listTcpMiddlewaresStmt != nil {
		if cerr := q.listTcpMiddlewaresStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTcpMiddlewaresStmt: %w", cerr)
		}
	}
	if q.listTcpMiddlewaresByAgentStmt != nil {
		if cerr := q.listTcpMiddlewaresByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTcpMiddlewaresByAgentStmt: %w", cerr)
		}
	}
	if q.listTcpMiddlewaresEnabledStmt != nil {
		if cerr := q.listTcpMiddlewaresEnabledStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTcpMiddlewaresEnabledStmt: %w", cerr)
		}
	}
	if q.listTcpRoutersStmt != nil {
		if cerr := q.listTcpRoutersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTcpRoutersStmt: %w", cerr)
		}
	}
	if q.listTcpRoutersByAgentStmt != nil {
		if cerr := q.listTcpRoutersByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTcpRoutersByAgentStmt: %w", cerr)
		}
	}
	if q.listTcpRoutersEnabledStmt != nil {
		if cerr := q.listTcpRoutersEnabledStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTcpRoutersEnabledStmt: %w", cerr)
		}
	}
	if q.listTcpServersTransportsStmt != nil {
		if cerr := q.listTcpServersTransportsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTcpServersTransportsStmt: %w", cerr)
		}
	}
	if q.listTcpServersTransportsByAgentStmt != nil {
		if cerr := q.listTcpServersTransportsByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTcpServersTransportsByAgentStmt: %w", cerr)
		}
	}
	if q.listTcpServersTransportsEnabledStmt != nil {
		if cerr := q.listTcpServersTransportsEnabledStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTcpServersTransportsEnabledStmt: %w", cerr)
		}
	}
	if q.listTcpServicesStmt != nil {
		if cerr := q.listTcpServicesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTcpServicesStmt: %w", cerr)
		}
	}
	if q.listTcpServicesByAgentStmt != nil {
		if cerr := q.listTcpServicesByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTcpServicesByAgentStmt: %w", cerr)
		}
	}
	if q.listTcpServicesEnabledStmt != nil {
		if cerr := q.listTcpServicesEnabledStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTcpServicesEnabledStmt: %w", cerr)
		}
	}
	if q.listTraefikInstancesStmt != nil {
		if cerr := q.listTraefikInstancesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTraefikInstancesStmt: %w", cerr)
		}
	}
	if q.listUdpRoutersStmt != nil {
		if cerr := q.listUdpRoutersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUdpRoutersStmt: %w", cerr)
		}
	}
	if q.listUdpRoutersByAgentStmt != nil {
		if cerr := q.listUdpRoutersByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUdpRoutersByAgentStmt: %w", cerr)
		}
	}
	if q.listUdpRoutersEnabledStmt != nil {
		if cerr := q.listUdpRoutersEnabledStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUdpRoutersEnabledStmt: %w", cerr)
		}
	}
	if q.listUdpServicesStmt != nil {
		if cerr := q.listUdpServicesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUdpServicesStmt: %w", cerr)
		}
	}
	if q.listUdpServicesByAgentStmt != nil {
		if cerr := q.listUdpServicesByAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUdpServicesByAgentStmt: %w", cerr)
		}
	}
	if q.listUdpServicesEnabledStmt != nil {
		if cerr := q.listUdpServicesEnabledStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUdpServicesEnabledStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.logErrorStmt != nil {
		if cerr := q.logErrorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing logErrorStmt: %w", cerr)
		}
	}
	if q.purgeTraefikInstancesStmt != nil {
		if cerr := q.purgeTraefikInstancesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing purgeTraefikInstancesStmt: %w", cerr)
		}
	}
	if q.unsetDefaultDNSProviderStmt != nil {
		if cerr := q.unsetDefaultDNSProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing unsetDefaultDNSProviderStmt: %w", cerr)
		}
	}
	if q.unsetDefaultEntryPointStmt != nil {
		if cerr := q.unsetDefaultEntryPointStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing unsetDefaultEntryPointStmt: %w", cerr)
		}
	}
	if q.unsetDefaultHttpMiddlewareStmt != nil {
		if cerr := q.unsetDefaultHttpMiddlewareStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing unsetDefaultHttpMiddlewareStmt: %w", cerr)
		}
	}
	if q.unsetDefaultTcpMiddlewareStmt != nil {
		if cerr := q.unsetDefaultTcpMiddlewareStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing unsetDefaultTcpMiddlewareStmt: %w", cerr)
		}
	}
	if q.updateAgentStmt != nil {
		if cerr := q.updateAgentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAgentStmt: %w", cerr)
		}
	}
	if q.updateAgentIPStmt != nil {
		if cerr := q.updateAgentIPStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAgentIPStmt: %w", cerr)
		}
	}
	if q.updateAgentTokenStmt != nil {
		if cerr := q.updateAgentTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAgentTokenStmt: %w", cerr)
		}
	}
	if q.updateDnsProviderStmt != nil {
		if cerr := q.updateDnsProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateDnsProviderStmt: %w", cerr)
		}
	}
	if q.updateEntryPointStmt != nil {
		if cerr := q.updateEntryPointStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEntryPointStmt: %w", cerr)
		}
	}
	if q.updateHttpMiddlewareStmt != nil {
		if cerr := q.updateHttpMiddlewareStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateHttpMiddlewareStmt: %w", cerr)
		}
	}
	if q.updateHttpRouterStmt != nil {
		if cerr := q.updateHttpRouterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateHttpRouterStmt: %w", cerr)
		}
	}
	if q.updateHttpServersTransportStmt != nil {
		if cerr := q.updateHttpServersTransportStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateHttpServersTransportStmt: %w", cerr)
		}
	}
	if q.updateHttpServiceStmt != nil {
		if cerr := q.updateHttpServiceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateHttpServiceStmt: %w", cerr)
		}
	}
	if q.updateProfileStmt != nil {
		if cerr := q.updateProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProfileStmt: %w", cerr)
		}
	}
	if q.updateTcpMiddlewareStmt != nil {
		if cerr := q.updateTcpMiddlewareStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTcpMiddlewareStmt: %w", cerr)
		}
	}
	if q.updateTcpRouterStmt != nil {
		if cerr := q.updateTcpRouterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTcpRouterStmt: %w", cerr)
		}
	}
	if q.updateTcpServersTransportStmt != nil {
		if cerr := q.updateTcpServersTransportStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTcpServersTransportStmt: %w", cerr)
		}
	}
	if q.updateTcpServiceStmt != nil {
		if cerr := q.updateTcpServiceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTcpServiceStmt: %w", cerr)
		}
	}
	if q.updateUdpRouterStmt != nil {
		if cerr := q.updateUdpRouterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUdpRouterStmt: %w", cerr)
		}
	}
	if q.updateUdpServiceStmt != nil {
		if cerr := q.updateUdpServiceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUdpServiceStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.updateUserLastLoginStmt != nil {
		if cerr := q.updateUserLastLoginStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserLastLoginStmt: %w", cerr)
		}
	}
	if q.updateUserPasswordStmt != nil {
		if cerr := q.updateUserPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPasswordStmt: %w", cerr)
		}
	}
	if q.updateUserResetTokenStmt != nil {
		if cerr := q.updateUserResetTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserResetTokenStmt: %w", cerr)
		}
	}
	if q.upsertSettingStmt != nil {
		if cerr := q.upsertSettingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertSettingStmt: %w", cerr)
		}
	}
	if q.upsertTraefikInstanceStmt != nil {
		if cerr := q.upsertTraefikInstanceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertTraefikInstanceStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                      DBTX
	tx                                      *sql.Tx
	countAgentsStmt                         *sql.Stmt
	countAuditLogsStmt                      *sql.Stmt
	countDnsProvidersStmt                   *sql.Stmt
	countEntryPointsStmt                    *sql.Stmt
	countHttpMiddlewaresStmt                *sql.Stmt
	countHttpMiddlewaresByAgentStmt         *sql.Stmt
	countHttpMiddlewaresByProfileStmt       *sql.Stmt
	countHttpRoutersStmt                    *sql.Stmt
	countHttpRoutersByAgentStmt             *sql.Stmt
	countHttpRoutersByProfileStmt           *sql.Stmt
	countHttpServersTransportsStmt          *sql.Stmt
	countHttpServersTransportsByAgentStmt   *sql.Stmt
	countHttpServersTransportsByProfileStmt *sql.Stmt
	countHttpServicesStmt                   *sql.Stmt
	countHttpServicesByAgentStmt            *sql.Stmt
	countHttpServicesByProfileStmt          *sql.Stmt
	countMiddlewaresByAgentStmt             *sql.Stmt
	countMiddlewaresByProfileStmt           *sql.Stmt
	countProfilesStmt                       *sql.Stmt
	countRoutersByAgentStmt                 *sql.Stmt
	countRoutersByProfileStmt               *sql.Stmt
	countServersTransportsByAgentStmt       *sql.Stmt
	countServersTransportsByProfileStmt     *sql.Stmt
	countServicesByAgentStmt                *sql.Stmt
	countServicesByProfileStmt              *sql.Stmt
	countTcpMiddlewaresStmt                 *sql.Stmt
	countTcpMiddlewaresByAgentStmt          *sql.Stmt
	countTcpMiddlewaresByProfileStmt        *sql.Stmt
	countTcpRoutersStmt                     *sql.Stmt
	countTcpRoutersByAgentStmt              *sql.Stmt
	countTcpRoutersByProfileStmt            *sql.Stmt
	countTcpServersTransportsStmt           *sql.Stmt
	countTcpServersTransportsByAgentStmt    *sql.Stmt
	countTcpServersTransportsByProfileStmt  *sql.Stmt
	countTcpServicesStmt                    *sql.Stmt
	countTcpServicesByAgentStmt             *sql.Stmt
	countTcpServicesByProfileStmt           *sql.Stmt
	countTraefikInstancesStmt               *sql.Stmt
	countUdpRoutersStmt                     *sql.Stmt
	countUdpRoutersByAgentStmt              *sql.Stmt
	countUdpRoutersByProfileStmt            *sql.Stmt
	countUdpServicesStmt                    *sql.Stmt
	countUdpServicesByAgentStmt             *sql.Stmt
	countUdpServicesByProfileStmt           *sql.Stmt
	countUsersStmt                          *sql.Stmt
	createAgentStmt                         *sql.Stmt
	createAuditLogStmt                      *sql.Stmt
	createDnsProviderStmt                   *sql.Stmt
	createEntryPointStmt                    *sql.Stmt
	createHttpMiddlewareStmt                *sql.Stmt
	createHttpRouterStmt                    *sql.Stmt
	createHttpRouterDNSProviderStmt         *sql.Stmt
	createHttpServersTransportStmt          *sql.Stmt
	createHttpServiceStmt                   *sql.Stmt
	createProfileStmt                       *sql.Stmt
	createTcpMiddlewareStmt                 *sql.Stmt
	createTcpRouterStmt                     *sql.Stmt
	createTcpRouterDNSProviderStmt          *sql.Stmt
	createTcpServersTransportStmt           *sql.Stmt
	createTcpServiceStmt                    *sql.Stmt
	createUdpRouterStmt                     *sql.Stmt
	createUdpServiceStmt                    *sql.Stmt
	createUserStmt                          *sql.Stmt
	deleteAgentStmt                         *sql.Stmt
	deleteDnsProviderStmt                   *sql.Stmt
	deleteEntryPointByIDStmt                *sql.Stmt
	deleteErrorByIdStmt                     *sql.Stmt
	deleteErrorsByProfileStmt               *sql.Stmt
	deleteErrorsByProfileCategoryStmt       *sql.Stmt
	deleteHttpMiddlewareStmt                *sql.Stmt
	deleteHttpRouterStmt                    *sql.Stmt
	deleteHttpRouterDNSProviderStmt         *sql.Stmt
	deleteHttpServersTransportStmt          *sql.Stmt
	deleteHttpServiceStmt                   *sql.Stmt
	deleteOldAuditLogsStmt                  *sql.Stmt
	deleteProfileStmt                       *sql.Stmt
	deleteSettingStmt                       *sql.Stmt
	deleteTcpMiddlewareStmt                 *sql.Stmt
	deleteTcpRouterStmt                     *sql.Stmt
	deleteTcpRouterDNSProviderStmt          *sql.Stmt
	deleteTcpServersTransportStmt           *sql.Stmt
	deleteTcpServiceStmt                    *sql.Stmt
	deleteTraefikInstanceByIDStmt           *sql.Stmt
	deleteUdpRouterStmt                     *sql.Stmt
	deleteUdpServiceStmt                    *sql.Stmt
	deleteUserStmt                          *sql.Stmt
	getAgentStmt                            *sql.Stmt
	getDefaultDNSProviderStmt               *sql.Stmt
	getDefaultEntryPointStmt                *sql.Stmt
	getDnsProviderStmt                      *sql.Stmt
	getDnsProviderByNameStmt                *sql.Stmt
	getDnsProvidersByHttpRouterStmt         *sql.Stmt
	getDnsProvidersByTcpRouterStmt          *sql.Stmt
	getEntryPointStmt                       *sql.Stmt
	getErrorsByProfileStmt                  *sql.Stmt
	getHttpMiddlewareStmt                   *sql.Stmt
	getHttpRouterStmt                       *sql.Stmt
	getHttpRouterDomainsStmt                *sql.Stmt
	getHttpRoutersUsingEntryPointStmt       *sql.Stmt
	getHttpRoutersUsingMiddlewareStmt       *sql.Stmt
	getHttpServersTransportStmt             *sql.Stmt
	getHttpServiceStmt                      *sql.Stmt
	getHttpServiceByNameStmt                *sql.Stmt
	getProfileStmt                          *sql.Stmt
	getProfileByNameStmt                    *sql.Stmt
	getSettingStmt                          *sql.Stmt
	getTcpMiddlewareStmt                    *sql.Stmt
	getTcpRouterStmt                        *sql.Stmt
	getTcpRouterDomainsStmt                 *sql.Stmt
	getTcpRoutersUsingEntryPointStmt        *sql.Stmt
	getTcpRoutersUsingMiddlewareStmt        *sql.Stmt
	getTcpServersTransportStmt              *sql.Stmt
	getTcpServiceStmt                       *sql.Stmt
	getTcpServiceByNameStmt                 *sql.Stmt
	getTraefikInstanceByIDStmt              *sql.Stmt
	getTraefikInstanceByNameStmt            *sql.Stmt
	getUdpRouterStmt                        *sql.Stmt
	getUdpRoutersUsingEntryPointStmt        *sql.Stmt
	getUdpServiceStmt                       *sql.Stmt
	getUdpServiceByNameStmt                 *sql.Stmt
	getUserByEmailStmt                      *sql.Stmt
	getUserByIDStmt                         *sql.Stmt
	getUserByUsernameStmt                   *sql.Stmt
	listAdminUsersStmt                      *sql.Stmt
	listAgentsStmt                          *sql.Stmt
	listAuditLogsStmt                       *sql.Stmt
	listDnsProvidersStmt                    *sql.Stmt
	listEntryPointsStmt                     *sql.Stmt
	listErrorsStmt                          *sql.Stmt
	listHttpMiddlewaresStmt                 *sql.Stmt
	listHttpMiddlewaresByAgentStmt          *sql.Stmt
	listHttpMiddlewaresEnabledStmt          *sql.Stmt
	listHttpRoutersStmt                     *sql.Stmt
	listHttpRoutersByAgentStmt              *sql.Stmt
	listHttpRoutersEnabledStmt              *sql.Stmt
	listHttpServersTransportsStmt           *sql.Stmt
	listHttpServersTransportsByAgentStmt    *sql.Stmt
	listHttpServersTransportsEnabledStmt    *sql.Stmt
	listHttpServicesStmt                    *sql.Stmt
	listHttpServicesByAgentStmt             *sql.Stmt
	listHttpServicesEnabledStmt             *sql.Stmt
	listMiddlewaresByAgentStmt              *sql.Stmt
	listMiddlewaresByProfileStmt            *sql.Stmt
	listProfilesStmt                        *sql.Stmt
	listRoutersByAgentStmt                  *sql.Stmt
	listRoutersByProfileStmt                *sql.Stmt
	listServersTransportsByAgentStmt        *sql.Stmt
	listServersTransportsByProfileStmt      *sql.Stmt
	listServicesByAgentStmt                 *sql.Stmt
	listServicesByProfileStmt               *sql.Stmt
	listSettingsStmt                        *sql.Stmt
	listTcpMiddlewaresStmt                  *sql.Stmt
	listTcpMiddlewaresByAgentStmt           *sql.Stmt
	listTcpMiddlewaresEnabledStmt           *sql.Stmt
	listTcpRoutersStmt                      *sql.Stmt
	listTcpRoutersByAgentStmt               *sql.Stmt
	listTcpRoutersEnabledStmt               *sql.Stmt
	listTcpServersTransportsStmt            *sql.Stmt
	listTcpServersTransportsByAgentStmt     *sql.Stmt
	listTcpServersTransportsEnabledStmt     *sql.Stmt
	listTcpServicesStmt                     *sql.Stmt
	listTcpServicesByAgentStmt              *sql.Stmt
	listTcpServicesEnabledStmt              *sql.Stmt
	listTraefikInstancesStmt                *sql.Stmt
	listUdpRoutersStmt                      *sql.Stmt
	listUdpRoutersByAgentStmt               *sql.Stmt
	listUdpRoutersEnabledStmt               *sql.Stmt
	listUdpServicesStmt                     *sql.Stmt
	listUdpServicesByAgentStmt              *sql.Stmt
	listUdpServicesEnabledStmt              *sql.Stmt
	listUsersStmt                           *sql.Stmt
	logErrorStmt                            *sql.Stmt
	purgeTraefikInstancesStmt               *sql.Stmt
	unsetDefaultDNSProviderStmt             *sql.Stmt
	unsetDefaultEntryPointStmt              *sql.Stmt
	unsetDefaultHttpMiddlewareStmt          *sql.Stmt
	unsetDefaultTcpMiddlewareStmt           *sql.Stmt
	updateAgentStmt                         *sql.Stmt
	updateAgentIPStmt                       *sql.Stmt
	updateAgentTokenStmt                    *sql.Stmt
	updateDnsProviderStmt                   *sql.Stmt
	updateEntryPointStmt                    *sql.Stmt
	updateHttpMiddlewareStmt                *sql.Stmt
	updateHttpRouterStmt                    *sql.Stmt
	updateHttpServersTransportStmt          *sql.Stmt
	updateHttpServiceStmt                   *sql.Stmt
	updateProfileStmt                       *sql.Stmt
	updateTcpMiddlewareStmt                 *sql.Stmt
	updateTcpRouterStmt                     *sql.Stmt
	updateTcpServersTransportStmt           *sql.Stmt
	updateTcpServiceStmt                    *sql.Stmt
	updateUdpRouterStmt                     *sql.Stmt
	updateUdpServiceStmt                    *sql.Stmt
	updateUserStmt                          *sql.Stmt
	updateUserLastLoginStmt                 *sql.Stmt
	updateUserPasswordStmt                  *sql.Stmt
	updateUserResetTokenStmt                *sql.Stmt
	upsertSettingStmt                       *sql.Stmt
	upsertTraefikInstanceStmt               *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                      tx,
		tx:                                      tx,
		countAgentsStmt:                         q.countAgentsStmt,
		countAuditLogsStmt:                      q.countAuditLogsStmt,
		countDnsProvidersStmt:                   q.countDnsProvidersStmt,
		countEntryPointsStmt:                    q.countEntryPointsStmt,
		countHttpMiddlewaresStmt:                q.countHttpMiddlewaresStmt,
		countHttpMiddlewaresByAgentStmt:         q.countHttpMiddlewaresByAgentStmt,
		countHttpMiddlewaresByProfileStmt:       q.countHttpMiddlewaresByProfileStmt,
		countHttpRoutersStmt:                    q.countHttpRoutersStmt,
		countHttpRoutersByAgentStmt:             q.countHttpRoutersByAgentStmt,
		countHttpRoutersByProfileStmt:           q.countHttpRoutersByProfileStmt,
		countHttpServersTransportsStmt:          q.countHttpServersTransportsStmt,
		countHttpServersTransportsByAgentStmt:   q.countHttpServersTransportsByAgentStmt,
		countHttpServersTransportsByProfileStmt: q.countHttpServersTransportsByProfileStmt,
		countHttpServicesStmt:                   q.countHttpServicesStmt,
		countHttpServicesByAgentStmt:            q.countHttpServicesByAgentStmt,
		countHttpServicesByProfileStmt:          q.countHttpServicesByProfileStmt,
		countMiddlewaresByAgentStmt:             q.countMiddlewaresByAgentStmt,
		countMiddlewaresByProfileStmt:           q.countMiddlewaresByProfileStmt,
		countProfilesStmt:                       q.countProfilesStmt,
		countRoutersByAgentStmt:                 q.countRoutersByAgentStmt,
		countRoutersByProfileStmt:               q.countRoutersByProfileStmt,
		countServersTransportsByAgentStmt:       q.countServersTransportsByAgentStmt,
		countServersTransportsByProfileStmt:     q.countServersTransportsByProfileStmt,
		countServicesByAgentStmt:                q.countServicesByAgentStmt,
		countServicesByProfileStmt:              q.countServicesByProfileStmt,
		countTcpMiddlewaresStmt:                 q.countTcpMiddlewaresStmt,
		countTcpMiddlewaresByAgentStmt:          q.countTcpMiddlewaresByAgentStmt,
		countTcpMiddlewaresByProfileStmt:        q.countTcpMiddlewaresByProfileStmt,
		countTcpRoutersStmt:                     q.countTcpRoutersStmt,
		countTcpRoutersByAgentStmt:              q.countTcpRoutersByAgentStmt,
		countTcpRoutersByProfileStmt:            q.countTcpRoutersByProfileStmt,
		countTcpServersTransportsStmt:           q.countTcpServersTransportsStmt,
		countTcpServersTransportsByAgentStmt:    q.countTcpServersTransportsByAgentStmt,
		countTcpServersTransportsByProfileStmt:  q.countTcpServersTransportsByProfileStmt,
		countTcpServicesStmt:                    q.countTcpServicesStmt,
		countTcpServicesByAgentStmt:             q.countTcpServicesByAgentStmt,
		countTcpServicesByProfileStmt:           q.countTcpServicesByProfileStmt,
		countTraefikInstancesStmt:               q.countTraefikInstancesStmt,
		countUdpRoutersStmt:                     q.countUdpRoutersStmt,
		countUdpRoutersByAgentStmt:              q.countUdpRoutersByAgentStmt,
		countUdpRoutersByProfileStmt:            q.countUdpRoutersByProfileStmt,
		countUdpServicesStmt:                    q.countUdpServicesStmt,
		countUdpServicesByAgentStmt:             q.countUdpServicesByAgentStmt,
		countUdpServicesByProfileStmt:           q.countUdpServicesByProfileStmt,
		countUsersStmt:                          q.countUsersStmt,
		createAgentStmt:                         q.createAgentStmt,
		createAuditLogStmt:                      q.createAuditLogStmt,
		createDnsProviderStmt:                   q.createDnsProviderStmt,
		createEntryPointStmt:                    q.createEntryPointStmt,
		createHttpMiddlewareStmt:                q.createHttpMiddlewareStmt,
		createHttpRouterStmt:                    q.createHttpRouterStmt,
		createHttpRouterDNSProviderStmt:         q.createHttpRouterDNSProviderStmt,
		createHttpServersTransportStmt:          q.createHttpServersTransportStmt,
		createHttpServiceStmt:                   q.createHttpServiceStmt,
		createProfileStmt:                       q.createProfileStmt,
		createTcpMiddlewareStmt:                 q.createTcpMiddlewareStmt,
		createTcpRouterStmt:                     q.createTcpRouterStmt,
		createTcpRouterDNSProviderStmt:          q.createTcpRouterDNSProviderStmt,
		createTcpServersTransportStmt:           q.createTcpServersTransportStmt,
		createTcpServiceStmt:                    q.createTcpServiceStmt,
		createUdpRouterStmt:                     q.createUdpRouterStmt,
		createUdpServiceStmt:                    q.createUdpServiceStmt,
		createUserStmt:                          q.createUserStmt,
		deleteAgentStmt:                         q.deleteAgentStmt,
		deleteDnsProviderStmt:                   q.deleteDnsProviderStmt,
		deleteEntryPointByIDStmt:                q.deleteEntryPointByIDStmt,
		deleteErrorByIdStmt:                     q.deleteErrorByIdStmt,
		deleteErrorsByProfileStmt:               q.deleteErrorsByProfileStmt,
		deleteErrorsByProfileCategoryStmt:       q.deleteErrorsByProfileCategoryStmt,
		deleteHttpMiddlewareStmt:                q.deleteHttpMiddlewareStmt,
		deleteHttpRouterStmt:                    q.deleteHttpRouterStmt,
		deleteHttpRouterDNSProviderStmt:         q.deleteHttpRouterDNSProviderStmt,
		deleteHttpServersTransportStmt:          q.deleteHttpServersTransportStmt,
		deleteHttpServiceStmt:                   q.deleteHttpServiceStmt,
		deleteOldAuditLogsStmt:                  q.deleteOldAuditLogsStmt,
		deleteProfileStmt:                       q.deleteProfileStmt,
		deleteSettingStmt:                       q.deleteSettingStmt,
		deleteTcpMiddlewareStmt:                 q.deleteTcpMiddlewareStmt,
		deleteTcpRouterStmt:                     q.deleteTcpRouterStmt,
		deleteTcpRouterDNSProviderStmt:          q.deleteTcpRouterDNSProviderStmt,
		deleteTcpServersTransportStmt:           q.deleteTcpServersTransportStmt,
		deleteTcpServiceStmt:                    q.deleteTcpServiceStmt,
		deleteTraefikInstanceByIDStmt:           q.deleteTraefikInstanceByIDStmt,
		deleteUdpRouterStmt:                     q.deleteUdpRouterStmt,
		deleteUdpServiceStmt:                    q.deleteUdpServiceStmt,
		deleteUserStmt:                          q.deleteUserStmt,
		getAgentStmt:                            q.getAgentStmt,
		getDefaultDNSProviderStmt:               q.getDefaultDNSProviderStmt,
		getDefaultEntryPointStmt:                q.getDefaultEntryPointStmt,
		getDnsProviderStmt:                      q.getDnsProviderStmt,
		getDnsProviderByNameStmt:                q.getDnsProviderByNameStmt,
		getDnsProvidersByHttpRouterStmt:         q.getDnsProvidersByHttpRouterStmt,
		getDnsProvidersByTcpRouterStmt:          q.getDnsProvidersByTcpRouterStmt,
		getEntryPointStmt:                       q.getEntryPointStmt,
		getErrorsByProfileStmt:                  q.getErrorsByProfileStmt,
		getHttpMiddlewareStmt:                   q.getHttpMiddlewareStmt,
		getHttpRouterStmt:                       q.getHttpRouterStmt,
		getHttpRouterDomainsStmt:                q.getHttpRouterDomainsStmt,
		getHttpRoutersUsingEntryPointStmt:       q.getHttpRoutersUsingEntryPointStmt,
		getHttpRoutersUsingMiddlewareStmt:       q.getHttpRoutersUsingMiddlewareStmt,
		getHttpServersTransportStmt:             q.getHttpServersTransportStmt,
		getHttpServiceStmt:                      q.getHttpServiceStmt,
		getHttpServiceByNameStmt:                q.getHttpServiceByNameStmt,
		getProfileStmt:                          q.getProfileStmt,
		getProfileByNameStmt:                    q.getProfileByNameStmt,
		getSettingStmt:                          q.getSettingStmt,
		getTcpMiddlewareStmt:                    q.getTcpMiddlewareStmt,
		getTcpRouterStmt:                        q.getTcpRouterStmt,
		getTcpRouterDomainsStmt:                 q.getTcpRouterDomainsStmt,
		getTcpRoutersUsingEntryPointStmt:        q.getTcpRoutersUsingEntryPointStmt,
		getTcpRoutersUsingMiddlewareStmt:        q.getTcpRoutersUsingMiddlewareStmt,
		getTcpServersTransportStmt:              q.getTcpServersTransportStmt,
		getTcpServiceStmt:                       q.getTcpServiceStmt,
		getTcpServiceByNameStmt:                 q.getTcpServiceByNameStmt,
		getTraefikInstanceByIDStmt:              q.getTraefikInstanceByIDStmt,
		getTraefikInstanceByNameStmt:            q.getTraefikInstanceByNameStmt,
		getUdpRouterStmt:                        q.getUdpRouterStmt,
		getUdpRoutersUsingEntryPointStmt:        q.getUdpRoutersUsingEntryPointStmt,
		getUdpServiceStmt:                       q.getUdpServiceStmt,
		getUdpServiceByNameStmt:                 q.getUdpServiceByNameStmt,
		getUserByEmailStmt:                      q.getUserByEmailStmt,
		getUserByIDStmt:                         q.getUserByIDStmt,
		getUserByUsernameStmt:                   q.getUserByUsernameStmt,
		listAdminUsersStmt:                      q.listAdminUsersStmt,
		listAgentsStmt:                          q.listAgentsStmt,
		listAuditLogsStmt:                       q.listAuditLogsStmt,
		listDnsProvidersStmt:                    q.listDnsProvidersStmt,
		listEntryPointsStmt:                     q.listEntryPointsStmt,
		listErrorsStmt:                          q.listErrorsStmt,
		listHttpMiddlewaresStmt:                 q.listHttpMiddlewaresStmt,
		listHttpMiddlewaresByAgentStmt:          q.listHttpMiddlewaresByAgentStmt,
		listHttpMiddlewaresEnabledStmt:          q.listHttpMiddlewaresEnabledStmt,
		listHttpRoutersStmt:                     q.listHttpRoutersStmt,
		listHttpRoutersByAgentStmt:              q.listHttpRoutersByAgentStmt,
		listHttpRoutersEnabledStmt:              q.listHttpRoutersEnabledStmt,
		listHttpServersTransportsStmt:           q.listHttpServersTransportsStmt,
		listHttpServersTransportsByAgentStmt:    q.listHttpServersTransportsByAgentStmt,
		listHttpServersTransportsEnabledStmt:    q.listHttpServersTransportsEnabledStmt,
		listHttpServicesStmt:                    q.listHttpServicesStmt,
		listHttpServicesByAgentStmt:             q.listHttpServicesByAgentStmt,
		listHttpServicesEnabledStmt:             q.listHttpServicesEnabledStmt,
		listMiddlewaresByAgentStmt:              q.listMiddlewaresByAgentStmt,
		listMiddlewaresByProfileStmt:            q.listMiddlewaresByProfileStmt,
		listProfilesStmt:                        q.listProfilesStmt,
		listRoutersByAgentStmt:                  q.listRoutersByAgentStmt,
		listRoutersByProfileStmt:                q.listRoutersByProfileStmt,
		listServersTransportsByAgentStmt:        q.listServersTransportsByAgentStmt,
		listServersTransportsByProfileStmt:      q.listServersTransportsByProfileStmt,
		listServicesByAgentStmt:                 q.listServicesByAgentStmt,
		listServicesByProfileStmt:               q.listServicesByProfileStmt,
		listSettingsStmt:                        q.listSettingsStmt,
		listTcpMiddlewaresStmt:                  q.listTcpMiddlewaresStmt,
		listTcpMiddlewaresByAgentStmt:           q.listTcpMiddlewaresByAgentStmt,
		listTcpMiddlewaresEnabledStmt:           q.listTcpMiddlewaresEnabledStmt,
		listTcpRoutersStmt:                      q.listTcpRoutersStmt,
		listTcpRoutersByAgentStmt:               q.listTcpRoutersByAgentStmt,
		listTcpRoutersEnabledStmt:               q.listTcpRoutersEnabledStmt,
		listTcpServersTransportsStmt:            q.listTcpServersTransportsStmt,
		listTcpServersTransportsByAgentStmt:     q.listTcpServersTransportsByAgentStmt,
		listTcpServersTransportsEnabledStmt:     q.listTcpServersTransportsEnabledStmt,
		listTcpServicesStmt:                     q.listTcpServicesStmt,
		listTcpServicesByAgentStmt:              q.listTcpServicesByAgentStmt,
		listTcpServicesEnabledStmt:              q.listTcpServicesEnabledStmt,
		listTraefikInstancesStmt:                q.listTraefikInstancesStmt,
		listUdpRoutersStmt:                      q.listUdpRoutersStmt,
		listUdpRoutersByAgentStmt:               q.listUdpRoutersByAgentStmt,
		listUdpRoutersEnabledStmt:               q.listUdpRoutersEnabledStmt,
		listUdpServicesStmt:                     q.listUdpServicesStmt,
		listUdpServicesByAgentStmt:              q.listUdpServicesByAgentStmt,
		listUdpServicesEnabledStmt:              q.listUdpServicesEnabledStmt,
		listUsersStmt:                           q.listUsersStmt,
		logErrorStmt:                            q.logErrorStmt,
		purgeTraefikInstancesStmt:               q.purgeTraefikInstancesStmt,
		unsetDefaultDNSProviderStmt:             q.unsetDefaultDNSProviderStmt,
		unsetDefaultEntryPointStmt:              q.unsetDefaultEntryPointStmt,
		unsetDefaultHttpMiddlewareStmt:          q.unsetDefaultHttpMiddlewareStmt,
		unsetDefaultTcpMiddlewareStmt:           q.unsetDefaultTcpMiddlewareStmt,
		updateAgentStmt:                         q.updateAgentStmt,
		updateAgentIPStmt:                       q.updateAgentIPStmt,
		updateAgentTokenStmt:                    q.updateAgentTokenStmt,
		updateDnsProviderStmt:                   q.updateDnsProviderStmt,
		updateEntryPointStmt:                    q.updateEntryPointStmt,
		updateHttpMiddlewareStmt:                q.updateHttpMiddlewareStmt,
		updateHttpRouterStmt:                    q.updateHttpRouterStmt,
		updateHttpServersTransportStmt:          q.updateHttpServersTransportStmt,
		updateHttpServiceStmt:                   q.updateHttpServiceStmt,
		updateProfileStmt:                       q.updateProfileStmt,
		updateTcpMiddlewareStmt:                 q.updateTcpMiddlewareStmt,
		updateTcpRouterStmt:                     q.updateTcpRouterStmt,
		updateTcpServersTransportStmt:           q.updateTcpServersTransportStmt,
		updateTcpServiceStmt:                    q.updateTcpServiceStmt,
		updateUdpRouterStmt:                     q.updateUdpRouterStmt,
		updateUdpServiceStmt:                    q.updateUdpServiceStmt,
		updateUserStmt:                          q.updateUserStmt,
		updateUserLastLoginStmt:                 q.updateUserLastLoginStmt,
		updateUserPasswordStmt:                  q.updateUserPasswordStmt,
		updateUserResetTokenStmt:                q.updateUserResetTokenStmt,
		upsertSettingStmt:                       q.upsertSettingStmt,
		upsertTraefikInstanceStmt:               q.upsertTraefikInstanceStmt,
	}
}
