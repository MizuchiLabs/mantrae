// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: http_middlewares.sql

package db

import (
	"context"

	"github.com/mizuchilabs/mantrae/internal/store/schema"
)

const countHttpMiddlewares = `-- name: CountHttpMiddlewares :one
SELECT
  COUNT(*)
FROM
  http_middlewares
`

func (q *Queries) CountHttpMiddlewares(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countHttpMiddlewaresStmt, countHttpMiddlewares)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countHttpMiddlewaresByAgent = `-- name: CountHttpMiddlewaresByAgent :one
SELECT
  COUNT(*)
FROM
  http_middlewares
WHERE
  agent_id = ?
`

func (q *Queries) CountHttpMiddlewaresByAgent(ctx context.Context, agentID *string) (int64, error) {
	row := q.queryRow(ctx, q.countHttpMiddlewaresByAgentStmt, countHttpMiddlewaresByAgent, agentID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countHttpMiddlewaresByProfile = `-- name: CountHttpMiddlewaresByProfile :one
SELECT
  COUNT(*)
FROM
  http_middlewares
WHERE
  profile_id = ?
`

func (q *Queries) CountHttpMiddlewaresByProfile(ctx context.Context, profileID int64) (int64, error) {
	row := q.queryRow(ctx, q.countHttpMiddlewaresByProfileStmt, countHttpMiddlewaresByProfile, profileID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createHttpMiddleware = `-- name: CreateHttpMiddleware :one
INSERT INTO
  http_middlewares (
    profile_id,
    agent_id,
    name,
    config,
    enabled,
    created_at,
    updated_at
  )
VALUES
  (
    ?,
    ?,
    ?,
    ?,
    ?,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
  ) RETURNING id, profile_id, agent_id, name, config, enabled, created_at, updated_at
`

type CreateHttpMiddlewareParams struct {
	ProfileID int64              `json:"profileId"`
	AgentID   *string            `json:"agentId"`
	Name      string             `json:"name"`
	Config    *schema.Middleware `json:"config"`
	Enabled   bool               `json:"enabled"`
}

func (q *Queries) CreateHttpMiddleware(ctx context.Context, arg CreateHttpMiddlewareParams) (HttpMiddleware, error) {
	row := q.queryRow(ctx, q.createHttpMiddlewareStmt, createHttpMiddleware,
		arg.ProfileID,
		arg.AgentID,
		arg.Name,
		arg.Config,
		arg.Enabled,
	)
	var i HttpMiddleware
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.AgentID,
		&i.Name,
		&i.Config,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteHttpMiddleware = `-- name: DeleteHttpMiddleware :exec
DELETE FROM http_middlewares
WHERE
  id = ?
`

func (q *Queries) DeleteHttpMiddleware(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteHttpMiddlewareStmt, deleteHttpMiddleware, id)
	return err
}

const getHttpMiddleware = `-- name: GetHttpMiddleware :one
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at
FROM
  http_middlewares
WHERE
  id = ?
`

func (q *Queries) GetHttpMiddleware(ctx context.Context, id int64) (HttpMiddleware, error) {
	row := q.queryRow(ctx, q.getHttpMiddlewareStmt, getHttpMiddleware, id)
	var i HttpMiddleware
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.AgentID,
		&i.Name,
		&i.Config,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listHttpMiddlewares = `-- name: ListHttpMiddlewares :many
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at
FROM
  http_middlewares
WHERE
  profile_id = ?
ORDER BY
  name
LIMIT
  ?
OFFSET
  ?
`

type ListHttpMiddlewaresParams struct {
	ProfileID int64 `json:"profileId"`
	Limit     int64 `json:"limit"`
	Offset    int64 `json:"offset"`
}

func (q *Queries) ListHttpMiddlewares(ctx context.Context, arg ListHttpMiddlewaresParams) ([]HttpMiddleware, error) {
	rows, err := q.query(ctx, q.listHttpMiddlewaresStmt, listHttpMiddlewares, arg.ProfileID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HttpMiddleware
	for rows.Next() {
		var i HttpMiddleware
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.AgentID,
			&i.Name,
			&i.Config,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listHttpMiddlewaresByAgent = `-- name: ListHttpMiddlewaresByAgent :many
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at
FROM
  http_middlewares
WHERE
  agent_id = ?
ORDER BY
  name
LIMIT
  ?
OFFSET
  ?
`

type ListHttpMiddlewaresByAgentParams struct {
	AgentID *string `json:"agentId"`
	Limit   int64   `json:"limit"`
	Offset  int64   `json:"offset"`
}

func (q *Queries) ListHttpMiddlewaresByAgent(ctx context.Context, arg ListHttpMiddlewaresByAgentParams) ([]HttpMiddleware, error) {
	rows, err := q.query(ctx, q.listHttpMiddlewaresByAgentStmt, listHttpMiddlewaresByAgent, arg.AgentID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HttpMiddleware
	for rows.Next() {
		var i HttpMiddleware
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.AgentID,
			&i.Name,
			&i.Config,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHttpMiddleware = `-- name: UpdateHttpMiddleware :one
UPDATE http_middlewares
SET
  name = ?,
  config = ?,
  enabled = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE
  id = ? RETURNING id, profile_id, agent_id, name, config, enabled, created_at, updated_at
`

type UpdateHttpMiddlewareParams struct {
	Name    string             `json:"name"`
	Config  *schema.Middleware `json:"config"`
	Enabled bool               `json:"enabled"`
	ID      int64              `json:"id"`
}

func (q *Queries) UpdateHttpMiddleware(ctx context.Context, arg UpdateHttpMiddlewareParams) (HttpMiddleware, error) {
	row := q.queryRow(ctx, q.updateHttpMiddlewareStmt, updateHttpMiddleware,
		arg.Name,
		arg.Config,
		arg.Enabled,
		arg.ID,
	)
	var i HttpMiddleware
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.AgentID,
		&i.Name,
		&i.Config,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
