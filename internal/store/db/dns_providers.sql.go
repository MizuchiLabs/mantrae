// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: dns_providers.sql

package db

import (
	"context"

	"github.com/mizuchilabs/mantrae/internal/store/schema"
)

const countDnsProviders = `-- name: CountDnsProviders :one
SELECT
  COUNT(*)
FROM
  dns_providers
`

func (q *Queries) CountDnsProviders(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countDnsProvidersStmt, countDnsProviders)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createDnsProvider = `-- name: CreateDnsProvider :one
INSERT INTO
  dns_providers (
    name,
    type,
    config,
    is_active,
    created_at,
    updated_at
  )
VALUES
  (?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP) RETURNING id, name, type, config, is_active, created_at, updated_at
`

type CreateDnsProviderParams struct {
	Name     string                    `json:"name"`
	Type     string                    `json:"type"`
	Config   *schema.DNSProviderConfig `json:"config"`
	IsActive bool                      `json:"isActive"`
}

func (q *Queries) CreateDnsProvider(ctx context.Context, arg CreateDnsProviderParams) (DnsProvider, error) {
	row := q.queryRow(ctx, q.createDnsProviderStmt, createDnsProvider,
		arg.Name,
		arg.Type,
		arg.Config,
		arg.IsActive,
	)
	var i DnsProvider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Config,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDnsProvider = `-- name: DeleteDnsProvider :exec
DELETE FROM dns_providers
WHERE
  id = ?
`

func (q *Queries) DeleteDnsProvider(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteDnsProviderStmt, deleteDnsProvider, id)
	return err
}

const getDnsProvider = `-- name: GetDnsProvider :one
SELECT
  id, name, type, config, is_active, created_at, updated_at
FROM
  dns_providers
WHERE
  id = ?
`

func (q *Queries) GetDnsProvider(ctx context.Context, id int64) (DnsProvider, error) {
	row := q.queryRow(ctx, q.getDnsProviderStmt, getDnsProvider, id)
	var i DnsProvider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Config,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDnsProviderByName = `-- name: GetDnsProviderByName :one
SELECT
  id, name, type, config, is_active, created_at, updated_at
FROM
  dns_providers
WHERE
  name = ?
`

func (q *Queries) GetDnsProviderByName(ctx context.Context, name string) (DnsProvider, error) {
	row := q.queryRow(ctx, q.getDnsProviderByNameStmt, getDnsProviderByName, name)
	var i DnsProvider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Config,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDnsProviders = `-- name: ListDnsProviders :many
SELECT
  id, name, type, config, is_active, created_at, updated_at
FROM
  dns_providers
ORDER BY
  name
LIMIT
  ?
OFFSET
  ?
`

type ListDnsProvidersParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListDnsProviders(ctx context.Context, arg ListDnsProvidersParams) ([]DnsProvider, error) {
	rows, err := q.query(ctx, q.listDnsProvidersStmt, listDnsProviders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DnsProvider
	for rows.Next() {
		var i DnsProvider
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Config,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDnsProvider = `-- name: UpdateDnsProvider :one
UPDATE dns_providers
SET
  name = ?,
  type = ?,
  config = ?,
  is_active = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE
  id = ? RETURNING id, name, type, config, is_active, created_at, updated_at
`

type UpdateDnsProviderParams struct {
	Name     string                    `json:"name"`
	Type     string                    `json:"type"`
	Config   *schema.DNSProviderConfig `json:"config"`
	IsActive bool                      `json:"isActive"`
	ID       int64                     `json:"id"`
}

func (q *Queries) UpdateDnsProvider(ctx context.Context, arg UpdateDnsProviderParams) (DnsProvider, error) {
	row := q.queryRow(ctx, q.updateDnsProviderStmt, updateDnsProvider,
		arg.Name,
		arg.Type,
		arg.Config,
		arg.IsActive,
		arg.ID,
	)
	var i DnsProvider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Config,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
