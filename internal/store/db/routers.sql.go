// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: routers.sql

package db

import (
	"context"
	"time"

	"github.com/mizuchilabs/mantrae/internal/store/schema"
)

const countRoutersByAgent = `-- name: CountRoutersByAgent :one
SELECT
  COUNT(*)
FROM
  http_routers
WHERE
  http_routers.agent_id = ?
UNION ALL
SELECT
  COUNT(*)
FROM
  tcp_routers
WHERE
  tcp_routers.agent_id = ?
UNION ALL
SELECT
  COUNT(*)
FROM
  udp_routers
WHERE
  udp_routers.agent_id = ?
`

type CountRoutersByAgentParams struct {
	AgentID   *string `json:"agentId"`
	AgentID_2 *string `json:"agentId2"`
	AgentID_3 *string `json:"agentId3"`
}

func (q *Queries) CountRoutersByAgent(ctx context.Context, arg CountRoutersByAgentParams) (int64, error) {
	row := q.queryRow(ctx, q.countRoutersByAgentStmt, countRoutersByAgent, arg.AgentID, arg.AgentID_2, arg.AgentID_3)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countRoutersByProfile = `-- name: CountRoutersByProfile :one
SELECT
  COUNT(*)
FROM
  http_routers
WHERE
  http_routers.profile_id = ?
UNION ALL
SELECT
  COUNT(*)
FROM
  tcp_routers
WHERE
  tcp_routers.profile_id = ?
UNION ALL
SELECT
  COUNT(*)
FROM
  udp_routers
WHERE
  udp_routers.profile_id = ?
`

type CountRoutersByProfileParams struct {
	ProfileID   int64 `json:"profileId"`
	ProfileID_2 int64 `json:"profileId2"`
	ProfileID_3 int64 `json:"profileId3"`
}

func (q *Queries) CountRoutersByProfile(ctx context.Context, arg CountRoutersByProfileParams) (int64, error) {
	row := q.queryRow(ctx, q.countRoutersByProfileStmt, countRoutersByProfile, arg.ProfileID, arg.ProfileID_2, arg.ProfileID_3)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listRoutersByAgent = `-- name: ListRoutersByAgent :many
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at,
  'http' AS type
FROM
  http_routers
WHERE
  http_routers.agent_id = ?
UNION ALL
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at,
  'tcp' AS type
FROM
  tcp_routers
WHERE
  tcp_routers.agent_id = ?
UNION ALL
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at,
  'udp' AS type
FROM
  udp_routers
WHERE
  udp_routers.agent_id = ?
ORDER BY
  name
LIMIT
  ?
OFFSET
  ?
`

type ListRoutersByAgentParams struct {
	AgentID   *string `json:"agentId"`
	AgentID_2 *string `json:"agentId2"`
	AgentID_3 *string `json:"agentId3"`
	Limit     int64   `json:"limit"`
	Offset    int64   `json:"offset"`
}

type ListRoutersByAgentRow struct {
	ID        int64          `json:"id"`
	ProfileID int64          `json:"profileId"`
	AgentID   *string        `json:"agentId"`
	Name      string         `json:"name"`
	Config    *schema.Router `json:"config"`
	Enabled   bool           `json:"enabled"`
	CreatedAt *time.Time     `json:"createdAt"`
	UpdatedAt *time.Time     `json:"updatedAt"`
	Type      string         `json:"type"`
}

func (q *Queries) ListRoutersByAgent(ctx context.Context, arg ListRoutersByAgentParams) ([]ListRoutersByAgentRow, error) {
	rows, err := q.query(ctx, q.listRoutersByAgentStmt, listRoutersByAgent,
		arg.AgentID,
		arg.AgentID_2,
		arg.AgentID_3,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRoutersByAgentRow
	for rows.Next() {
		var i ListRoutersByAgentRow
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.AgentID,
			&i.Name,
			&i.Config,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoutersByProfile = `-- name: ListRoutersByProfile :many
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at,
  'http' AS type
FROM
  http_routers
WHERE
  http_routers.profile_id = ?
UNION ALL
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at,
  'tcp' AS type
FROM
  tcp_routers
WHERE
  tcp_routers.profile_id = ?
UNION ALL
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at,
  'udp' AS type
FROM
  udp_routers
WHERE
  udp_routers.profile_id = ?
ORDER BY
  name
LIMIT
  ?
OFFSET
  ?
`

type ListRoutersByProfileParams struct {
	ProfileID   int64 `json:"profileId"`
	ProfileID_2 int64 `json:"profileId2"`
	ProfileID_3 int64 `json:"profileId3"`
	Limit       int64 `json:"limit"`
	Offset      int64 `json:"offset"`
}

type ListRoutersByProfileRow struct {
	ID        int64          `json:"id"`
	ProfileID int64          `json:"profileId"`
	AgentID   *string        `json:"agentId"`
	Name      string         `json:"name"`
	Config    *schema.Router `json:"config"`
	Enabled   bool           `json:"enabled"`
	CreatedAt *time.Time     `json:"createdAt"`
	UpdatedAt *time.Time     `json:"updatedAt"`
	Type      string         `json:"type"`
}

func (q *Queries) ListRoutersByProfile(ctx context.Context, arg ListRoutersByProfileParams) ([]ListRoutersByProfileRow, error) {
	rows, err := q.query(ctx, q.listRoutersByProfileStmt, listRoutersByProfile,
		arg.ProfileID,
		arg.ProfileID_2,
		arg.ProfileID_3,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRoutersByProfileRow
	for rows.Next() {
		var i ListRoutersByProfileRow
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.AgentID,
			&i.Name,
			&i.Config,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
