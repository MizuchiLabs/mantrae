// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: middlewares.sql

package db

import (
	"context"
	"time"

	"github.com/mizuchilabs/mantrae/internal/store/schema"
)

const countMiddlewaresByAgent = `-- name: CountMiddlewaresByAgent :one
SELECT
  COUNT(*)
FROM
  http_middlewares
WHERE
  http_middlewares.agent_id = ?
UNION ALL
SELECT
  COUNT(*)
FROM
  tcp_middlewares
WHERE
  tcp_middlewares.agent_id = ?
`

type CountMiddlewaresByAgentParams struct {
	AgentID   *string `json:"agentId"`
	AgentID_2 *string `json:"agentId2"`
}

func (q *Queries) CountMiddlewaresByAgent(ctx context.Context, arg CountMiddlewaresByAgentParams) (int64, error) {
	row := q.queryRow(ctx, q.countMiddlewaresByAgentStmt, countMiddlewaresByAgent, arg.AgentID, arg.AgentID_2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countMiddlewaresByProfile = `-- name: CountMiddlewaresByProfile :one
SELECT
  COUNT(*)
FROM
  http_middlewares
WHERE
  http_middlewares.profile_id = ?
UNION ALL
SELECT
  COUNT(*)
FROM
  tcp_middlewares
WHERE
  tcp_middlewares.profile_id = ?
`

type CountMiddlewaresByProfileParams struct {
	ProfileID   int64 `json:"profileId"`
	ProfileID_2 int64 `json:"profileId2"`
}

func (q *Queries) CountMiddlewaresByProfile(ctx context.Context, arg CountMiddlewaresByProfileParams) (int64, error) {
	row := q.queryRow(ctx, q.countMiddlewaresByProfileStmt, countMiddlewaresByProfile, arg.ProfileID, arg.ProfileID_2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listMiddlewaresByAgent = `-- name: ListMiddlewaresByAgent :many
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at,
  'http' AS type
FROM
  http_middlewares
WHERE
  http_middlewares.agent_id = ?
UNION ALL
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at,
  'tcp' AS type
FROM
  tcp_middlewares
WHERE
  tcp_middlewares.agent_id = ?
ORDER BY
  name
LIMIT
  ?
OFFSET
  ?
`

type ListMiddlewaresByAgentParams struct {
	AgentID   *string `json:"agentId"`
	AgentID_2 *string `json:"agentId2"`
	Limit     int64   `json:"limit"`
	Offset    int64   `json:"offset"`
}

type ListMiddlewaresByAgentRow struct {
	ID        int64              `json:"id"`
	ProfileID int64              `json:"profileId"`
	AgentID   *string            `json:"agentId"`
	Name      string             `json:"name"`
	Config    *schema.Middleware `json:"config"`
	Enabled   bool               `json:"enabled"`
	CreatedAt *time.Time         `json:"createdAt"`
	UpdatedAt *time.Time         `json:"updatedAt"`
	Type      string             `json:"type"`
}

func (q *Queries) ListMiddlewaresByAgent(ctx context.Context, arg ListMiddlewaresByAgentParams) ([]ListMiddlewaresByAgentRow, error) {
	rows, err := q.query(ctx, q.listMiddlewaresByAgentStmt, listMiddlewaresByAgent,
		arg.AgentID,
		arg.AgentID_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMiddlewaresByAgentRow
	for rows.Next() {
		var i ListMiddlewaresByAgentRow
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.AgentID,
			&i.Name,
			&i.Config,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMiddlewaresByProfile = `-- name: ListMiddlewaresByProfile :many
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at,
  'http' AS type
FROM
  http_middlewares
WHERE
  http_middlewares.profile_id = ?
UNION ALL
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at,
  'tcp' AS type
FROM
  tcp_middlewares
WHERE
  tcp_middlewares.profile_id = ?
ORDER BY
  name
LIMIT
  ?
OFFSET
  ?
`

type ListMiddlewaresByProfileParams struct {
	ProfileID   int64 `json:"profileId"`
	ProfileID_2 int64 `json:"profileId2"`
	Limit       int64 `json:"limit"`
	Offset      int64 `json:"offset"`
}

type ListMiddlewaresByProfileRow struct {
	ID        int64              `json:"id"`
	ProfileID int64              `json:"profileId"`
	AgentID   *string            `json:"agentId"`
	Name      string             `json:"name"`
	Config    *schema.Middleware `json:"config"`
	Enabled   bool               `json:"enabled"`
	CreatedAt *time.Time         `json:"createdAt"`
	UpdatedAt *time.Time         `json:"updatedAt"`
	Type      string             `json:"type"`
}

func (q *Queries) ListMiddlewaresByProfile(ctx context.Context, arg ListMiddlewaresByProfileParams) ([]ListMiddlewaresByProfileRow, error) {
	rows, err := q.query(ctx, q.listMiddlewaresByProfileStmt, listMiddlewaresByProfile,
		arg.ProfileID,
		arg.ProfileID_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMiddlewaresByProfileRow
	for rows.Next() {
		var i ListMiddlewaresByProfileRow
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.AgentID,
			&i.Name,
			&i.Config,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
