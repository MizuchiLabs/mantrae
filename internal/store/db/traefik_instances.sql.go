// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: traefik_instances.sql

package db

import (
	"context"

	"github.com/mizuchilabs/mantrae/internal/store/schema"
)

const countTraefikInstances = `-- name: CountTraefikInstances :one
SELECT
  COUNT(*)
FROM
  traefik_instances
`

func (q *Queries) CountTraefikInstances(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countTraefikInstancesStmt, countTraefikInstances)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTraefikInstance = `-- name: CreateTraefikInstance :one
INSERT INTO
  traefik_instances (
    profile_id,
    url,
    username,
    password,
    tls,
    created_at,
    updated_at
  )
VALUES
  (
    ?,
    ?,
    ?,
    ?,
    ?,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
  ) RETURNING id, profile_id, entrypoints, overview, config, version, url, username, password, tls, created_at, updated_at
`

type CreateTraefikInstanceParams struct {
	ProfileID int64   `json:"profileId"`
	Url       string  `json:"url"`
	Username  *string `json:"username"`
	Password  *string `json:"password"`
	Tls       bool    `json:"tls"`
}

func (q *Queries) CreateTraefikInstance(ctx context.Context, arg CreateTraefikInstanceParams) (TraefikInstance, error) {
	row := q.queryRow(ctx, q.createTraefikInstanceStmt, createTraefikInstance,
		arg.ProfileID,
		arg.Url,
		arg.Username,
		arg.Password,
		arg.Tls,
	)
	var i TraefikInstance
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.Entrypoints,
		&i.Overview,
		&i.Config,
		&i.Version,
		&i.Url,
		&i.Username,
		&i.Password,
		&i.Tls,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTraefikInstance = `-- name: DeleteTraefikInstance :exec
DELETE FROM traefik_instances
WHERE
  id = ?
`

func (q *Queries) DeleteTraefikInstance(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteTraefikInstanceStmt, deleteTraefikInstance, id)
	return err
}

const getTraefikInstance = `-- name: GetTraefikInstance :one
SELECT
  id, profile_id, entrypoints, overview, config, version, url, username, password, tls, created_at, updated_at
FROM
  traefik_instances
WHERE
  id = ?
`

func (q *Queries) GetTraefikInstance(ctx context.Context, id int64) (TraefikInstance, error) {
	row := q.queryRow(ctx, q.getTraefikInstanceStmt, getTraefikInstance, id)
	var i TraefikInstance
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.Entrypoints,
		&i.Overview,
		&i.Config,
		&i.Version,
		&i.Url,
		&i.Username,
		&i.Password,
		&i.Tls,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTraefikInstances = `-- name: ListTraefikInstances :many
SELECT
  id, profile_id, entrypoints, overview, config, version, url, username, password, tls, created_at, updated_at
FROM
  traefik_instances
WHERE
  profile_id = ?
ORDER BY
  created_at DESC
LIMIT
  ?
OFFSET
  ?
`

type ListTraefikInstancesParams struct {
	ProfileID int64 `json:"profileId"`
	Limit     int64 `json:"limit"`
	Offset    int64 `json:"offset"`
}

func (q *Queries) ListTraefikInstances(ctx context.Context, arg ListTraefikInstancesParams) ([]TraefikInstance, error) {
	rows, err := q.query(ctx, q.listTraefikInstancesStmt, listTraefikInstances, arg.ProfileID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TraefikInstance
	for rows.Next() {
		var i TraefikInstance
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.Entrypoints,
			&i.Overview,
			&i.Config,
			&i.Version,
			&i.Url,
			&i.Username,
			&i.Password,
			&i.Tls,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTraefikInstance = `-- name: UpdateTraefikInstance :one
UPDATE traefik_instances
SET
  url = ?,
  username = ?,
  password = ?,
  tls = ?,
  entrypoints = ?,
  overview = ?,
  config = ?,
  version = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE
  id = ? RETURNING id, profile_id, entrypoints, overview, config, version, url, username, password, tls, created_at, updated_at
`

type UpdateTraefikInstanceParams struct {
	Url         string                `json:"url"`
	Username    *string               `json:"username"`
	Password    *string               `json:"password"`
	Tls         bool                  `json:"tls"`
	Entrypoints *schema.EntryPoints   `json:"entrypoints"`
	Overview    *schema.Overview      `json:"overview"`
	Config      *schema.Configuration `json:"config"`
	Version     *string               `json:"version"`
	ID          int64                 `json:"id"`
}

func (q *Queries) UpdateTraefikInstance(ctx context.Context, arg UpdateTraefikInstanceParams) (TraefikInstance, error) {
	row := q.queryRow(ctx, q.updateTraefikInstanceStmt, updateTraefikInstance,
		arg.Url,
		arg.Username,
		arg.Password,
		arg.Tls,
		arg.Entrypoints,
		arg.Overview,
		arg.Config,
		arg.Version,
		arg.ID,
	)
	var i TraefikInstance
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.Entrypoints,
		&i.Overview,
		&i.Config,
		&i.Version,
		&i.Url,
		&i.Username,
		&i.Password,
		&i.Tls,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
