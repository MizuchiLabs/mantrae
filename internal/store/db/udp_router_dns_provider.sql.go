// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: udp_router_dns_provider.sql

package db

import (
	"context"
)

const createUdpRouterDNSProvider = `-- name: CreateUdpRouterDNSProvider :exec
INSERT
OR IGNORE INTO udp_router_dns_providers (udp_router_id, dns_provider_id)
VALUES
  (?, ?)
`

type CreateUdpRouterDNSProviderParams struct {
	UdpRouterID   int64 `json:"udpRouterId"`
	DnsProviderID int64 `json:"dnsProviderId"`
}

func (q *Queries) CreateUdpRouterDNSProvider(ctx context.Context, arg CreateUdpRouterDNSProviderParams) error {
	_, err := q.exec(ctx, q.createUdpRouterDNSProviderStmt, createUdpRouterDNSProvider, arg.UdpRouterID, arg.DnsProviderID)
	return err
}

const deleteUdpRouterDNSProvider = `-- name: DeleteUdpRouterDNSProvider :exec
DELETE FROM udp_router_dns_providers
WHERE
  udp_router_id = ?
  AND dns_provider_id = ?
`

type DeleteUdpRouterDNSProviderParams struct {
	UdpRouterID   int64 `json:"udpRouterId"`
	DnsProviderID int64 `json:"dnsProviderId"`
}

func (q *Queries) DeleteUdpRouterDNSProvider(ctx context.Context, arg DeleteUdpRouterDNSProviderParams) error {
	_, err := q.exec(ctx, q.deleteUdpRouterDNSProviderStmt, deleteUdpRouterDNSProvider, arg.UdpRouterID, arg.DnsProviderID)
	return err
}

const getUdpRouterDNSProvider = `-- name: GetUdpRouterDNSProvider :one
SELECT
  udp_router_id, dns_provider_id
FROM
  udp_router_dns_providers
WHERE
  udp_router_id = ?
  AND dns_provider_id = ?
`

type GetUdpRouterDNSProviderParams struct {
	UdpRouterID   int64 `json:"udpRouterId"`
	DnsProviderID int64 `json:"dnsProviderId"`
}

func (q *Queries) GetUdpRouterDNSProvider(ctx context.Context, arg GetUdpRouterDNSProviderParams) (UdpRouterDnsProvider, error) {
	row := q.queryRow(ctx, q.getUdpRouterDNSProviderStmt, getUdpRouterDNSProvider, arg.UdpRouterID, arg.DnsProviderID)
	var i UdpRouterDnsProvider
	err := row.Scan(&i.UdpRouterID, &i.DnsProviderID)
	return i, err
}

const listUdpRouterDNSProvider = `-- name: ListUdpRouterDNSProvider :many
SELECT
  udp_router_id, dns_provider_id
FROM
  udp_router_dns_providers
WHERE
  udp_router_id = ?
`

func (q *Queries) ListUdpRouterDNSProvider(ctx context.Context, udpRouterID int64) ([]UdpRouterDnsProvider, error) {
	rows, err := q.query(ctx, q.listUdpRouterDNSProviderStmt, listUdpRouterDNSProvider, udpRouterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UdpRouterDnsProvider
	for rows.Next() {
		var i UdpRouterDnsProvider
		if err := rows.Scan(&i.UdpRouterID, &i.DnsProviderID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
