// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tcp_middlewares.sql

package db

import (
	"context"

	"github.com/traefik/traefik/v3/pkg/config/dynamic"
)

const countTcpMiddlewares = `-- name: CountTcpMiddlewares :one
SELECT
  COUNT(*)
FROM
  tcp_middlewares
`

func (q *Queries) CountTcpMiddlewares(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countTcpMiddlewaresStmt, countTcpMiddlewares)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTcpMiddleware = `-- name: CreateTcpMiddleware :one
INSERT INTO
  tcp_middlewares (
    profile_id,
    agent_id,
    name,
    config,
    enabled,
    created_at,
    updated_at
  )
VALUES
  (
    ?,
    ?,
    ?,
    ?,
    ?,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
  ) RETURNING id, profile_id, agent_id, name, config, enabled, created_at, updated_at
`

type CreateTcpMiddlewareParams struct {
	ProfileID int64                  `json:"profileId"`
	AgentID   *string                `json:"agentId"`
	Name      string                 `json:"name"`
	Config    *dynamic.TCPMiddleware `json:"config"`
	Enabled   bool                   `json:"enabled"`
}

func (q *Queries) CreateTcpMiddleware(ctx context.Context, arg CreateTcpMiddlewareParams) (TcpMiddleware, error) {
	row := q.queryRow(ctx, q.createTcpMiddlewareStmt, createTcpMiddleware,
		arg.ProfileID,
		arg.AgentID,
		arg.Name,
		arg.Config,
		arg.Enabled,
	)
	var i TcpMiddleware
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.AgentID,
		&i.Name,
		&i.Config,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTcpMiddleware = `-- name: DeleteTcpMiddleware :exec
DELETE FROM tcp_middlewares
WHERE
  id = ?
`

func (q *Queries) DeleteTcpMiddleware(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteTcpMiddlewareStmt, deleteTcpMiddleware, id)
	return err
}

const getTcpMiddleware = `-- name: GetTcpMiddleware :one
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at
FROM
  tcp_middlewares
WHERE
  id = ?
`

func (q *Queries) GetTcpMiddleware(ctx context.Context, id int64) (TcpMiddleware, error) {
	row := q.queryRow(ctx, q.getTcpMiddlewareStmt, getTcpMiddleware, id)
	var i TcpMiddleware
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.AgentID,
		&i.Name,
		&i.Config,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTcpMiddlewaresByProfile = `-- name: GetTcpMiddlewaresByProfile :many
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at
FROM
  tcp_middlewares
WHERE
  profile_id = ?
`

func (q *Queries) GetTcpMiddlewaresByProfile(ctx context.Context, profileID int64) ([]TcpMiddleware, error) {
	rows, err := q.query(ctx, q.getTcpMiddlewaresByProfileStmt, getTcpMiddlewaresByProfile, profileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TcpMiddleware
	for rows.Next() {
		var i TcpMiddleware
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.AgentID,
			&i.Name,
			&i.Config,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTcpMiddlewares = `-- name: ListTcpMiddlewares :many
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at
FROM
  tcp_middlewares
ORDER BY
  name
LIMIT
  ?
OFFSET
  ?
`

type ListTcpMiddlewaresParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListTcpMiddlewares(ctx context.Context, arg ListTcpMiddlewaresParams) ([]TcpMiddleware, error) {
	rows, err := q.query(ctx, q.listTcpMiddlewaresStmt, listTcpMiddlewares, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TcpMiddleware
	for rows.Next() {
		var i TcpMiddleware
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.AgentID,
			&i.Name,
			&i.Config,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTcpMiddleware = `-- name: UpdateTcpMiddleware :one
UPDATE tcp_middlewares
SET
  name = ?,
  config = ?,
  enabled = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE
  id = ? RETURNING id, profile_id, agent_id, name, config, enabled, created_at, updated_at
`

type UpdateTcpMiddlewareParams struct {
	Name    string                 `json:"name"`
	Config  *dynamic.TCPMiddleware `json:"config"`
	Enabled bool                   `json:"enabled"`
	ID      int64                  `json:"id"`
}

func (q *Queries) UpdateTcpMiddleware(ctx context.Context, arg UpdateTcpMiddlewareParams) (TcpMiddleware, error) {
	row := q.queryRow(ctx, q.updateTcpMiddlewareStmt, updateTcpMiddleware,
		arg.Name,
		arg.Config,
		arg.Enabled,
		arg.ID,
	)
	var i TcpMiddleware
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.AgentID,
		&i.Name,
		&i.Config,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
