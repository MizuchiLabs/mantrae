// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tcp_middlewares.sql

package db

import (
	"context"

	"github.com/mizuchilabs/mantrae/internal/store/schema"
)

const countTcpMiddlewares = `-- name: CountTcpMiddlewares :one
SELECT
  COUNT(*)
FROM
  tcp_middlewares
`

func (q *Queries) CountTcpMiddlewares(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countTcpMiddlewaresStmt, countTcpMiddlewares)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countTcpMiddlewaresByAgent = `-- name: CountTcpMiddlewaresByAgent :one
SELECT
  COUNT(*)
FROM
  tcp_middlewares
WHERE
  agent_id = ?
`

func (q *Queries) CountTcpMiddlewaresByAgent(ctx context.Context, agentID *string) (int64, error) {
	row := q.queryRow(ctx, q.countTcpMiddlewaresByAgentStmt, countTcpMiddlewaresByAgent, agentID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countTcpMiddlewaresByProfile = `-- name: CountTcpMiddlewaresByProfile :one
SELECT
  COUNT(*)
FROM
  tcp_middlewares
WHERE
  profile_id = ?
`

func (q *Queries) CountTcpMiddlewaresByProfile(ctx context.Context, profileID int64) (int64, error) {
	row := q.queryRow(ctx, q.countTcpMiddlewaresByProfileStmt, countTcpMiddlewaresByProfile, profileID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTcpMiddleware = `-- name: CreateTcpMiddleware :one
INSERT INTO
  tcp_middlewares (
    profile_id,
    agent_id,
    name,
    config,
    is_default,
    created_at,
    updated_at
  )
VALUES
  (
    ?,
    ?,
    ?,
    ?,
    ?,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
  ) RETURNING id, profile_id, agent_id, name, config, enabled, is_default, created_at, updated_at
`

type CreateTcpMiddlewareParams struct {
	ProfileID int64                 `json:"profileId"`
	AgentID   *string               `json:"agentId"`
	Name      string                `json:"name"`
	Config    *schema.TCPMiddleware `json:"config"`
	IsDefault bool                  `json:"isDefault"`
}

func (q *Queries) CreateTcpMiddleware(ctx context.Context, arg CreateTcpMiddlewareParams) (TcpMiddleware, error) {
	row := q.queryRow(ctx, q.createTcpMiddlewareStmt, createTcpMiddleware,
		arg.ProfileID,
		arg.AgentID,
		arg.Name,
		arg.Config,
		arg.IsDefault,
	)
	var i TcpMiddleware
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.AgentID,
		&i.Name,
		&i.Config,
		&i.Enabled,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTcpMiddleware = `-- name: DeleteTcpMiddleware :exec
DELETE FROM tcp_middlewares
WHERE
  id = ?
`

func (q *Queries) DeleteTcpMiddleware(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteTcpMiddlewareStmt, deleteTcpMiddleware, id)
	return err
}

const getTcpMiddleware = `-- name: GetTcpMiddleware :one
SELECT
  id, profile_id, agent_id, name, config, enabled, is_default, created_at, updated_at
FROM
  tcp_middlewares
WHERE
  id = ?
`

func (q *Queries) GetTcpMiddleware(ctx context.Context, id int64) (TcpMiddleware, error) {
	row := q.queryRow(ctx, q.getTcpMiddlewareStmt, getTcpMiddleware, id)
	var i TcpMiddleware
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.AgentID,
		&i.Name,
		&i.Config,
		&i.Enabled,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTcpMiddlewares = `-- name: ListTcpMiddlewares :many
SELECT
  id, profile_id, agent_id, name, config, enabled, is_default, created_at, updated_at
FROM
  tcp_middlewares
WHERE
  profile_id = ?
ORDER BY
  name
LIMIT
  ?
OFFSET
  ?
`

type ListTcpMiddlewaresParams struct {
	ProfileID int64 `json:"profileId"`
	Limit     int64 `json:"limit"`
	Offset    int64 `json:"offset"`
}

func (q *Queries) ListTcpMiddlewares(ctx context.Context, arg ListTcpMiddlewaresParams) ([]TcpMiddleware, error) {
	rows, err := q.query(ctx, q.listTcpMiddlewaresStmt, listTcpMiddlewares, arg.ProfileID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TcpMiddleware
	for rows.Next() {
		var i TcpMiddleware
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.AgentID,
			&i.Name,
			&i.Config,
			&i.Enabled,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTcpMiddlewaresByAgent = `-- name: ListTcpMiddlewaresByAgent :many
SELECT
  id, profile_id, agent_id, name, config, enabled, is_default, created_at, updated_at
FROM
  tcp_middlewares
WHERE
  agent_id = ?
ORDER BY
  name
LIMIT
  ?
OFFSET
  ?
`

type ListTcpMiddlewaresByAgentParams struct {
	AgentID *string `json:"agentId"`
	Limit   int64   `json:"limit"`
	Offset  int64   `json:"offset"`
}

func (q *Queries) ListTcpMiddlewaresByAgent(ctx context.Context, arg ListTcpMiddlewaresByAgentParams) ([]TcpMiddleware, error) {
	rows, err := q.query(ctx, q.listTcpMiddlewaresByAgentStmt, listTcpMiddlewaresByAgent, arg.AgentID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TcpMiddleware
	for rows.Next() {
		var i TcpMiddleware
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.AgentID,
			&i.Name,
			&i.Config,
			&i.Enabled,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTcpMiddlewaresEnabled = `-- name: ListTcpMiddlewaresEnabled :many
SELECT
  id, profile_id, agent_id, name, config, enabled, is_default, created_at, updated_at
FROM
  tcp_middlewares
WHERE
  profile_id = ?
  AND enabled = TRUE
ORDER BY
  name
LIMIT
  ?
OFFSET
  ?
`

type ListTcpMiddlewaresEnabledParams struct {
	ProfileID int64 `json:"profileId"`
	Limit     int64 `json:"limit"`
	Offset    int64 `json:"offset"`
}

func (q *Queries) ListTcpMiddlewaresEnabled(ctx context.Context, arg ListTcpMiddlewaresEnabledParams) ([]TcpMiddleware, error) {
	rows, err := q.query(ctx, q.listTcpMiddlewaresEnabledStmt, listTcpMiddlewaresEnabled, arg.ProfileID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TcpMiddleware
	for rows.Next() {
		var i TcpMiddleware
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.AgentID,
			&i.Name,
			&i.Config,
			&i.Enabled,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unsetDefaultTcpMiddleware = `-- name: UnsetDefaultTcpMiddleware :exec
UPDATE tcp_middlewares
SET
  is_default = FALSE
WHERE
  is_default = TRUE
`

func (q *Queries) UnsetDefaultTcpMiddleware(ctx context.Context) error {
	_, err := q.exec(ctx, q.unsetDefaultTcpMiddlewareStmt, unsetDefaultTcpMiddleware)
	return err
}

const updateTcpMiddleware = `-- name: UpdateTcpMiddleware :one
UPDATE tcp_middlewares
SET
  name = ?,
  config = ?,
  enabled = ?,
  is_default = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE
  id = ? RETURNING id, profile_id, agent_id, name, config, enabled, is_default, created_at, updated_at
`

type UpdateTcpMiddlewareParams struct {
	Name      string                `json:"name"`
	Config    *schema.TCPMiddleware `json:"config"`
	Enabled   bool                  `json:"enabled"`
	IsDefault bool                  `json:"isDefault"`
	ID        int64                 `json:"id"`
}

func (q *Queries) UpdateTcpMiddleware(ctx context.Context, arg UpdateTcpMiddlewareParams) (TcpMiddleware, error) {
	row := q.queryRow(ctx, q.updateTcpMiddlewareStmt, updateTcpMiddleware,
		arg.Name,
		arg.Config,
		arg.Enabled,
		arg.IsDefault,
		arg.ID,
	)
	var i TcpMiddleware
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.AgentID,
		&i.Name,
		&i.Config,
		&i.Enabled,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
