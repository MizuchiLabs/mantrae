// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: services.sql

package db

import (
	"context"
	"time"

	"github.com/mizuchilabs/mantrae/internal/store/schema"
)

const countServicesByAgent = `-- name: CountServicesByAgent :one
SELECT
  COUNT(*)
FROM
  http_services
WHERE
  http_services.agent_id = ?
UNION ALL
SELECT
  COUNT(*)
FROM
  tcp_services
WHERE
  tcp_services.agent_id = ?
UNION ALL
SELECT
  COUNT(*)
FROM
  udp_services
WHERE
  udp_services.agent_id = ?
`

type CountServicesByAgentParams struct {
	AgentID   *string `json:"agentId"`
	AgentID_2 *string `json:"agentId2"`
	AgentID_3 *string `json:"agentId3"`
}

func (q *Queries) CountServicesByAgent(ctx context.Context, arg CountServicesByAgentParams) (int64, error) {
	row := q.queryRow(ctx, q.countServicesByAgentStmt, countServicesByAgent, arg.AgentID, arg.AgentID_2, arg.AgentID_3)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countServicesByProfile = `-- name: CountServicesByProfile :one
SELECT
  COUNT(*)
FROM
  http_services
WHERE
  http_services.profile_id = ?
UNION ALL
SELECT
  COUNT(*)
FROM
  tcp_services
WHERE
  tcp_services.profile_id = ?
UNION ALL
SELECT
  COUNT(*)
FROM
  udp_services
WHERE
  udp_services.profile_id = ?
`

type CountServicesByProfileParams struct {
	ProfileID   int64 `json:"profileId"`
	ProfileID_2 int64 `json:"profileId2"`
	ProfileID_3 int64 `json:"profileId3"`
}

func (q *Queries) CountServicesByProfile(ctx context.Context, arg CountServicesByProfileParams) (int64, error) {
	row := q.queryRow(ctx, q.countServicesByProfileStmt, countServicesByProfile, arg.ProfileID, arg.ProfileID_2, arg.ProfileID_3)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listServicesByAgent = `-- name: ListServicesByAgent :many
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at,
  'http' AS type
FROM
  http_services
WHERE
  http_services.agent_id = ?
UNION ALL
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at,
  'tcp' AS type
FROM
  tcp_services
WHERE
  tcp_services.agent_id = ?
UNION ALL
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at,
  'udp' AS type
FROM
  udp_services
WHERE
  udp_services.agent_id = ?
ORDER BY
  name
LIMIT
  ?
OFFSET
  ?
`

type ListServicesByAgentParams struct {
	AgentID   *string `json:"agentId"`
	AgentID_2 *string `json:"agentId2"`
	AgentID_3 *string `json:"agentId3"`
	Limit     int64   `json:"limit"`
	Offset    int64   `json:"offset"`
}

type ListServicesByAgentRow struct {
	ID        int64           `json:"id"`
	ProfileID int64           `json:"profileId"`
	AgentID   *string         `json:"agentId"`
	Name      string          `json:"name"`
	Config    *schema.Service `json:"config"`
	Enabled   bool            `json:"enabled"`
	CreatedAt *time.Time      `json:"createdAt"`
	UpdatedAt *time.Time      `json:"updatedAt"`
	Type      string          `json:"type"`
}

func (q *Queries) ListServicesByAgent(ctx context.Context, arg ListServicesByAgentParams) ([]ListServicesByAgentRow, error) {
	rows, err := q.query(ctx, q.listServicesByAgentStmt, listServicesByAgent,
		arg.AgentID,
		arg.AgentID_2,
		arg.AgentID_3,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListServicesByAgentRow
	for rows.Next() {
		var i ListServicesByAgentRow
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.AgentID,
			&i.Name,
			&i.Config,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServicesByProfile = `-- name: ListServicesByProfile :many
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at,
  'http' AS type
FROM
  http_services
WHERE
  http_services.profile_id = ?
UNION ALL
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at,
  'tcp' AS type
FROM
  tcp_services
WHERE
  tcp_services.profile_id = ?
UNION ALL
SELECT
  id, profile_id, agent_id, name, config, enabled, created_at, updated_at,
  'udp' AS type
FROM
  udp_services
WHERE
  udp_services.profile_id = ?
ORDER BY
  name
LIMIT
  ?
OFFSET
  ?
`

type ListServicesByProfileParams struct {
	ProfileID   int64 `json:"profileId"`
	ProfileID_2 int64 `json:"profileId2"`
	ProfileID_3 int64 `json:"profileId3"`
	Limit       int64 `json:"limit"`
	Offset      int64 `json:"offset"`
}

type ListServicesByProfileRow struct {
	ID        int64           `json:"id"`
	ProfileID int64           `json:"profileId"`
	AgentID   *string         `json:"agentId"`
	Name      string          `json:"name"`
	Config    *schema.Service `json:"config"`
	Enabled   bool            `json:"enabled"`
	CreatedAt *time.Time      `json:"createdAt"`
	UpdatedAt *time.Time      `json:"updatedAt"`
	Type      string          `json:"type"`
}

func (q *Queries) ListServicesByProfile(ctx context.Context, arg ListServicesByProfileParams) ([]ListServicesByProfileRow, error) {
	rows, err := q.query(ctx, q.listServicesByProfileStmt, listServicesByProfile,
		arg.ProfileID,
		arg.ProfileID_2,
		arg.ProfileID_3,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListServicesByProfileRow
	for rows.Next() {
		var i ListServicesByProfileRow
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.AgentID,
			&i.Name,
			&i.Config,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
