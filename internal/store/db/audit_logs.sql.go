// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: audit_logs.sql

package db

import (
	"context"
)

const countAuditLogs = `-- name: CountAuditLogs :one
SELECT
  COUNT(*)
FROM
  audit_logs
WHERE
  profile_id = ?
`

func (q *Queries) CountAuditLogs(ctx context.Context, profileID int64) (int64, error) {
	row := q.queryRow(ctx, q.countAuditLogsStmt, countAuditLogs, profileID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAuditLog = `-- name: CreateAuditLog :exec
INSERT INTO
  audit_logs (
    profile_id,
    user_id,
    agent_id,
    event,
    details,
    created_at
  )
VALUES
  (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
`

type CreateAuditLogParams struct {
	ProfileID int64   `json:"profileId"`
	UserID    *string `json:"userId"`
	AgentID   *string `json:"agentId"`
	Event     string  `json:"event"`
	Details   *string `json:"details"`
}

func (q *Queries) CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) error {
	_, err := q.exec(ctx, q.createAuditLogStmt, createAuditLog,
		arg.ProfileID,
		arg.UserID,
		arg.AgentID,
		arg.Event,
		arg.Details,
	)
	return err
}

const deleteOldAuditLogs = `-- name: DeleteOldAuditLogs :exec
DELETE FROM audit_logs
WHERE
  created_at < DATETIME ('now', '-90 days')
`

func (q *Queries) DeleteOldAuditLogs(ctx context.Context) error {
	_, err := q.exec(ctx, q.deleteOldAuditLogsStmt, deleteOldAuditLogs)
	return err
}

const listAuditLogs = `-- name: ListAuditLogs :many
SELECT
  id, profile_id, user_id, agent_id, event, details, created_at
FROM
  audit_logs
WHERE
  profile_id = ?
ORDER BY
  created_at DESC
LIMIT
  ?
OFFSET
  ?
`

type ListAuditLogsParams struct {
	ProfileID int64 `json:"profileId"`
	Limit     int64 `json:"limit"`
	Offset    int64 `json:"offset"`
}

func (q *Queries) ListAuditLogs(ctx context.Context, arg ListAuditLogsParams) ([]AuditLog, error) {
	rows, err := q.query(ctx, q.listAuditLogsStmt, listAuditLogs, arg.ProfileID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuditLog
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.UserID,
			&i.AgentID,
			&i.Event,
			&i.Details,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
