// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: http_services.sql

package db

import (
	"context"

	"github.com/traefik/traefik/v3/pkg/config/dynamic"
)

const countHttpServices = `-- name: CountHttpServices :one
SELECT
  COUNT(*)
FROM
  http_services
`

func (q *Queries) CountHttpServices(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countHttpServicesStmt, countHttpServices)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createHttpService = `-- name: CreateHttpService :one
INSERT INTO
  http_services (
    profile_id,
    agent_id,
    name,
    config,
    created_at,
    updated_at
  )
VALUES
  (?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP) RETURNING id, profile_id, agent_id, name, config, created_at, updated_at
`

type CreateHttpServiceParams struct {
	ProfileID int64            `json:"profileId"`
	AgentID   *string          `json:"agentId"`
	Name      string           `json:"name"`
	Config    *dynamic.Service `json:"config"`
}

func (q *Queries) CreateHttpService(ctx context.Context, arg CreateHttpServiceParams) (HttpService, error) {
	row := q.queryRow(ctx, q.createHttpServiceStmt, createHttpService,
		arg.ProfileID,
		arg.AgentID,
		arg.Name,
		arg.Config,
	)
	var i HttpService
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.AgentID,
		&i.Name,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteHttpService = `-- name: DeleteHttpService :exec
DELETE FROM http_services
WHERE
  id = ?
`

func (q *Queries) DeleteHttpService(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteHttpServiceStmt, deleteHttpService, id)
	return err
}

const getHttpService = `-- name: GetHttpService :one
SELECT
  id, profile_id, agent_id, name, config, created_at, updated_at
FROM
  http_services
WHERE
  id = ?
`

func (q *Queries) GetHttpService(ctx context.Context, id int64) (HttpService, error) {
	row := q.queryRow(ctx, q.getHttpServiceStmt, getHttpService, id)
	var i HttpService
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.AgentID,
		&i.Name,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getHttpServicesByProfile = `-- name: GetHttpServicesByProfile :many
SELECT
  id, profile_id, agent_id, name, config, created_at, updated_at
FROM
  http_services
WHERE
  profile_id = ?
`

func (q *Queries) GetHttpServicesByProfile(ctx context.Context, profileID int64) ([]HttpService, error) {
	rows, err := q.query(ctx, q.getHttpServicesByProfileStmt, getHttpServicesByProfile, profileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HttpService
	for rows.Next() {
		var i HttpService
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.AgentID,
			&i.Name,
			&i.Config,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listHttpServices = `-- name: ListHttpServices :many
SELECT
  id, profile_id, agent_id, name, config, created_at, updated_at
FROM
  http_services
ORDER BY
  name
LIMIT
  ?
OFFSET
  ?
`

type ListHttpServicesParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListHttpServices(ctx context.Context, arg ListHttpServicesParams) ([]HttpService, error) {
	rows, err := q.query(ctx, q.listHttpServicesStmt, listHttpServices, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HttpService
	for rows.Next() {
		var i HttpService
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.AgentID,
			&i.Name,
			&i.Config,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHttpService = `-- name: UpdateHttpService :one
UPDATE http_services
SET
  name = ?,
  config = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE
  id = ? RETURNING id, profile_id, agent_id, name, config, created_at, updated_at
`

type UpdateHttpServiceParams struct {
	Name   string           `json:"name"`
	Config *dynamic.Service `json:"config"`
	ID     int64            `json:"id"`
}

func (q *Queries) UpdateHttpService(ctx context.Context, arg UpdateHttpServiceParams) (HttpService, error) {
	row := q.queryRow(ctx, q.updateHttpServiceStmt, updateHttpService, arg.Name, arg.Config, arg.ID)
	var i HttpService
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.AgentID,
		&i.Name,
		&i.Config,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
