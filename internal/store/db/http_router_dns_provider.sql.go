// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: http_router_dns_provider.sql

package db

import (
	"context"

	"github.com/mizuchilabs/mantrae/internal/store/schema"
)

const createHttpRouterDNSProvider = `-- name: CreateHttpRouterDNSProvider :exec
INSERT
OR IGNORE INTO http_router_dns_providers (http_router_id, dns_provider_id)
VALUES
  (?, ?)
`

type CreateHttpRouterDNSProviderParams struct {
	HttpRouterID  int64 `json:"httpRouterId"`
	DnsProviderID int64 `json:"dnsProviderId"`
}

func (q *Queries) CreateHttpRouterDNSProvider(ctx context.Context, arg CreateHttpRouterDNSProviderParams) error {
	_, err := q.exec(ctx, q.createHttpRouterDNSProviderStmt, createHttpRouterDNSProvider, arg.HttpRouterID, arg.DnsProviderID)
	return err
}

const deleteHttpRouterDNSProvider = `-- name: DeleteHttpRouterDNSProvider :exec
DELETE FROM http_router_dns_providers
WHERE
  http_router_id = ?
  AND dns_provider_id = ?
`

type DeleteHttpRouterDNSProviderParams struct {
	HttpRouterID  int64 `json:"httpRouterId"`
	DnsProviderID int64 `json:"dnsProviderId"`
}

func (q *Queries) DeleteHttpRouterDNSProvider(ctx context.Context, arg DeleteHttpRouterDNSProviderParams) error {
	_, err := q.exec(ctx, q.deleteHttpRouterDNSProviderStmt, deleteHttpRouterDNSProvider, arg.HttpRouterID, arg.DnsProviderID)
	return err
}

const getDnsProvidersByHttpRouter = `-- name: GetDnsProvidersByHttpRouter :many
SELECT
  dp.id, dp.name, dp.type, dp.config, dp.is_active, dp.created_at, dp.updated_at
FROM
  dns_providers dp
  JOIN http_router_dns_providers hrdp ON dp.id = hrdp.dns_provider_id
WHERE
  hrdp.http_router_id = ?
`

func (q *Queries) GetDnsProvidersByHttpRouter(ctx context.Context, httpRouterID int64) ([]DnsProvider, error) {
	rows, err := q.query(ctx, q.getDnsProvidersByHttpRouterStmt, getDnsProvidersByHttpRouter, httpRouterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DnsProvider
	for rows.Next() {
		var i DnsProvider
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Config,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHttpRouterDomains = `-- name: GetHttpRouterDomains :many
SELECT
  hr.id AS router_id,
  hr.name AS router_name,
  hr.config AS config_json,
  p.name AS profile_name,
  dp.id AS dns_provider_id,
  dp.name AS dns_provider_name
FROM
  http_routers hr
  JOIN profiles p ON hr.profile_id = p.id
  LEFT JOIN http_router_dns_providers link ON link.http_router_id = hr.id
  LEFT JOIN dns_providers dp ON link.dns_provider_id = dp.id
`

type GetHttpRouterDomainsRow struct {
	RouterID        int64          `json:"routerId"`
	RouterName      string         `json:"routerName"`
	ConfigJson      *schema.Router `json:"configJson"`
	ProfileName     string         `json:"profileName"`
	DnsProviderID   *int64         `json:"dnsProviderId"`
	DnsProviderName *string        `json:"dnsProviderName"`
}

func (q *Queries) GetHttpRouterDomains(ctx context.Context) ([]GetHttpRouterDomainsRow, error) {
	rows, err := q.query(ctx, q.getHttpRouterDomainsStmt, getHttpRouterDomains)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetHttpRouterDomainsRow
	for rows.Next() {
		var i GetHttpRouterDomainsRow
		if err := rows.Scan(
			&i.RouterID,
			&i.RouterName,
			&i.ConfigJson,
			&i.ProfileName,
			&i.DnsProviderID,
			&i.DnsProviderName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
