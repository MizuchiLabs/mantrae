// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: http_routers.sql

package db

import (
	"context"

	"github.com/traefik/traefik/v3/pkg/config/dynamic"
)

const countHttpRouters = `-- name: CountHttpRouters :one
SELECT
  COUNT(*)
FROM
  http_routers
`

func (q *Queries) CountHttpRouters(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countHttpRoutersStmt, countHttpRouters)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createHttpRouter = `-- name: CreateHttpRouter :one
INSERT INTO
  http_routers (
    profile_id,
    name,
    config,
    source,
    created_at,
    updated_at
  )
VALUES
  (?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP) RETURNING id, profile_id, name, config, source, enabled, created_at, updated_at
`

type CreateHttpRouterParams struct {
	ProfileID int64           `json:"profileId"`
	Name      string          `json:"name"`
	Config    *dynamic.Router `json:"config"`
	Source    *string         `json:"source"`
}

func (q *Queries) CreateHttpRouter(ctx context.Context, arg CreateHttpRouterParams) (HttpRouter, error) {
	row := q.queryRow(ctx, q.createHttpRouterStmt, createHttpRouter,
		arg.ProfileID,
		arg.Name,
		arg.Config,
		arg.Source,
	)
	var i HttpRouter
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.Name,
		&i.Config,
		&i.Source,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteHttpRouter = `-- name: DeleteHttpRouter :exec
DELETE FROM http_routers
WHERE
  id = ?
`

func (q *Queries) DeleteHttpRouter(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteHttpRouterStmt, deleteHttpRouter, id)
	return err
}

const getHttpRouter = `-- name: GetHttpRouter :one
SELECT
  id, profile_id, name, config, source, enabled, created_at, updated_at
FROM
  http_routers
WHERE
  id = ?
`

func (q *Queries) GetHttpRouter(ctx context.Context, id int64) (HttpRouter, error) {
	row := q.queryRow(ctx, q.getHttpRouterStmt, getHttpRouter, id)
	var i HttpRouter
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.Name,
		&i.Config,
		&i.Source,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getHttpRouterByProfile = `-- name: GetHttpRouterByProfile :one
SELECT
  id, profile_id, name, config, source, enabled, created_at, updated_at
FROM
  http_routers
WHERE
  profile_id = ?
`

func (q *Queries) GetHttpRouterByProfile(ctx context.Context, profileID int64) (HttpRouter, error) {
	row := q.queryRow(ctx, q.getHttpRouterByProfileStmt, getHttpRouterByProfile, profileID)
	var i HttpRouter
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.Name,
		&i.Config,
		&i.Source,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listHttpRouters = `-- name: ListHttpRouters :many
SELECT
  id, profile_id, name, config, source, enabled, created_at, updated_at
FROM
  http_routers
ORDER BY
  name
LIMIT
  ?
OFFSET
  ?
`

type ListHttpRoutersParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListHttpRouters(ctx context.Context, arg ListHttpRoutersParams) ([]HttpRouter, error) {
	rows, err := q.query(ctx, q.listHttpRoutersStmt, listHttpRouters, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HttpRouter
	for rows.Next() {
		var i HttpRouter
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.Name,
			&i.Config,
			&i.Source,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHttpRouter = `-- name: UpdateHttpRouter :one
UPDATE http_routers
SET
  name = ?,
  config = ?,
  source = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE
  id = ? RETURNING id, profile_id, name, config, source, enabled, created_at, updated_at
`

type UpdateHttpRouterParams struct {
	Name   string          `json:"name"`
	Config *dynamic.Router `json:"config"`
	Source *string         `json:"source"`
	ID     int64           `json:"id"`
}

func (q *Queries) UpdateHttpRouter(ctx context.Context, arg UpdateHttpRouterParams) (HttpRouter, error) {
	row := q.queryRow(ctx, q.updateHttpRouterStmt, updateHttpRouter,
		arg.Name,
		arg.Config,
		arg.Source,
		arg.ID,
	)
	var i HttpRouter
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.Name,
		&i.Config,
		&i.Source,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
