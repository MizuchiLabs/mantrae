// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const createSetting = `-- name: CreateSetting :one
INSERT INTO
    settings (key, value)
VALUES
    (?, ?) RETURNING id, "key", value
`

type CreateSettingParams struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (q *Queries) CreateSetting(ctx context.Context, arg CreateSettingParams) (Setting, error) {
	row := q.queryRow(ctx, q.createSettingStmt, createSetting, arg.Key, arg.Value)
	var i Setting
	err := row.Scan(&i.ID, &i.Key, &i.Value)
	return i, err
}

const deleteAgentByID = `-- name: DeleteAgentByID :exec
DELETE FROM agents
WHERE
    id = ?
`

func (q *Queries) DeleteAgentByID(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteAgentByIDStmt, deleteAgentByID, id)
	return err
}

const deleteInternalHTTPMiddleware = `-- name: DeleteInternalHTTPMiddleware :exec
UPDATE traefik_api
SET
    internal = json_remove (internal, '$.middlewares.' || ?2)
WHERE
    profile_id = ?
`

type DeleteInternalHTTPMiddlewareParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
}

func (q *Queries) DeleteInternalHTTPMiddleware(ctx context.Context, arg DeleteInternalHTTPMiddlewareParams) error {
	_, err := q.exec(ctx, q.deleteInternalHTTPMiddlewareStmt, deleteInternalHTTPMiddleware, arg.Name, arg.ProfileID)
	return err
}

const deleteInternalHTTPRouter = `-- name: DeleteInternalHTTPRouter :exec
UPDATE traefik_api
SET
    internal = json_remove (internal, '$.routers.' || ?2)
WHERE
    profile_id = ?
`

type DeleteInternalHTTPRouterParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
}

func (q *Queries) DeleteInternalHTTPRouter(ctx context.Context, arg DeleteInternalHTTPRouterParams) error {
	_, err := q.exec(ctx, q.deleteInternalHTTPRouterStmt, deleteInternalHTTPRouter, arg.Name, arg.ProfileID)
	return err
}

const deleteInternalHTTPService = `-- name: DeleteInternalHTTPService :exec
UPDATE traefik_api
SET
    internal = json_remove (internal, '$.services.' || ?2)
WHERE
    profile_id = ?
`

type DeleteInternalHTTPServiceParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
}

func (q *Queries) DeleteInternalHTTPService(ctx context.Context, arg DeleteInternalHTTPServiceParams) error {
	_, err := q.exec(ctx, q.deleteInternalHTTPServiceStmt, deleteInternalHTTPService, arg.Name, arg.ProfileID)
	return err
}

const deleteInternalTCPMiddleware = `-- name: DeleteInternalTCPMiddleware :exec
UPDATE traefik_api
SET
    internal = json_remove (internal, '$.tcpMiddlewares.' || ?2)
WHERE
    profile_id = ?
`

type DeleteInternalTCPMiddlewareParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
}

func (q *Queries) DeleteInternalTCPMiddleware(ctx context.Context, arg DeleteInternalTCPMiddlewareParams) error {
	_, err := q.exec(ctx, q.deleteInternalTCPMiddlewareStmt, deleteInternalTCPMiddleware, arg.Name, arg.ProfileID)
	return err
}

const deleteInternalTCPRouter = `-- name: DeleteInternalTCPRouter :exec
UPDATE traefik_api
SET
    internal = json_remove (internal, '$.tcpRouters.' || ?2)
WHERE
    profile_id = ?
`

type DeleteInternalTCPRouterParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
}

func (q *Queries) DeleteInternalTCPRouter(ctx context.Context, arg DeleteInternalTCPRouterParams) error {
	_, err := q.exec(ctx, q.deleteInternalTCPRouterStmt, deleteInternalTCPRouter, arg.Name, arg.ProfileID)
	return err
}

const deleteInternalTCPService = `-- name: DeleteInternalTCPService :exec
UPDATE traefik_api
SET
    internal = json_remove (internal, '$.tcpServices.' || ?2)
WHERE
    profile_id = ?
`

type DeleteInternalTCPServiceParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
}

func (q *Queries) DeleteInternalTCPService(ctx context.Context, arg DeleteInternalTCPServiceParams) error {
	_, err := q.exec(ctx, q.deleteInternalTCPServiceStmt, deleteInternalTCPService, arg.Name, arg.ProfileID)
	return err
}

const deleteInternalUDPRouter = `-- name: DeleteInternalUDPRouter :exec
UPDATE traefik_api
SET
    internal = json_remove (internal, '$.udpRouters.' || ?2)
WHERE
    profile_id = ?
`

type DeleteInternalUDPRouterParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
}

func (q *Queries) DeleteInternalUDPRouter(ctx context.Context, arg DeleteInternalUDPRouterParams) error {
	_, err := q.exec(ctx, q.deleteInternalUDPRouterStmt, deleteInternalUDPRouter, arg.Name, arg.ProfileID)
	return err
}

const deleteInternalUDPService = `-- name: DeleteInternalUDPService :exec
UPDATE traefik_api
SET
    internal = json_remove (internal, '$.udpServices.' || ?2)
WHERE
    profile_id = ?
`

type DeleteInternalUDPServiceParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
}

func (q *Queries) DeleteInternalUDPService(ctx context.Context, arg DeleteInternalUDPServiceParams) error {
	_, err := q.exec(ctx, q.deleteInternalUDPServiceStmt, deleteInternalUDPService, arg.Name, arg.ProfileID)
	return err
}

const deleteProfileByID = `-- name: DeleteProfileByID :exec
DELETE FROM profiles
WHERE
    id = ?
`

func (q *Queries) DeleteProfileByID(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteProfileByIDStmt, deleteProfileByID, id)
	return err
}

const deleteProviderByID = `-- name: DeleteProviderByID :exec
DELETE FROM providers
WHERE
    id = ?
`

func (q *Queries) DeleteProviderByID(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteProviderByIDStmt, deleteProviderByID, id)
	return err
}

const deleteSettingByID = `-- name: DeleteSettingByID :exec
DELETE FROM settings
WHERE
    id = ?
`

func (q *Queries) DeleteSettingByID(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteSettingByIDStmt, deleteSettingByID, id)
	return err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users
WHERE
    id = ?
`

func (q *Queries) DeleteUserByID(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteUserByIDStmt, deleteUserByID, id)
	return err
}

const getAgentByHostname = `-- name: GetAgentByHostname :one
SELECT
    id, profile_id, hostname, public_ip, private_ips, containers, active_ip, token, last_seen
FROM
    agents
WHERE
    hostname = ?
    AND profile_id = ?
LIMIT
    1
`

type GetAgentByHostnameParams struct {
	Hostname  string `json:"hostname"`
	ProfileID int64  `json:"profileId"`
}

func (q *Queries) GetAgentByHostname(ctx context.Context, arg GetAgentByHostnameParams) (Agent, error) {
	row := q.queryRow(ctx, q.getAgentByHostnameStmt, getAgentByHostname, arg.Hostname, arg.ProfileID)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.Hostname,
		&i.PublicIp,
		&i.PrivateIps,
		&i.Containers,
		&i.ActiveIp,
		&i.Token,
		&i.LastSeen,
	)
	return i, err
}

const getAgentByID = `-- name: GetAgentByID :one
SELECT
    id, profile_id, hostname, public_ip, private_ips, containers, active_ip, token, last_seen
FROM
    agents
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetAgentByID(ctx context.Context, id string) (Agent, error) {
	row := q.queryRow(ctx, q.getAgentByIDStmt, getAgentByID, id)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.Hostname,
		&i.PublicIp,
		&i.PrivateIps,
		&i.Containers,
		&i.ActiveIp,
		&i.Token,
		&i.LastSeen,
	)
	return i, err
}

const getDefaultProvider = `-- name: GetDefaultProvider :one
SELECT
    id, name, type, external_ip, api_key, api_url, zone_type, proxied, is_active
FROM
    providers
WHERE
    is_active = true
LIMIT
    1
`

func (q *Queries) GetDefaultProvider(ctx context.Context) (Provider, error) {
	row := q.queryRow(ctx, q.getDefaultProviderStmt, getDefaultProvider)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.ExternalIp,
		&i.ApiKey,
		&i.ApiUrl,
		&i.ZoneType,
		&i.Proxied,
		&i.IsActive,
	)
	return i, err
}

const getExternalHTTPMiddlewareByName = `-- name: GetExternalHTTPMiddlewareByName :one
SELECT
    json_extract (external, '$.middlewares.' || ?2) as middleware
FROM
    traefik_api
WHERE
    profile_id = ?
`

type GetExternalHTTPMiddlewareByNameParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
}

func (q *Queries) GetExternalHTTPMiddlewareByName(ctx context.Context, arg GetExternalHTTPMiddlewareByNameParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getExternalHTTPMiddlewareByNameStmt, getExternalHTTPMiddlewareByName, arg.Name, arg.ProfileID)
	var middleware interface{}
	err := row.Scan(&middleware)
	return middleware, err
}

const getExternalHTTPMiddlewaresByProfileID = `-- name: GetExternalHTTPMiddlewaresByProfileID :one
SELECT
    json_extract (external, '$.middlewares') as middlewares
FROM
    traefik_api
WHERE
    profile_id = ?
`

func (q *Queries) GetExternalHTTPMiddlewaresByProfileID(ctx context.Context, profileID int64) (interface{}, error) {
	row := q.queryRow(ctx, q.getExternalHTTPMiddlewaresByProfileIDStmt, getExternalHTTPMiddlewaresByProfileID, profileID)
	var middlewares interface{}
	err := row.Scan(&middlewares)
	return middlewares, err
}

const getExternalHTTPRouterByName = `-- name: GetExternalHTTPRouterByName :one
SELECT
    json_extract (external, '$.routers.' || ?2) as router
FROM
    traefik_api
WHERE
    profile_id = ?
`

type GetExternalHTTPRouterByNameParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
}

func (q *Queries) GetExternalHTTPRouterByName(ctx context.Context, arg GetExternalHTTPRouterByNameParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getExternalHTTPRouterByNameStmt, getExternalHTTPRouterByName, arg.Name, arg.ProfileID)
	var router interface{}
	err := row.Scan(&router)
	return router, err
}

const getExternalHTTPRoutersByProfileID = `-- name: GetExternalHTTPRoutersByProfileID :one
SELECT
    json_extract (external, '$.routers') as routers
FROM
    traefik_api
WHERE
    profile_id = ?
`

func (q *Queries) GetExternalHTTPRoutersByProfileID(ctx context.Context, profileID int64) (interface{}, error) {
	row := q.queryRow(ctx, q.getExternalHTTPRoutersByProfileIDStmt, getExternalHTTPRoutersByProfileID, profileID)
	var routers interface{}
	err := row.Scan(&routers)
	return routers, err
}

const getExternalHTTPServiceByName = `-- name: GetExternalHTTPServiceByName :one
SELECT
    json_extract (external, '$.services.' || ?2) as service
FROM
    traefik_api
WHERE
    profile_id = ?
`

type GetExternalHTTPServiceByNameParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
}

func (q *Queries) GetExternalHTTPServiceByName(ctx context.Context, arg GetExternalHTTPServiceByNameParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getExternalHTTPServiceByNameStmt, getExternalHTTPServiceByName, arg.Name, arg.ProfileID)
	var service interface{}
	err := row.Scan(&service)
	return service, err
}

const getExternalHTTPServicesByProfileID = `-- name: GetExternalHTTPServicesByProfileID :one
SELECT
    json_extract (external, '$.services') as services
FROM
    traefik_api
WHERE
    profile_id = ?
`

func (q *Queries) GetExternalHTTPServicesByProfileID(ctx context.Context, profileID int64) (interface{}, error) {
	row := q.queryRow(ctx, q.getExternalHTTPServicesByProfileIDStmt, getExternalHTTPServicesByProfileID, profileID)
	var services interface{}
	err := row.Scan(&services)
	return services, err
}

const getExternalTCPMiddlewareByName = `-- name: GetExternalTCPMiddlewareByName :one
SELECT
    json_extract (external, '$.tcpMiddlewares.' || ?2) as middleware
FROM
    traefik_api
WHERE
    profile_id = ?
`

type GetExternalTCPMiddlewareByNameParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
}

func (q *Queries) GetExternalTCPMiddlewareByName(ctx context.Context, arg GetExternalTCPMiddlewareByNameParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getExternalTCPMiddlewareByNameStmt, getExternalTCPMiddlewareByName, arg.Name, arg.ProfileID)
	var middleware interface{}
	err := row.Scan(&middleware)
	return middleware, err
}

const getExternalTCPMiddlewaresByProfileID = `-- name: GetExternalTCPMiddlewaresByProfileID :one
SELECT
    json_extract (external, '$.tcpMiddlewares') as middlewares
FROM
    traefik_api
WHERE
    profile_id = ?
`

func (q *Queries) GetExternalTCPMiddlewaresByProfileID(ctx context.Context, profileID int64) (interface{}, error) {
	row := q.queryRow(ctx, q.getExternalTCPMiddlewaresByProfileIDStmt, getExternalTCPMiddlewaresByProfileID, profileID)
	var middlewares interface{}
	err := row.Scan(&middlewares)
	return middlewares, err
}

const getExternalTCPRouterByName = `-- name: GetExternalTCPRouterByName :one
SELECT
    json_extract (external, '$.tcpRouters.' || ?2) as router
FROM
    traefik_api
WHERE
    profile_id = ?
`

type GetExternalTCPRouterByNameParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
}

func (q *Queries) GetExternalTCPRouterByName(ctx context.Context, arg GetExternalTCPRouterByNameParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getExternalTCPRouterByNameStmt, getExternalTCPRouterByName, arg.Name, arg.ProfileID)
	var router interface{}
	err := row.Scan(&router)
	return router, err
}

const getExternalTCPRoutersByProfileID = `-- name: GetExternalTCPRoutersByProfileID :one
SELECT
    json_extract (external, '$.tcpRouters') as routers
FROM
    traefik_api
WHERE
    profile_id = ?
`

func (q *Queries) GetExternalTCPRoutersByProfileID(ctx context.Context, profileID int64) (interface{}, error) {
	row := q.queryRow(ctx, q.getExternalTCPRoutersByProfileIDStmt, getExternalTCPRoutersByProfileID, profileID)
	var routers interface{}
	err := row.Scan(&routers)
	return routers, err
}

const getExternalTCPServiceByName = `-- name: GetExternalTCPServiceByName :one
SELECT
    json_extract (external, '$.tcpServices.' || ?2) as service
FROM
    traefik_api
WHERE
    profile_id = ?
`

type GetExternalTCPServiceByNameParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
}

func (q *Queries) GetExternalTCPServiceByName(ctx context.Context, arg GetExternalTCPServiceByNameParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getExternalTCPServiceByNameStmt, getExternalTCPServiceByName, arg.Name, arg.ProfileID)
	var service interface{}
	err := row.Scan(&service)
	return service, err
}

const getExternalTCPServicesByProfileID = `-- name: GetExternalTCPServicesByProfileID :one
SELECT
    json_extract (external, '$.tcpServices') as services
FROM
    traefik_api
WHERE
    profile_id = ?
`

func (q *Queries) GetExternalTCPServicesByProfileID(ctx context.Context, profileID int64) (interface{}, error) {
	row := q.queryRow(ctx, q.getExternalTCPServicesByProfileIDStmt, getExternalTCPServicesByProfileID, profileID)
	var services interface{}
	err := row.Scan(&services)
	return services, err
}

const getExternalTraefikConfigByProfileID = `-- name: GetExternalTraefikConfigByProfileID :one
SELECT
    external
FROM
    traefik_api
WHERE
    profile_id = ?
`

func (q *Queries) GetExternalTraefikConfigByProfileID(ctx context.Context, profileID int64) (*TraefikConfig, error) {
	row := q.queryRow(ctx, q.getExternalTraefikConfigByProfileIDStmt, getExternalTraefikConfigByProfileID, profileID)
	var external *TraefikConfig
	err := row.Scan(&external)
	return external, err
}

const getExternalUDPRouterByName = `-- name: GetExternalUDPRouterByName :one
SELECT
    json_extract (external, '$.udpRouters.' || ?2) as router
FROM
    traefik_api
WHERE
    profile_id = ?
`

type GetExternalUDPRouterByNameParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
}

func (q *Queries) GetExternalUDPRouterByName(ctx context.Context, arg GetExternalUDPRouterByNameParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getExternalUDPRouterByNameStmt, getExternalUDPRouterByName, arg.Name, arg.ProfileID)
	var router interface{}
	err := row.Scan(&router)
	return router, err
}

const getExternalUDPRoutersByProfileID = `-- name: GetExternalUDPRoutersByProfileID :one
SELECT
    json_extract (external, '$.udpRouters') as routers
FROM
    traefik_api
WHERE
    profile_id = ?
`

func (q *Queries) GetExternalUDPRoutersByProfileID(ctx context.Context, profileID int64) (interface{}, error) {
	row := q.queryRow(ctx, q.getExternalUDPRoutersByProfileIDStmt, getExternalUDPRoutersByProfileID, profileID)
	var routers interface{}
	err := row.Scan(&routers)
	return routers, err
}

const getExternalUDPServiceByName = `-- name: GetExternalUDPServiceByName :one
SELECT
    json_extract (external, '$.udpServices.' || ?2) as service
FROM
    traefik_api
WHERE
    profile_id = ?
`

type GetExternalUDPServiceByNameParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
}

func (q *Queries) GetExternalUDPServiceByName(ctx context.Context, arg GetExternalUDPServiceByNameParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getExternalUDPServiceByNameStmt, getExternalUDPServiceByName, arg.Name, arg.ProfileID)
	var service interface{}
	err := row.Scan(&service)
	return service, err
}

const getExternalUDPServicesByProfileID = `-- name: GetExternalUDPServicesByProfileID :one
SELECT
    json_extract (external, '$.udpServices') as services
FROM
    traefik_api
WHERE
    profile_id = ?
`

func (q *Queries) GetExternalUDPServicesByProfileID(ctx context.Context, profileID int64) (interface{}, error) {
	row := q.queryRow(ctx, q.getExternalUDPServicesByProfileIDStmt, getExternalUDPServicesByProfileID, profileID)
	var services interface{}
	err := row.Scan(&services)
	return services, err
}

const getInternalHTTPMiddlewareByName = `-- name: GetInternalHTTPMiddlewareByName :one
SELECT
    json_extract (internal, '$.middlewares.' || ?2) as middleware
FROM
    traefik_api
WHERE
    profile_id = ?
`

type GetInternalHTTPMiddlewareByNameParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
}

func (q *Queries) GetInternalHTTPMiddlewareByName(ctx context.Context, arg GetInternalHTTPMiddlewareByNameParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getInternalHTTPMiddlewareByNameStmt, getInternalHTTPMiddlewareByName, arg.Name, arg.ProfileID)
	var middleware interface{}
	err := row.Scan(&middleware)
	return middleware, err
}

const getInternalHTTPMiddlewaresByProfileID = `-- name: GetInternalHTTPMiddlewaresByProfileID :one
SELECT
    json_extract (internal, '$.middlewares') as middlewares
FROM
    traefik_api
WHERE
    profile_id = ?
`

func (q *Queries) GetInternalHTTPMiddlewaresByProfileID(ctx context.Context, profileID int64) (interface{}, error) {
	row := q.queryRow(ctx, q.getInternalHTTPMiddlewaresByProfileIDStmt, getInternalHTTPMiddlewaresByProfileID, profileID)
	var middlewares interface{}
	err := row.Scan(&middlewares)
	return middlewares, err
}

const getInternalHTTPRouterByName = `-- name: GetInternalHTTPRouterByName :one
SELECT
    json_extract (internal, '$.routers.' || ?2) as router
FROM
    traefik_api
WHERE
    profile_id = ?
`

type GetInternalHTTPRouterByNameParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
}

func (q *Queries) GetInternalHTTPRouterByName(ctx context.Context, arg GetInternalHTTPRouterByNameParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getInternalHTTPRouterByNameStmt, getInternalHTTPRouterByName, arg.Name, arg.ProfileID)
	var router interface{}
	err := row.Scan(&router)
	return router, err
}

const getInternalHTTPRoutersByProfileID = `-- name: GetInternalHTTPRoutersByProfileID :one
SELECT
    json_extract (internal, '$.routers') as routers
FROM
    traefik_api
WHERE
    profile_id = ?
`

func (q *Queries) GetInternalHTTPRoutersByProfileID(ctx context.Context, profileID int64) (interface{}, error) {
	row := q.queryRow(ctx, q.getInternalHTTPRoutersByProfileIDStmt, getInternalHTTPRoutersByProfileID, profileID)
	var routers interface{}
	err := row.Scan(&routers)
	return routers, err
}

const getInternalHTTPServiceByName = `-- name: GetInternalHTTPServiceByName :one
SELECT
    json_extract (internal, '$.services.' || ?2) as service
FROM
    traefik_api
WHERE
    profile_id = ?
`

type GetInternalHTTPServiceByNameParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
}

func (q *Queries) GetInternalHTTPServiceByName(ctx context.Context, arg GetInternalHTTPServiceByNameParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getInternalHTTPServiceByNameStmt, getInternalHTTPServiceByName, arg.Name, arg.ProfileID)
	var service interface{}
	err := row.Scan(&service)
	return service, err
}

const getInternalHTTPServicesByProfileID = `-- name: GetInternalHTTPServicesByProfileID :one
SELECT
    json_extract (internal, '$.services') as services
FROM
    traefik_api
WHERE
    profile_id = ?
`

func (q *Queries) GetInternalHTTPServicesByProfileID(ctx context.Context, profileID int64) (interface{}, error) {
	row := q.queryRow(ctx, q.getInternalHTTPServicesByProfileIDStmt, getInternalHTTPServicesByProfileID, profileID)
	var services interface{}
	err := row.Scan(&services)
	return services, err
}

const getInternalTCPMiddlewareByName = `-- name: GetInternalTCPMiddlewareByName :one
SELECT
    json_extract (internal, '$.tcpMiddlewares.' || ?2) as middleware
FROM
    traefik_api
WHERE
    profile_id = ?
`

type GetInternalTCPMiddlewareByNameParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
}

func (q *Queries) GetInternalTCPMiddlewareByName(ctx context.Context, arg GetInternalTCPMiddlewareByNameParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getInternalTCPMiddlewareByNameStmt, getInternalTCPMiddlewareByName, arg.Name, arg.ProfileID)
	var middleware interface{}
	err := row.Scan(&middleware)
	return middleware, err
}

const getInternalTCPMiddlewaresByProfileID = `-- name: GetInternalTCPMiddlewaresByProfileID :one
SELECT
    json_extract (internal, '$.tcpMiddlewares') as middlewares
FROM
    traefik_api
WHERE
    profile_id = ?
`

func (q *Queries) GetInternalTCPMiddlewaresByProfileID(ctx context.Context, profileID int64) (interface{}, error) {
	row := q.queryRow(ctx, q.getInternalTCPMiddlewaresByProfileIDStmt, getInternalTCPMiddlewaresByProfileID, profileID)
	var middlewares interface{}
	err := row.Scan(&middlewares)
	return middlewares, err
}

const getInternalTCPRouterByName = `-- name: GetInternalTCPRouterByName :one
SELECT
    json_extract (internal, '$.tcpRouters.' || ?2) as router
FROM
    traefik_api
WHERE
    profile_id = ?
`

type GetInternalTCPRouterByNameParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
}

func (q *Queries) GetInternalTCPRouterByName(ctx context.Context, arg GetInternalTCPRouterByNameParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getInternalTCPRouterByNameStmt, getInternalTCPRouterByName, arg.Name, arg.ProfileID)
	var router interface{}
	err := row.Scan(&router)
	return router, err
}

const getInternalTCPRoutersByProfileID = `-- name: GetInternalTCPRoutersByProfileID :one
SELECT
    json_extract (internal, '$.tcpRouters') as routers
FROM
    traefik_api
WHERE
    profile_id = ?
`

func (q *Queries) GetInternalTCPRoutersByProfileID(ctx context.Context, profileID int64) (interface{}, error) {
	row := q.queryRow(ctx, q.getInternalTCPRoutersByProfileIDStmt, getInternalTCPRoutersByProfileID, profileID)
	var routers interface{}
	err := row.Scan(&routers)
	return routers, err
}

const getInternalTCPServiceByName = `-- name: GetInternalTCPServiceByName :one
SELECT
    json_extract (internal, '$.tcpServices.' || ?2) as service
FROM
    traefik_api
WHERE
    profile_id = ?
`

type GetInternalTCPServiceByNameParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
}

func (q *Queries) GetInternalTCPServiceByName(ctx context.Context, arg GetInternalTCPServiceByNameParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getInternalTCPServiceByNameStmt, getInternalTCPServiceByName, arg.Name, arg.ProfileID)
	var service interface{}
	err := row.Scan(&service)
	return service, err
}

const getInternalTCPServicesByProfileID = `-- name: GetInternalTCPServicesByProfileID :one
SELECT
    json_extract (internal, '$.tcpServices') as services
FROM
    traefik_api
WHERE
    profile_id = ?
`

func (q *Queries) GetInternalTCPServicesByProfileID(ctx context.Context, profileID int64) (interface{}, error) {
	row := q.queryRow(ctx, q.getInternalTCPServicesByProfileIDStmt, getInternalTCPServicesByProfileID, profileID)
	var services interface{}
	err := row.Scan(&services)
	return services, err
}

const getInternalTraefikConfigByProfileID = `-- name: GetInternalTraefikConfigByProfileID :one
SELECT
    internal
FROM
    traefik_api
WHERE
    profile_id = ?
`

func (q *Queries) GetInternalTraefikConfigByProfileID(ctx context.Context, profileID int64) (*TraefikConfig, error) {
	row := q.queryRow(ctx, q.getInternalTraefikConfigByProfileIDStmt, getInternalTraefikConfigByProfileID, profileID)
	var internal *TraefikConfig
	err := row.Scan(&internal)
	return internal, err
}

const getInternalUDPRouterByName = `-- name: GetInternalUDPRouterByName :one
SELECT
    json_extract (internal, '$.udpRouters.' || ?2) as router
FROM
    traefik_api
WHERE
    profile_id = ?
`

type GetInternalUDPRouterByNameParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
}

func (q *Queries) GetInternalUDPRouterByName(ctx context.Context, arg GetInternalUDPRouterByNameParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getInternalUDPRouterByNameStmt, getInternalUDPRouterByName, arg.Name, arg.ProfileID)
	var router interface{}
	err := row.Scan(&router)
	return router, err
}

const getInternalUDPRoutersByProfileID = `-- name: GetInternalUDPRoutersByProfileID :one
SELECT
    json_extract (internal, '$.udpRouters') as routers
FROM
    traefik_api
WHERE
    profile_id = ?
`

func (q *Queries) GetInternalUDPRoutersByProfileID(ctx context.Context, profileID int64) (interface{}, error) {
	row := q.queryRow(ctx, q.getInternalUDPRoutersByProfileIDStmt, getInternalUDPRoutersByProfileID, profileID)
	var routers interface{}
	err := row.Scan(&routers)
	return routers, err
}

const getInternalUDPServiceByName = `-- name: GetInternalUDPServiceByName :one
SELECT
    json_extract (internal, '$.udpServices.' || ?2) as service
FROM
    traefik_api
WHERE
    profile_id = ?
`

type GetInternalUDPServiceByNameParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
}

func (q *Queries) GetInternalUDPServiceByName(ctx context.Context, arg GetInternalUDPServiceByNameParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getInternalUDPServiceByNameStmt, getInternalUDPServiceByName, arg.Name, arg.ProfileID)
	var service interface{}
	err := row.Scan(&service)
	return service, err
}

const getInternalUDPServicesByProfileID = `-- name: GetInternalUDPServicesByProfileID :one
SELECT
    json_extract (internal, '$.udpServices') as services
FROM
    traefik_api
WHERE
    profile_id = ?
`

func (q *Queries) GetInternalUDPServicesByProfileID(ctx context.Context, profileID int64) (interface{}, error) {
	row := q.queryRow(ctx, q.getInternalUDPServicesByProfileIDStmt, getInternalUDPServicesByProfileID, profileID)
	var services interface{}
	err := row.Scan(&services)
	return services, err
}

const getProfileByID = `-- name: GetProfileByID :one
SELECT
    id, name, url, username, password, tls
FROM
    profiles
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetProfileByID(ctx context.Context, id int64) (Profile, error) {
	row := q.queryRow(ctx, q.getProfileByIDStmt, getProfileByID, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.Username,
		&i.Password,
		&i.Tls,
	)
	return i, err
}

const getProfileByName = `-- name: GetProfileByName :one
SELECT
    id, name, url, username, password, tls
FROM
    profiles
WHERE
    name = ?
LIMIT
    1
`

func (q *Queries) GetProfileByName(ctx context.Context, name string) (Profile, error) {
	row := q.queryRow(ctx, q.getProfileByNameStmt, getProfileByName, name)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.Username,
		&i.Password,
		&i.Tls,
	)
	return i, err
}

const getProviderByID = `-- name: GetProviderByID :one
SELECT
    id, name, type, external_ip, api_key, api_url, zone_type, proxied, is_active
FROM
    providers
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetProviderByID(ctx context.Context, id int64) (Provider, error) {
	row := q.queryRow(ctx, q.getProviderByIDStmt, getProviderByID, id)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.ExternalIp,
		&i.ApiKey,
		&i.ApiUrl,
		&i.ZoneType,
		&i.Proxied,
		&i.IsActive,
	)
	return i, err
}

const getSettingByKey = `-- name: GetSettingByKey :one
SELECT
    id, "key", value
FROM
    settings
WHERE
    key = ?
LIMIT
    1
`

func (q *Queries) GetSettingByKey(ctx context.Context, key string) (Setting, error) {
	row := q.queryRow(ctx, q.getSettingByKeyStmt, getSettingByKey, key)
	var i Setting
	err := row.Scan(&i.ID, &i.Key, &i.Value)
	return i, err
}

const getTraefikConfigByProfileID = `-- name: GetTraefikConfigByProfileID :one
SELECT
    profile_id, entrypoints, overview, external, internal
FROM
    traefik_api
WHERE
    profile_id = ?
LIMIT
    1
`

func (q *Queries) GetTraefikConfigByProfileID(ctx context.Context, profileID int64) (TraefikApi, error) {
	row := q.queryRow(ctx, q.getTraefikConfigByProfileIDStmt, getTraefikConfigByProfileID, profileID)
	var i TraefikApi
	err := row.Scan(
		&i.ProfileID,
		&i.Entrypoints,
		&i.Overview,
		&i.External,
		&i.Internal,
	)
	return i, err
}

const getTraefikEntrypointsByProfileID = `-- name: GetTraefikEntrypointsByProfileID :one
SELECT
    entrypoints
FROM
    traefik_api
WHERE
    profile_id = ?
`

func (q *Queries) GetTraefikEntrypointsByProfileID(ctx context.Context, profileID int64) (*TraefikEntryPoints, error) {
	row := q.queryRow(ctx, q.getTraefikEntrypointsByProfileIDStmt, getTraefikEntrypointsByProfileID, profileID)
	var entrypoints *TraefikEntryPoints
	err := row.Scan(&entrypoints)
	return entrypoints, err
}

const getTraefikOverviewByProfileID = `-- name: GetTraefikOverviewByProfileID :one
SELECT
    overview
FROM
    traefik_api
WHERE
    profile_id = ?
`

func (q *Queries) GetTraefikOverviewByProfileID(ctx context.Context, profileID int64) (*TraefikOverview, error) {
	row := q.queryRow(ctx, q.getTraefikOverviewByProfileIDStmt, getTraefikOverviewByProfileID, profileID)
	var overview *TraefikOverview
	err := row.Scan(&overview)
	return overview, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
    id, username, password, email, is_admin, last_login
FROM
    users
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.IsAdmin,
		&i.LastLogin,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT
    id, username, password, email, is_admin, last_login
FROM
    users
WHERE
    username = ?
LIMIT
    1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.queryRow(ctx, q.getUserByUsernameStmt, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.IsAdmin,
		&i.LastLogin,
	)
	return i, err
}

const listAgents = `-- name: ListAgents :many
SELECT
    id, profile_id, hostname, public_ip, private_ips, containers, active_ip, token, last_seen
FROM
    agents
`

func (q *Queries) ListAgents(ctx context.Context) ([]Agent, error) {
	rows, err := q.query(ctx, q.listAgentsStmt, listAgents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Agent
	for rows.Next() {
		var i Agent
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.Hostname,
			&i.PublicIp,
			&i.PrivateIps,
			&i.Containers,
			&i.ActiveIp,
			&i.Token,
			&i.LastSeen,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAgentsByProfileID = `-- name: ListAgentsByProfileID :many
SELECT
    id, profile_id, hostname, public_ip, private_ips, containers, active_ip, token, last_seen
FROM
    agents
WHERE
    profile_id = ?
`

func (q *Queries) ListAgentsByProfileID(ctx context.Context, profileID int64) ([]Agent, error) {
	rows, err := q.query(ctx, q.listAgentsByProfileIDStmt, listAgentsByProfileID, profileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Agent
	for rows.Next() {
		var i Agent
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.Hostname,
			&i.PublicIp,
			&i.PrivateIps,
			&i.Containers,
			&i.ActiveIp,
			&i.Token,
			&i.LastSeen,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProfiles = `-- name: ListProfiles :many
SELECT
    id, name, url, username, password, tls
FROM
    profiles
`

func (q *Queries) ListProfiles(ctx context.Context) ([]Profile, error) {
	rows, err := q.query(ctx, q.listProfilesStmt, listProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.Username,
			&i.Password,
			&i.Tls,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProviders = `-- name: ListProviders :many
SELECT
    id, name, type, external_ip, api_key, api_url, zone_type, proxied, is_active
FROM
    providers
`

func (q *Queries) ListProviders(ctx context.Context) ([]Provider, error) {
	rows, err := q.query(ctx, q.listProvidersStmt, listProviders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Provider
	for rows.Next() {
		var i Provider
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.ExternalIp,
			&i.ApiKey,
			&i.ApiUrl,
			&i.ZoneType,
			&i.Proxied,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSettings = `-- name: ListSettings :many
SELECT
    id, "key", value
FROM
    settings
`

func (q *Queries) ListSettings(ctx context.Context) ([]Setting, error) {
	rows, err := q.query(ctx, q.listSettingsStmt, listSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Setting
	for rows.Next() {
		var i Setting
		if err := rows.Scan(&i.ID, &i.Key, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT
    id, username, password, email, is_admin, last_login
FROM
    users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.listUsersStmt, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Email,
			&i.IsAdmin,
			&i.LastLogin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSetting = `-- name: UpdateSetting :one
UPDATE settings
SET
    value = ?
WHERE
    key = ? RETURNING id, "key", value
`

type UpdateSettingParams struct {
	Value string `json:"value"`
	Key   string `json:"key"`
}

func (q *Queries) UpdateSetting(ctx context.Context, arg UpdateSettingParams) (Setting, error) {
	row := q.queryRow(ctx, q.updateSettingStmt, updateSetting, arg.Value, arg.Key)
	var i Setting
	err := row.Scan(&i.ID, &i.Key, &i.Value)
	return i, err
}

const upsertAgent = `-- name: UpsertAgent :one
INSERT INTO
    agents (
        id,
        profile_id,
        hostname,
        public_ip,
        private_ips,
        containers,
        active_ip,
        token,
        last_seen
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?, ?) ON CONFLICT (id) DO
UPDATE
SET
    profile_id = COALESCE(NULLIF(EXCLUDED.profile_id, 0), agents.profile_id),
    hostname = COALESCE(NULLIF(EXCLUDED.hostname, ''), agents.hostname),
    public_ip = COALESCE(NULLIF(EXCLUDED.public_ip, ''), agents.public_ip),
    private_ips = COALESCE(
        NULLIF(EXCLUDED.private_ips, ''),
        agents.private_ips
    ),
    containers = COALESCE(
        NULLIF(EXCLUDED.containers, ''),
        agents.containers
    ),
    active_ip = COALESCE(NULLIF(EXCLUDED.active_ip, ''), agents.active_ip),
    token = COALESCE(NULLIF(EXCLUDED.token, ''), agents.token),
    last_seen = COALESCE(NULLIF(EXCLUDED.last_seen, ''), agents.last_seen) RETURNING id, profile_id, hostname, public_ip, private_ips, containers, active_ip, token, last_seen
`

type UpsertAgentParams struct {
	ID         string     `json:"id"`
	ProfileID  int64      `json:"profileId"`
	Hostname   string     `json:"hostname"`
	PublicIp   *string    `json:"publicIp"`
	PrivateIps *string    `json:"privateIps"`
	Containers *string    `json:"containers"`
	ActiveIp   *string    `json:"activeIp"`
	Token      string     `json:"token"`
	LastSeen   *time.Time `json:"lastSeen"`
}

func (q *Queries) UpsertAgent(ctx context.Context, arg UpsertAgentParams) (Agent, error) {
	row := q.queryRow(ctx, q.upsertAgentStmt, upsertAgent,
		arg.ID,
		arg.ProfileID,
		arg.Hostname,
		arg.PublicIp,
		arg.PrivateIps,
		arg.Containers,
		arg.ActiveIp,
		arg.Token,
		arg.LastSeen,
	)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.Hostname,
		&i.PublicIp,
		&i.PrivateIps,
		&i.Containers,
		&i.ActiveIp,
		&i.Token,
		&i.LastSeen,
	)
	return i, err
}

const upsertInternalHTTPMiddleware = `-- name: UpsertInternalHTTPMiddleware :exec
UPDATE traefik_api
SET
    internal = json_set (
        CASE
            WHEN json_extract (internal, '$.middlewares') IS NULL THEN json_set (internal, '$.middlewares', json ('{}'))
            ELSE internal
        END,
        '$.middlewares.' || ?2,
        json (?3)
    )
WHERE
    profile_id = ?
`

type UpsertInternalHTTPMiddlewareParams struct {
	Name      *string     `json:"name"`
	Body      interface{} `json:"body"`
	ProfileID int64       `json:"profileId"`
}

func (q *Queries) UpsertInternalHTTPMiddleware(ctx context.Context, arg UpsertInternalHTTPMiddlewareParams) error {
	_, err := q.exec(ctx, q.upsertInternalHTTPMiddlewareStmt, upsertInternalHTTPMiddleware, arg.Name, arg.Body, arg.ProfileID)
	return err
}

const upsertInternalHTTPRouter = `-- name: UpsertInternalHTTPRouter :exec
UPDATE traefik_api
SET
    internal = json_set (
        CASE
            WHEN json_extract (internal, '$.routers') IS NULL THEN json_set (internal, '$.routers', json ('{}'))
            ELSE internal
        END,
        '$.routers.' || ?2,
        json (?3)
    )
WHERE
    profile_id = ?
`

type UpsertInternalHTTPRouterParams struct {
	Name      *string     `json:"name"`
	Body      interface{} `json:"body"`
	ProfileID int64       `json:"profileId"`
}

func (q *Queries) UpsertInternalHTTPRouter(ctx context.Context, arg UpsertInternalHTTPRouterParams) error {
	_, err := q.exec(ctx, q.upsertInternalHTTPRouterStmt, upsertInternalHTTPRouter, arg.Name, arg.Body, arg.ProfileID)
	return err
}

const upsertInternalHTTPService = `-- name: UpsertInternalHTTPService :exec
UPDATE traefik_api
SET
    internal = json_set (
        CASE
            WHEN json_extract (internal, '$.services') IS NULL THEN json_set (internal, '$.services', json ('{}'))
            ELSE internal
        END,
        '$.services.' || ?2,
        json (?3)
    )
WHERE
    profile_id = ?
`

type UpsertInternalHTTPServiceParams struct {
	Name      *string     `json:"name"`
	Body      interface{} `json:"body"`
	ProfileID int64       `json:"profileId"`
}

func (q *Queries) UpsertInternalHTTPService(ctx context.Context, arg UpsertInternalHTTPServiceParams) error {
	_, err := q.exec(ctx, q.upsertInternalHTTPServiceStmt, upsertInternalHTTPService, arg.Name, arg.Body, arg.ProfileID)
	return err
}

const upsertInternalTCPMiddleware = `-- name: UpsertInternalTCPMiddleware :exec
UPDATE traefik_api
SET
    internal = json_set (
        CASE
            WHEN json_extract (internal, '$.tcpMiddlewares') IS NULL THEN json_set (internal, '$.tcpMiddlewares', json ('{}'))
            ELSE internal
        END,
        '$.tcpMiddlewares.' || ?2,
        json (?3)
    )
WHERE
    profile_id = ?
`

type UpsertInternalTCPMiddlewareParams struct {
	Name      *string     `json:"name"`
	Body      interface{} `json:"body"`
	ProfileID int64       `json:"profileId"`
}

func (q *Queries) UpsertInternalTCPMiddleware(ctx context.Context, arg UpsertInternalTCPMiddlewareParams) error {
	_, err := q.exec(ctx, q.upsertInternalTCPMiddlewareStmt, upsertInternalTCPMiddleware, arg.Name, arg.Body, arg.ProfileID)
	return err
}

const upsertInternalTCPRouter = `-- name: UpsertInternalTCPRouter :exec
UPDATE traefik_api
SET
    internal = json_set (
        CASE
            WHEN json_extract (internal, '$.tcpRouters') IS NULL THEN json_set (internal, '$.tcpRouters', json ('{}'))
            ELSE internal
        END,
        '$.tcpRouters.' || ?2,
        json (?3)
    )
WHERE
    profile_id = ?
`

type UpsertInternalTCPRouterParams struct {
	Name      *string     `json:"name"`
	Body      interface{} `json:"body"`
	ProfileID int64       `json:"profileId"`
}

func (q *Queries) UpsertInternalTCPRouter(ctx context.Context, arg UpsertInternalTCPRouterParams) error {
	_, err := q.exec(ctx, q.upsertInternalTCPRouterStmt, upsertInternalTCPRouter, arg.Name, arg.Body, arg.ProfileID)
	return err
}

const upsertInternalTCPService = `-- name: UpsertInternalTCPService :exec
UPDATE traefik_api
SET
    internal = json_set (
        CASE
            WHEN json_extract (internal, '$.tcpServices') IS NULL THEN json_set (internal, '$.tcpServices', json ('{}'))
            ELSE internal
        END,
        '$.tcpServices.' || ?2,
        json (?3)
    )
WHERE
    profile_id = ?
`

type UpsertInternalTCPServiceParams struct {
	Name      *string     `json:"name"`
	Body      interface{} `json:"body"`
	ProfileID int64       `json:"profileId"`
}

func (q *Queries) UpsertInternalTCPService(ctx context.Context, arg UpsertInternalTCPServiceParams) error {
	_, err := q.exec(ctx, q.upsertInternalTCPServiceStmt, upsertInternalTCPService, arg.Name, arg.Body, arg.ProfileID)
	return err
}

const upsertInternalUDPRouter = `-- name: UpsertInternalUDPRouter :exec
UPDATE traefik_api
SET
    internal = json_set (
        CASE
            WHEN json_extract (internal, '$.udpRouters') IS NULL THEN json_set (internal, '$.udpRouters', json ('{}'))
            ELSE internal
        END,
        '$.udpRouters.' || ?2,
        json (?3)
    )
WHERE
    profile_id = ?
`

type UpsertInternalUDPRouterParams struct {
	Name      *string     `json:"name"`
	Body      interface{} `json:"body"`
	ProfileID int64       `json:"profileId"`
}

func (q *Queries) UpsertInternalUDPRouter(ctx context.Context, arg UpsertInternalUDPRouterParams) error {
	_, err := q.exec(ctx, q.upsertInternalUDPRouterStmt, upsertInternalUDPRouter, arg.Name, arg.Body, arg.ProfileID)
	return err
}

const upsertInternalUDPService = `-- name: UpsertInternalUDPService :exec
UPDATE traefik_api
SET
    internal = json_set (
        CASE
            WHEN json_extract (internal, '$.udpServices') IS NULL THEN json_set (internal, '$.udpServices', json ('{}'))
            ELSE internal
        END,
        '$.udpServices.' || ?2,
        json (?3)
    )
WHERE
    profile_id = ?
`

type UpsertInternalUDPServiceParams struct {
	Name      *string     `json:"name"`
	Body      interface{} `json:"body"`
	ProfileID int64       `json:"profileId"`
}

func (q *Queries) UpsertInternalUDPService(ctx context.Context, arg UpsertInternalUDPServiceParams) error {
	_, err := q.exec(ctx, q.upsertInternalUDPServiceStmt, upsertInternalUDPService, arg.Name, arg.Body, arg.ProfileID)
	return err
}

const upsertProfile = `-- name: UpsertProfile :one
INSERT INTO
    profiles (name, url, username, password, tls)
VALUES
    (?, ?, ?, ?, ?) ON CONFLICT (name) DO
UPDATE
SET
    url = EXCLUDED.url,
    username = EXCLUDED.username,
    password = EXCLUDED.password,
    tls = EXCLUDED.tls RETURNING id, name, url, username, password, tls
`

type UpsertProfileParams struct {
	Name     string  `json:"name"`
	Url      string  `json:"url"`
	Username *string `json:"username"`
	Password *string `json:"password"`
	Tls      bool    `json:"tls"`
}

func (q *Queries) UpsertProfile(ctx context.Context, arg UpsertProfileParams) (Profile, error) {
	row := q.queryRow(ctx, q.upsertProfileStmt, upsertProfile,
		arg.Name,
		arg.Url,
		arg.Username,
		arg.Password,
		arg.Tls,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.Username,
		&i.Password,
		&i.Tls,
	)
	return i, err
}

const upsertProvider = `-- name: UpsertProvider :one
INSERT INTO
    providers (
        name,
        type,
        external_ip,
        api_key,
        api_url,
        zone_type,
        proxied,
        is_active
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?) ON CONFLICT (name) DO
UPDATE
SET
    type = EXCLUDED.type,
    external_ip = EXCLUDED.external_ip,
    api_key = EXCLUDED.api_key,
    api_url = EXCLUDED.api_url,
    zone_type = EXCLUDED.zone_type,
    proxied = EXCLUDED.proxied,
    is_active = EXCLUDED.is_active RETURNING id, name, type, external_ip, api_key, api_url, zone_type, proxied, is_active
`

type UpsertProviderParams struct {
	Name       string  `json:"name"`
	Type       string  `json:"type"`
	ExternalIp string  `json:"externalIp"`
	ApiKey     string  `json:"apiKey"`
	ApiUrl     *string `json:"apiUrl"`
	ZoneType   *string `json:"zoneType"`
	Proxied    bool    `json:"proxied"`
	IsActive   bool    `json:"isActive"`
}

func (q *Queries) UpsertProvider(ctx context.Context, arg UpsertProviderParams) (Provider, error) {
	row := q.queryRow(ctx, q.upsertProviderStmt, upsertProvider,
		arg.Name,
		arg.Type,
		arg.ExternalIp,
		arg.ApiKey,
		arg.ApiUrl,
		arg.ZoneType,
		arg.Proxied,
		arg.IsActive,
	)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.ExternalIp,
		&i.ApiKey,
		&i.ApiUrl,
		&i.ZoneType,
		&i.Proxied,
		&i.IsActive,
	)
	return i, err
}

const upsertTraefikConfig = `-- name: UpsertTraefikConfig :one
INSERT INTO
    traefik_api (
        profile_id,
        entrypoints,
        overview,
        external,
        internal
    )
VALUES
    (?, ?, ?, ?, ?) ON CONFLICT (profile_id) DO
UPDATE
SET
    entrypoints = excluded.entrypoints,
    overview = excluded.overview,
    external = excluded.external,
    internal = excluded.internal RETURNING profile_id, entrypoints, overview, external, internal
`

type UpsertTraefikConfigParams struct {
	ProfileID   int64               `json:"profileId"`
	Entrypoints *TraefikEntryPoints `json:"entrypoints"`
	Overview    *TraefikOverview    `json:"overview"`
	External    *TraefikConfig      `json:"external"`
	Internal    *TraefikConfig      `json:"internal"`
}

func (q *Queries) UpsertTraefikConfig(ctx context.Context, arg UpsertTraefikConfigParams) (TraefikApi, error) {
	row := q.queryRow(ctx, q.upsertTraefikConfigStmt, upsertTraefikConfig,
		arg.ProfileID,
		arg.Entrypoints,
		arg.Overview,
		arg.External,
		arg.Internal,
	)
	var i TraefikApi
	err := row.Scan(
		&i.ProfileID,
		&i.Entrypoints,
		&i.Overview,
		&i.External,
		&i.Internal,
	)
	return i, err
}

const upsertUser = `-- name: UpsertUser :one
INSERT INTO
    users (username, password, email, is_admin)
VALUES
    (?, ?, ?, ?) ON CONFLICT (username) DO
UPDATE
SET
    password = CASE
        WHEN EXCLUDED.password != '' THEN EXCLUDED.password
        ELSE users.password
    END,
    email = EXCLUDED.email,
    is_admin = EXCLUDED.is_admin RETURNING id, username, password, email, is_admin, last_login
`

type UpsertUserParams struct {
	Username string  `json:"username"`
	Password string  `json:"password"`
	Email    *string `json:"email"`
	IsAdmin  bool    `json:"isAdmin"`
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) (User, error) {
	row := q.queryRow(ctx, q.upsertUserStmt, upsertUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.IsAdmin,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.IsAdmin,
		&i.LastLogin,
	)
	return i, err
}
