// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
  users (username, password, email, is_admin)
VALUES
  (?, ?, ?, ?) RETURNING id
`

type CreateUserParams struct {
	Username string  `json:"username"`
	Password string  `json:"password"`
	Email    *string `json:"email"`
	IsAdmin  bool    `json:"isAdmin"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.IsAdmin,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE
  id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
  id,
  username,
  email,
  is_admin,
  otp,
  otp_expiry,
  last_login,
  created_at,
  updated_at
FROM
  users
WHERE
  id = ?
`

type GetUserRow struct {
	ID        int64      `json:"id"`
	Username  string     `json:"username"`
	Email     *string    `json:"email"`
	IsAdmin   bool       `json:"isAdmin"`
	Otp       *string    `json:"otp"`
	OtpExpiry *time.Time `json:"otpExpiry"`
	LastLogin *time.Time `json:"lastLogin"`
	CreatedAt *time.Time `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt"`
}

func (q *Queries) GetUser(ctx context.Context, id int64) (GetUserRow, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.IsAdmin,
		&i.Otp,
		&i.OtpExpiry,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
  id,
  username,
  email,
  is_admin,
  otp,
  otp_expiry,
  last_login,
  created_at,
  updated_at
FROM
  users
WHERE
  email = ?
`

type GetUserByEmailRow struct {
	ID        int64      `json:"id"`
	Username  string     `json:"username"`
	Email     *string    `json:"email"`
	IsAdmin   bool       `json:"isAdmin"`
	Otp       *string    `json:"otp"`
	OtpExpiry *time.Time `json:"otpExpiry"`
	LastLogin *time.Time `json:"lastLogin"`
	CreatedAt *time.Time `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email *string) (GetUserByEmailRow, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.IsAdmin,
		&i.Otp,
		&i.OtpExpiry,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT
  id,
  username,
  email,
  is_admin,
  otp,
  otp_expiry,
  last_login,
  created_at,
  updated_at
FROM
  users
WHERE
  username = ?
`

type GetUserByUsernameRow struct {
	ID        int64      `json:"id"`
	Username  string     `json:"username"`
	Email     *string    `json:"email"`
	IsAdmin   bool       `json:"isAdmin"`
	Otp       *string    `json:"otp"`
	OtpExpiry *time.Time `json:"otpExpiry"`
	LastLogin *time.Time `json:"lastLogin"`
	CreatedAt *time.Time `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt"`
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.queryRow(ctx, q.getUserByUsernameStmt, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.IsAdmin,
		&i.Otp,
		&i.OtpExpiry,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserPassword = `-- name: GetUserPassword :one
SELECT
  password
FROM
  users
WHERE
  id = ?
`

func (q *Queries) GetUserPassword(ctx context.Context, id int64) (string, error) {
	row := q.queryRow(ctx, q.getUserPasswordStmt, getUserPassword, id)
	var password string
	err := row.Scan(&password)
	return password, err
}

const listUsers = `-- name: ListUsers :many
SELECT
  id,
  username,
  email,
  is_admin,
  otp,
  otp_expiry,
  last_login,
  created_at,
  updated_at
FROM
  users
ORDER BY
  username
`

type ListUsersRow struct {
	ID        int64      `json:"id"`
	Username  string     `json:"username"`
	Email     *string    `json:"email"`
	IsAdmin   bool       `json:"isAdmin"`
	Otp       *string    `json:"otp"`
	OtpExpiry *time.Time `json:"otpExpiry"`
	LastLogin *time.Time `json:"lastLogin"`
	CreatedAt *time.Time `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt"`
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.query(ctx, q.listUsersStmt, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.IsAdmin,
			&i.Otp,
			&i.OtpExpiry,
			&i.LastLogin,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
  username = ?,
  email = ?,
  is_admin = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE
  id = ?
`

type UpdateUserParams struct {
	Username string  `json:"username"`
	Email    *string `json:"email"`
	IsAdmin  bool    `json:"isAdmin"`
	ID       int64   `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.exec(ctx, q.updateUserStmt, updateUser,
		arg.Username,
		arg.Email,
		arg.IsAdmin,
		arg.ID,
	)
	return err
}

const updateUserLastLogin = `-- name: UpdateUserLastLogin :exec
UPDATE users
SET
  last_login = CURRENT_TIMESTAMP
WHERE
  id = ?
`

func (q *Queries) UpdateUserLastLogin(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.updateUserLastLoginStmt, updateUserLastLogin, id)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET
  password = ?,
  otp = '',
  otp_expiry = NULL
WHERE
  id = ?
`

type UpdateUserPasswordParams struct {
	Password string `json:"password"`
	ID       int64  `json:"id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.exec(ctx, q.updateUserPasswordStmt, updateUserPassword, arg.Password, arg.ID)
	return err
}

const updateUserResetToken = `-- name: UpdateUserResetToken :exec
UPDATE users
SET
  otp = ?,
  otp_expiry = ?
WHERE
  id = ?
`

type UpdateUserResetTokenParams struct {
	Otp       *string    `json:"otp"`
	OtpExpiry *time.Time `json:"otpExpiry"`
	ID        int64      `json:"id"`
}

func (q *Queries) UpdateUserResetToken(ctx context.Context, arg UpdateUserResetTokenParams) error {
	_, err := q.exec(ctx, q.updateUserResetTokenStmt, updateUserResetToken, arg.Otp, arg.OtpExpiry, arg.ID)
	return err
}
