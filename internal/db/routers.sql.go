// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: routers.sql

package db

import (
	"context"

	"github.com/MizuchiLabs/mantrae/internal/source"
)

const deleteHTTPRouter = `-- name: DeleteHTTPRouter :exec
UPDATE traefik_config
SET
    config = json_remove (config, '$.routers.' || ?3),
    last_sync = CURRENT_TIMESTAMP
WHERE
    profile_id = ?
    AND source = ?
`

type DeleteHTTPRouterParams struct {
	Name      *string       `json:"name"`
	ProfileID int64         `json:"profileId"`
	Source    source.Source `json:"source"`
}

func (q *Queries) DeleteHTTPRouter(ctx context.Context, arg DeleteHTTPRouterParams) error {
	_, err := q.exec(ctx, q.deleteHTTPRouterStmt, deleteHTTPRouter, arg.Name, arg.ProfileID, arg.Source)
	return err
}

const deleteTCPRouter = `-- name: DeleteTCPRouter :exec
UPDATE traefik_config
SET
    config = json_remove (config, '$.tcpRouters.' || ?3),
    last_sync = CURRENT_TIMESTAMP
WHERE
    profile_id = ?
    AND source = ?
`

type DeleteTCPRouterParams struct {
	Name      *string       `json:"name"`
	ProfileID int64         `json:"profileId"`
	Source    source.Source `json:"source"`
}

func (q *Queries) DeleteTCPRouter(ctx context.Context, arg DeleteTCPRouterParams) error {
	_, err := q.exec(ctx, q.deleteTCPRouterStmt, deleteTCPRouter, arg.Name, arg.ProfileID, arg.Source)
	return err
}

const deleteUDPRouter = `-- name: DeleteUDPRouter :exec
UPDATE traefik_config
SET
    config = json_remove (config, '$.udpRouters.' || ?3),
    last_sync = CURRENT_TIMESTAMP
WHERE
    profile_id = ?
    AND source = ?
`

type DeleteUDPRouterParams struct {
	Name      *string       `json:"name"`
	ProfileID int64         `json:"profileId"`
	Source    source.Source `json:"source"`
}

func (q *Queries) DeleteUDPRouter(ctx context.Context, arg DeleteUDPRouterParams) error {
	_, err := q.exec(ctx, q.deleteUDPRouterStmt, deleteUDPRouter, arg.Name, arg.ProfileID, arg.Source)
	return err
}

const getHTTPRouterByName = `-- name: GetHTTPRouterByName :one
SELECT
    json_extract (config, '$.routers.' || ?3) as router
FROM
    traefik_config
WHERE
    profile_id = ?
    AND source = ?
`

type GetHTTPRouterByNameParams struct {
	Name      *string       `json:"name"`
	ProfileID int64         `json:"profileId"`
	Source    source.Source `json:"source"`
}

func (q *Queries) GetHTTPRouterByName(ctx context.Context, arg GetHTTPRouterByNameParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getHTTPRouterByNameStmt, getHTTPRouterByName, arg.Name, arg.ProfileID, arg.Source)
	var router interface{}
	err := row.Scan(&router)
	return router, err
}

const getHTTPRoutersBySource = `-- name: GetHTTPRoutersBySource :one
SELECT
    json_extract (config, '$.routers') as routers
FROM
    traefik_config
WHERE
    profile_id = ?
    AND source = ?
`

type GetHTTPRoutersBySourceParams struct {
	ProfileID int64         `json:"profileId"`
	Source    source.Source `json:"source"`
}

func (q *Queries) GetHTTPRoutersBySource(ctx context.Context, arg GetHTTPRoutersBySourceParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getHTTPRoutersBySourceStmt, getHTTPRoutersBySource, arg.ProfileID, arg.Source)
	var routers interface{}
	err := row.Scan(&routers)
	return routers, err
}

const getTCPRouterByName = `-- name: GetTCPRouterByName :one
SELECT
    json_extract (config, '$.tcpRouters.' || ?3) as router
FROM
    traefik_config
WHERE
    profile_id = ?
    AND source = ?
`

type GetTCPRouterByNameParams struct {
	Name      *string       `json:"name"`
	ProfileID int64         `json:"profileId"`
	Source    source.Source `json:"source"`
}

func (q *Queries) GetTCPRouterByName(ctx context.Context, arg GetTCPRouterByNameParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getTCPRouterByNameStmt, getTCPRouterByName, arg.Name, arg.ProfileID, arg.Source)
	var router interface{}
	err := row.Scan(&router)
	return router, err
}

const getTCPRoutersBySource = `-- name: GetTCPRoutersBySource :one
SELECT
    json_extract (config, '$.tcpRouters') as routers
FROM
    traefik_config
WHERE
    profile_id = ?
    AND source = ?
`

type GetTCPRoutersBySourceParams struct {
	ProfileID int64         `json:"profileId"`
	Source    source.Source `json:"source"`
}

func (q *Queries) GetTCPRoutersBySource(ctx context.Context, arg GetTCPRoutersBySourceParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getTCPRoutersBySourceStmt, getTCPRoutersBySource, arg.ProfileID, arg.Source)
	var routers interface{}
	err := row.Scan(&routers)
	return routers, err
}

const getUDPRouterByName = `-- name: GetUDPRouterByName :one
SELECT
    json_extract (config, '$.udpRouters.' || ?3) as router
FROM
    traefik_config
WHERE
    profile_id = ?
    AND source = ?
`

type GetUDPRouterByNameParams struct {
	Name      *string       `json:"name"`
	ProfileID int64         `json:"profileId"`
	Source    source.Source `json:"source"`
}

func (q *Queries) GetUDPRouterByName(ctx context.Context, arg GetUDPRouterByNameParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getUDPRouterByNameStmt, getUDPRouterByName, arg.Name, arg.ProfileID, arg.Source)
	var router interface{}
	err := row.Scan(&router)
	return router, err
}

const getUDPRoutersBySource = `-- name: GetUDPRoutersBySource :one
SELECT
    json_extract (config, '$.udpRouters') as routers
FROM
    traefik_config
WHERE
    profile_id = ?
    AND source = ?
`

type GetUDPRoutersBySourceParams struct {
	ProfileID int64         `json:"profileId"`
	Source    source.Source `json:"source"`
}

func (q *Queries) GetUDPRoutersBySource(ctx context.Context, arg GetUDPRoutersBySourceParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getUDPRoutersBySourceStmt, getUDPRoutersBySource, arg.ProfileID, arg.Source)
	var routers interface{}
	err := row.Scan(&routers)
	return routers, err
}

const upsertHTTPRouter = `-- name: UpsertHTTPRouter :exec
UPDATE traefik_config
SET
    config = json_set (
        config,
        '$.routers.' || ?3,
        ?4
    ),
    last_sync = CURRENT_TIMESTAMP
WHERE
    profile_id = ?
    AND source = ?
`

type UpsertHTTPRouterParams struct {
	Name       *string       `json:"name"`
	RouterJson interface{}   `json:"routerJson"`
	ProfileID  int64         `json:"profileId"`
	Source     source.Source `json:"source"`
}

func (q *Queries) UpsertHTTPRouter(ctx context.Context, arg UpsertHTTPRouterParams) error {
	_, err := q.exec(ctx, q.upsertHTTPRouterStmt, upsertHTTPRouter,
		arg.Name,
		arg.RouterJson,
		arg.ProfileID,
		arg.Source,
	)
	return err
}

const upsertTCPRouter = `-- name: UpsertTCPRouter :exec
UPDATE traefik_config
SET
    config = json_set (
        config,
        '$.tcpRouters.' || ?3,
        ?4
    ),
    last_sync = CURRENT_TIMESTAMP
WHERE
    profile_id = ?
    AND source = ?
`

type UpsertTCPRouterParams struct {
	Name       *string       `json:"name"`
	RouterJson interface{}   `json:"routerJson"`
	ProfileID  int64         `json:"profileId"`
	Source     source.Source `json:"source"`
}

func (q *Queries) UpsertTCPRouter(ctx context.Context, arg UpsertTCPRouterParams) error {
	_, err := q.exec(ctx, q.upsertTCPRouterStmt, upsertTCPRouter,
		arg.Name,
		arg.RouterJson,
		arg.ProfileID,
		arg.Source,
	)
	return err
}

const upsertUDPRouter = `-- name: UpsertUDPRouter :exec
UPDATE traefik_config
SET
    config = json_set (
        config,
        '$.udpRouters.' || ?3,
        ?4
    ),
    last_sync = CURRENT_TIMESTAMP
WHERE
    profile_id = ?
    AND source = ?
`

type UpsertUDPRouterParams struct {
	Name       *string       `json:"name"`
	RouterJson interface{}   `json:"routerJson"`
	ProfileID  int64         `json:"profileId"`
	Source     source.Source `json:"source"`
}

func (q *Queries) UpsertUDPRouter(ctx context.Context, arg UpsertUDPRouterParams) error {
	_, err := q.exec(ctx, q.upsertUDPRouterStmt, upsertUDPRouter,
		arg.Name,
		arg.RouterJson,
		arg.ProfileID,
		arg.Source,
	)
	return err
}
