// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: services.sql

package db

import (
	"context"
)

const deleteHTTPService = `-- name: DeleteHTTPService :exec
UPDATE traefik_config
SET
    config = json_remove (config, '$.services.' || ?3),
    last_sync = CURRENT_TIMESTAMP
WHERE
    profile_id = ?
    AND source = ?
`

type DeleteHTTPServiceParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
	Source    string  `json:"source"`
}

func (q *Queries) DeleteHTTPService(ctx context.Context, arg DeleteHTTPServiceParams) error {
	_, err := q.exec(ctx, q.deleteHTTPServiceStmt, deleteHTTPService, arg.Name, arg.ProfileID, arg.Source)
	return err
}

const deleteTCPService = `-- name: DeleteTCPService :exec
UPDATE traefik_config
SET
    config = json_remove (config, '$.tcpServices.' || ?3),
    last_sync = CURRENT_TIMESTAMP
WHERE
    profile_id = ?
    AND source = ?
`

type DeleteTCPServiceParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
	Source    string  `json:"source"`
}

func (q *Queries) DeleteTCPService(ctx context.Context, arg DeleteTCPServiceParams) error {
	_, err := q.exec(ctx, q.deleteTCPServiceStmt, deleteTCPService, arg.Name, arg.ProfileID, arg.Source)
	return err
}

const deleteUDPService = `-- name: DeleteUDPService :exec
UPDATE traefik_config
SET
    config = json_remove (config, '$.udpServices.' || ?3),
    last_sync = CURRENT_TIMESTAMP
WHERE
    profile_id = ?
    AND source = ?
`

type DeleteUDPServiceParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
	Source    string  `json:"source"`
}

func (q *Queries) DeleteUDPService(ctx context.Context, arg DeleteUDPServiceParams) error {
	_, err := q.exec(ctx, q.deleteUDPServiceStmt, deleteUDPService, arg.Name, arg.ProfileID, arg.Source)
	return err
}

const getHTTPServiceByName = `-- name: GetHTTPServiceByName :one
SELECT
    json_extract (external, '$.services.' || ?3) as service
FROM
    traefik_config
WHERE
    profile_id = ?
    AND source = ?
`

type GetHTTPServiceByNameParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
	Source    string  `json:"source"`
}

func (q *Queries) GetHTTPServiceByName(ctx context.Context, arg GetHTTPServiceByNameParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getHTTPServiceByNameStmt, getHTTPServiceByName, arg.Name, arg.ProfileID, arg.Source)
	var service interface{}
	err := row.Scan(&service)
	return service, err
}

const getHTTPServicesBySource = `-- name: GetHTTPServicesBySource :one
SELECT
    json_extract (config, '$.services') as services
FROM
    traefik_config
WHERE
    profile_id = ?
    AND source = ?
`

type GetHTTPServicesBySourceParams struct {
	ProfileID int64  `json:"profileId"`
	Source    string `json:"source"`
}

func (q *Queries) GetHTTPServicesBySource(ctx context.Context, arg GetHTTPServicesBySourceParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getHTTPServicesBySourceStmt, getHTTPServicesBySource, arg.ProfileID, arg.Source)
	var services interface{}
	err := row.Scan(&services)
	return services, err
}

const getTCPServiceByName = `-- name: GetTCPServiceByName :one
SELECT
    json_extract (external, '$.tcpServices.' || ?3) as service
FROM
    traefik_config
WHERE
    profile_id = ?
    AND source = ?
`

type GetTCPServiceByNameParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
	Source    string  `json:"source"`
}

func (q *Queries) GetTCPServiceByName(ctx context.Context, arg GetTCPServiceByNameParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getTCPServiceByNameStmt, getTCPServiceByName, arg.Name, arg.ProfileID, arg.Source)
	var service interface{}
	err := row.Scan(&service)
	return service, err
}

const getTCPServicesBySource = `-- name: GetTCPServicesBySource :one
SELECT
    json_extract (config, '$.tcpServices') as services
FROM
    traefik_config
WHERE
    profile_id = ?
    AND source = ?
`

type GetTCPServicesBySourceParams struct {
	ProfileID int64  `json:"profileId"`
	Source    string `json:"source"`
}

func (q *Queries) GetTCPServicesBySource(ctx context.Context, arg GetTCPServicesBySourceParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getTCPServicesBySourceStmt, getTCPServicesBySource, arg.ProfileID, arg.Source)
	var services interface{}
	err := row.Scan(&services)
	return services, err
}

const getUDPServiceByName = `-- name: GetUDPServiceByName :one
SELECT
    json_extract (external, '$.udpServices.' || ?3) as service
FROM
    traefik_config
WHERE
    profile_id = ?
    AND source = ?
`

type GetUDPServiceByNameParams struct {
	Name      *string `json:"name"`
	ProfileID int64   `json:"profileId"`
	Source    string  `json:"source"`
}

func (q *Queries) GetUDPServiceByName(ctx context.Context, arg GetUDPServiceByNameParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getUDPServiceByNameStmt, getUDPServiceByName, arg.Name, arg.ProfileID, arg.Source)
	var service interface{}
	err := row.Scan(&service)
	return service, err
}

const getUDPServicesBySource = `-- name: GetUDPServicesBySource :one
SELECT
    json_extract (config, '$.udpServices') as services
FROM
    traefik_config
WHERE
    profile_id = ?
    AND source = ?
`

type GetUDPServicesBySourceParams struct {
	ProfileID int64  `json:"profileId"`
	Source    string `json:"source"`
}

func (q *Queries) GetUDPServicesBySource(ctx context.Context, arg GetUDPServicesBySourceParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getUDPServicesBySourceStmt, getUDPServicesBySource, arg.ProfileID, arg.Source)
	var services interface{}
	err := row.Scan(&services)
	return services, err
}

const upsertHTTPService = `-- name: UpsertHTTPService :exec
UPDATE traefik_config
SET
    config = json_set (
        config,
        '$.services.' || ?3,
        ?4
    ),
    last_sync = CURRENT_TIMESTAMP
WHERE
    profile_id = ?
    AND source = ?
`

type UpsertHTTPServiceParams struct {
	Name        *string     `json:"name"`
	ServiceJson interface{} `json:"serviceJson"`
	ProfileID   int64       `json:"profileId"`
	Source      string      `json:"source"`
}

func (q *Queries) UpsertHTTPService(ctx context.Context, arg UpsertHTTPServiceParams) error {
	_, err := q.exec(ctx, q.upsertHTTPServiceStmt, upsertHTTPService,
		arg.Name,
		arg.ServiceJson,
		arg.ProfileID,
		arg.Source,
	)
	return err
}

const upsertTCPService = `-- name: UpsertTCPService :exec
UPDATE traefik_config
SET
    config = json_set (
        config,
        '$.tcpServices.' || ?3,
        ?4
    ),
    last_sync = CURRENT_TIMESTAMP
WHERE
    profile_id = ?
    AND source = ?
`

type UpsertTCPServiceParams struct {
	Name        *string     `json:"name"`
	ServiceJson interface{} `json:"serviceJson"`
	ProfileID   int64       `json:"profileId"`
	Source      string      `json:"source"`
}

func (q *Queries) UpsertTCPService(ctx context.Context, arg UpsertTCPServiceParams) error {
	_, err := q.exec(ctx, q.upsertTCPServiceStmt, upsertTCPService,
		arg.Name,
		arg.ServiceJson,
		arg.ProfileID,
		arg.Source,
	)
	return err
}

const upsertUDPService = `-- name: UpsertUDPService :exec
UPDATE traefik_config
SET
    config = json_set (
        config,
        '$.udpServices.' || ?3,
        ?4
    ),
    last_sync = CURRENT_TIMESTAMP
WHERE
    profile_id = ?
    AND source = ?
`

type UpsertUDPServiceParams struct {
	Name        *string     `json:"name"`
	ServiceJson interface{} `json:"serviceJson"`
	ProfileID   int64       `json:"profileId"`
	Source      string      `json:"source"`
}

func (q *Queries) UpsertUDPService(ctx context.Context, arg UpsertUDPServiceParams) error {
	_, err := q.exec(ctx, q.upsertUDPServiceStmt, upsertUDPService,
		arg.Name,
		arg.ServiceJson,
		arg.ProfileID,
		arg.Source,
	)
	return err
}
