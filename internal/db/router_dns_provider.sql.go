// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: router_dns_provider.sql

package db

import (
	"context"
)

const addRouterDNSProvider = `-- name: AddRouterDNSProvider :exec
INSERT INTO
  router_dns_provider (traefik_id, provider_id, router_name)
VALUES
  (?, ?, ?)
`

type AddRouterDNSProviderParams struct {
	TraefikID  int64  `json:"traefikId"`
	ProviderID int64  `json:"providerId"`
	RouterName string `json:"routerName"`
}

func (q *Queries) AddRouterDNSProvider(ctx context.Context, arg AddRouterDNSProviderParams) error {
	_, err := q.exec(ctx, q.addRouterDNSProviderStmt, addRouterDNSProvider, arg.TraefikID, arg.ProviderID, arg.RouterName)
	return err
}

const deleteRouterDNSProvider = `-- name: DeleteRouterDNSProvider :exec
DELETE FROM router_dns_provider
WHERE
  traefik_id = ?
  AND router_name = ?
  AND provider_id = ?
`

type DeleteRouterDNSProviderParams struct {
	TraefikID  int64  `json:"traefikId"`
	RouterName string `json:"routerName"`
	ProviderID int64  `json:"providerId"`
}

func (q *Queries) DeleteRouterDNSProvider(ctx context.Context, arg DeleteRouterDNSProviderParams) error {
	_, err := q.exec(ctx, q.deleteRouterDNSProviderStmt, deleteRouterDNSProvider, arg.TraefikID, arg.RouterName, arg.ProviderID)
	return err
}

const getRouterDNSProviderByID = `-- name: GetRouterDNSProviderByID :one
SELECT
  rdp.traefik_id, rdp.provider_id, rdp.router_name,
  dp.name as provider_name,
  dp.type as provider_type
FROM
  router_dns_provider rdp
  JOIN dns_providers dp ON dp.id = rdp.provider_id
WHERE
  rdp.traefik_id = ?
  AND rdp.router_name = ?
  AND rdp.provider_id = ?
`

type GetRouterDNSProviderByIDParams struct {
	TraefikID  int64  `json:"traefikId"`
	RouterName string `json:"routerName"`
	ProviderID int64  `json:"providerId"`
}

type GetRouterDNSProviderByIDRow struct {
	TraefikID    int64  `json:"traefikId"`
	ProviderID   int64  `json:"providerId"`
	RouterName   string `json:"routerName"`
	ProviderName string `json:"providerName"`
	ProviderType string `json:"providerType"`
}

func (q *Queries) GetRouterDNSProviderByID(ctx context.Context, arg GetRouterDNSProviderByIDParams) (GetRouterDNSProviderByIDRow, error) {
	row := q.queryRow(ctx, q.getRouterDNSProviderByIDStmt, getRouterDNSProviderByID, arg.TraefikID, arg.RouterName, arg.ProviderID)
	var i GetRouterDNSProviderByIDRow
	err := row.Scan(
		&i.TraefikID,
		&i.ProviderID,
		&i.RouterName,
		&i.ProviderName,
		&i.ProviderType,
	)
	return i, err
}

const getRouterDNSProviders = `-- name: GetRouterDNSProviders :many
SELECT
  rdp.traefik_id, rdp.provider_id, rdp.router_name,
  dp.name as provider_name,
  dp.type as provider_type
FROM
  router_dns_provider rdp
  JOIN dns_providers dp ON dp.id = rdp.provider_id
WHERE
  rdp.traefik_id = ?
  AND rdp.router_name = ?
`

type GetRouterDNSProvidersParams struct {
	TraefikID  int64  `json:"traefikId"`
	RouterName string `json:"routerName"`
}

type GetRouterDNSProvidersRow struct {
	TraefikID    int64  `json:"traefikId"`
	ProviderID   int64  `json:"providerId"`
	RouterName   string `json:"routerName"`
	ProviderName string `json:"providerName"`
	ProviderType string `json:"providerType"`
}

func (q *Queries) GetRouterDNSProviders(ctx context.Context, arg GetRouterDNSProvidersParams) ([]GetRouterDNSProvidersRow, error) {
	rows, err := q.query(ctx, q.getRouterDNSProvidersStmt, getRouterDNSProviders, arg.TraefikID, arg.RouterName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRouterDNSProvidersRow
	for rows.Next() {
		var i GetRouterDNSProvidersRow
		if err := rows.Scan(
			&i.TraefikID,
			&i.ProviderID,
			&i.RouterName,
			&i.ProviderName,
			&i.ProviderType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRouterDNSProvidersByTraefikID = `-- name: ListRouterDNSProvidersByTraefikID :many
SELECT
  rdp.traefik_id, rdp.provider_id, rdp.router_name,
  dp.name as provider_name,
  dp.type as provider_type
FROM
  router_dns_provider rdp
  JOIN dns_providers dp ON dp.id = rdp.provider_id
WHERE
  rdp.traefik_id = ?
`

type ListRouterDNSProvidersByTraefikIDRow struct {
	TraefikID    int64  `json:"traefikId"`
	ProviderID   int64  `json:"providerId"`
	RouterName   string `json:"routerName"`
	ProviderName string `json:"providerName"`
	ProviderType string `json:"providerType"`
}

func (q *Queries) ListRouterDNSProvidersByTraefikID(ctx context.Context, traefikID int64) ([]ListRouterDNSProvidersByTraefikIDRow, error) {
	rows, err := q.query(ctx, q.listRouterDNSProvidersByTraefikIDStmt, listRouterDNSProvidersByTraefikID, traefikID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRouterDNSProvidersByTraefikIDRow
	for rows.Next() {
		var i ListRouterDNSProvidersByTraefikIDRow
		if err := rows.Scan(
			&i.TraefikID,
			&i.ProviderID,
			&i.RouterName,
			&i.ProviderName,
			&i.ProviderType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
