// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: router_dns_provider.sql

package db

import (
	"context"
)

const createRouterDNSProvider = `-- name: CreateRouterDNSProvider :exec
INSERT INTO
    router_dns_provider (traefik_id, provider_id, router_name)
VALUES
    (?, ?, ?)
`

type CreateRouterDNSProviderParams struct {
	TraefikID  int64  `json:"traefikId"`
	ProviderID int64  `json:"providerId"`
	RouterName string `json:"routerName"`
}

func (q *Queries) CreateRouterDNSProvider(ctx context.Context, arg CreateRouterDNSProviderParams) error {
	_, err := q.exec(ctx, q.createRouterDNSProviderStmt, createRouterDNSProvider, arg.TraefikID, arg.ProviderID, arg.RouterName)
	return err
}

const deleteRouterDNSProvider = `-- name: DeleteRouterDNSProvider :exec
DELETE FROM router_dns_provider
WHERE
    traefik_id = ?
    AND provider_id = ?
    AND router_name = ?
`

type DeleteRouterDNSProviderParams struct {
	TraefikID  int64  `json:"traefikId"`
	ProviderID int64  `json:"providerId"`
	RouterName string `json:"routerName"`
}

func (q *Queries) DeleteRouterDNSProvider(ctx context.Context, arg DeleteRouterDNSProviderParams) error {
	_, err := q.exec(ctx, q.deleteRouterDNSProviderStmt, deleteRouterDNSProvider, arg.TraefikID, arg.ProviderID, arg.RouterName)
	return err
}

const deleteRouterDNSProvidersByTraefik = `-- name: DeleteRouterDNSProvidersByTraefik :exec
DELETE FROM router_dns_provider
WHERE
    traefik_id = ?
`

func (q *Queries) DeleteRouterDNSProvidersByTraefik(ctx context.Context, traefikID int64) error {
	_, err := q.exec(ctx, q.deleteRouterDNSProvidersByTraefikStmt, deleteRouterDNSProvidersByTraefik, traefikID)
	return err
}

const getRouterDNSProviders = `-- name: GetRouterDNSProviders :many
SELECT
    traefik_id, provider_id, router_name
FROM
    router_dns_provider
WHERE
    traefik_id = ?
`

func (q *Queries) GetRouterDNSProviders(ctx context.Context, traefikID int64) ([]RouterDnsProvider, error) {
	rows, err := q.query(ctx, q.getRouterDNSProvidersStmt, getRouterDNSProviders, traefikID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RouterDnsProvider
	for rows.Next() {
		var i RouterDnsProvider
		if err := rows.Scan(&i.TraefikID, &i.ProviderID, &i.RouterName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
