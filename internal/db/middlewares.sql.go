// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: middlewares.sql

package db

import (
	"context"

	"github.com/MizuchiLabs/mantrae/internal/source"
)

const deleteHTTPMiddleware = `-- name: DeleteHTTPMiddleware :exec
UPDATE traefik_config
SET
    config = json_remove (config, '$.middlewares.' || ?3),
    last_sync = CURRENT_TIMESTAMP
WHERE
    profile_id = ?
    AND source = ?
`

type DeleteHTTPMiddlewareParams struct {
	Name      *string       `json:"name"`
	ProfileID int64         `json:"profileId"`
	Source    source.Source `json:"source"`
}

func (q *Queries) DeleteHTTPMiddleware(ctx context.Context, arg DeleteHTTPMiddlewareParams) error {
	_, err := q.exec(ctx, q.deleteHTTPMiddlewareStmt, deleteHTTPMiddleware, arg.Name, arg.ProfileID, arg.Source)
	return err
}

const deleteTCPMiddleware = `-- name: DeleteTCPMiddleware :exec
UPDATE traefik_config
SET
    config = json_remove (config, '$.tcpMiddlewares.' || ?3),
    last_sync = CURRENT_TIMESTAMP
WHERE
    profile_id = ?
    AND source = ?
`

type DeleteTCPMiddlewareParams struct {
	Name      *string       `json:"name"`
	ProfileID int64         `json:"profileId"`
	Source    source.Source `json:"source"`
}

func (q *Queries) DeleteTCPMiddleware(ctx context.Context, arg DeleteTCPMiddlewareParams) error {
	_, err := q.exec(ctx, q.deleteTCPMiddlewareStmt, deleteTCPMiddleware, arg.Name, arg.ProfileID, arg.Source)
	return err
}

const getHTTPMiddlewareByName = `-- name: GetHTTPMiddlewareByName :one
SELECT
    json_extract (config, '$.middlewares.' || ?3) as middleware
FROM
    traefik_config
WHERE
    profile_id = ?
    AND source = ?
`

type GetHTTPMiddlewareByNameParams struct {
	Name      *string       `json:"name"`
	ProfileID int64         `json:"profileId"`
	Source    source.Source `json:"source"`
}

func (q *Queries) GetHTTPMiddlewareByName(ctx context.Context, arg GetHTTPMiddlewareByNameParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getHTTPMiddlewareByNameStmt, getHTTPMiddlewareByName, arg.Name, arg.ProfileID, arg.Source)
	var middleware interface{}
	err := row.Scan(&middleware)
	return middleware, err
}

const getHTTPMiddlewaresBySource = `-- name: GetHTTPMiddlewaresBySource :one
SELECT
    json_extract (config, '$.middlewares') as middlewares
FROM
    traefik_config
WHERE
    profile_id = ?
    AND source = ?
`

type GetHTTPMiddlewaresBySourceParams struct {
	ProfileID int64         `json:"profileId"`
	Source    source.Source `json:"source"`
}

func (q *Queries) GetHTTPMiddlewaresBySource(ctx context.Context, arg GetHTTPMiddlewaresBySourceParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getHTTPMiddlewaresBySourceStmt, getHTTPMiddlewaresBySource, arg.ProfileID, arg.Source)
	var middlewares interface{}
	err := row.Scan(&middlewares)
	return middlewares, err
}

const getTCPMiddlewareByName = `-- name: GetTCPMiddlewareByName :one
SELECT
    json_extract (config, '$.tcpMiddlewares.' || ?3) as middleware
FROM
    traefik_config
WHERE
    profile_id = ?
    AND source = ?
`

type GetTCPMiddlewareByNameParams struct {
	Name      *string       `json:"name"`
	ProfileID int64         `json:"profileId"`
	Source    source.Source `json:"source"`
}

func (q *Queries) GetTCPMiddlewareByName(ctx context.Context, arg GetTCPMiddlewareByNameParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getTCPMiddlewareByNameStmt, getTCPMiddlewareByName, arg.Name, arg.ProfileID, arg.Source)
	var middleware interface{}
	err := row.Scan(&middleware)
	return middleware, err
}

const getTCPMiddlewaresBySource = `-- name: GetTCPMiddlewaresBySource :one
SELECT
    json_extract (config, '$.tcpMiddlewares') as middlewares
FROM
    traefik_config
WHERE
    profile_id = ?
    AND source = ?
`

type GetTCPMiddlewaresBySourceParams struct {
	ProfileID int64         `json:"profileId"`
	Source    source.Source `json:"source"`
}

func (q *Queries) GetTCPMiddlewaresBySource(ctx context.Context, arg GetTCPMiddlewaresBySourceParams) (interface{}, error) {
	row := q.queryRow(ctx, q.getTCPMiddlewaresBySourceStmt, getTCPMiddlewaresBySource, arg.ProfileID, arg.Source)
	var middlewares interface{}
	err := row.Scan(&middlewares)
	return middlewares, err
}

const upsertHTTPMiddleware = `-- name: UpsertHTTPMiddleware :exec
UPDATE traefik_config
SET
    config = json_set (
        config,
        '$.middlewares.' || ?3,
        ?4
    ),
    last_sync = CURRENT_TIMESTAMP
WHERE
    profile_id = ?
    AND source = ?
`

type UpsertHTTPMiddlewareParams struct {
	Name           *string       `json:"name"`
	MiddlewareJson interface{}   `json:"middlewareJson"`
	ProfileID      int64         `json:"profileId"`
	Source         source.Source `json:"source"`
}

func (q *Queries) UpsertHTTPMiddleware(ctx context.Context, arg UpsertHTTPMiddlewareParams) error {
	_, err := q.exec(ctx, q.upsertHTTPMiddlewareStmt, upsertHTTPMiddleware,
		arg.Name,
		arg.MiddlewareJson,
		arg.ProfileID,
		arg.Source,
	)
	return err
}

const upsertTCPMiddleware = `-- name: UpsertTCPMiddleware :exec
UPDATE traefik_config
SET
    config = json_set (
        config,
        '$.tcpMiddlewares.' || ?3,
        ?4
    ),
    last_sync = CURRENT_TIMESTAMP
WHERE
    profile_id = ?
    AND source = ?
`

type UpsertTCPMiddlewareParams struct {
	Name           *string       `json:"name"`
	MiddlewareJson interface{}   `json:"middlewareJson"`
	ProfileID      int64         `json:"profileId"`
	Source         source.Source `json:"source"`
}

func (q *Queries) UpsertTCPMiddleware(ctx context.Context, arg UpsertTCPMiddlewareParams) error {
	_, err := q.exec(ctx, q.upsertTCPMiddlewareStmt, upsertTCPMiddleware,
		arg.Name,
		arg.MiddlewareJson,
		arg.ProfileID,
		arg.Source,
	)
	return err
}
