// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createConfigStmt, err = db.PrepareContext(ctx, createConfig); err != nil {
		return nil, fmt.Errorf("error preparing query CreateConfig: %w", err)
	}
	if q.createCredentialStmt, err = db.PrepareContext(ctx, createCredential); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCredential: %w", err)
	}
	if q.createProfileStmt, err = db.PrepareContext(ctx, createProfile); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProfile: %w", err)
	}
	if q.createProviderStmt, err = db.PrepareContext(ctx, createProvider); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProvider: %w", err)
	}
	if q.deleteConfigByProfileIDStmt, err = db.PrepareContext(ctx, deleteConfigByProfileID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteConfigByProfileID: %w", err)
	}
	if q.deleteConfigByProfileNameStmt, err = db.PrepareContext(ctx, deleteConfigByProfileName); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteConfigByProfileName: %w", err)
	}
	if q.deleteCredentialByIDStmt, err = db.PrepareContext(ctx, deleteCredentialByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCredentialByID: %w", err)
	}
	if q.deleteCredentialByUsernameStmt, err = db.PrepareContext(ctx, deleteCredentialByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCredentialByUsername: %w", err)
	}
	if q.deleteProfileByIDStmt, err = db.PrepareContext(ctx, deleteProfileByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProfileByID: %w", err)
	}
	if q.deleteProfileByNameStmt, err = db.PrepareContext(ctx, deleteProfileByName); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProfileByName: %w", err)
	}
	if q.deleteProviderByIDStmt, err = db.PrepareContext(ctx, deleteProviderByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProviderByID: %w", err)
	}
	if q.deleteProviderByNameStmt, err = db.PrepareContext(ctx, deleteProviderByName); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProviderByName: %w", err)
	}
	if q.getConfigByProfileIDStmt, err = db.PrepareContext(ctx, getConfigByProfileID); err != nil {
		return nil, fmt.Errorf("error preparing query GetConfigByProfileID: %w", err)
	}
	if q.getConfigByProfileNameStmt, err = db.PrepareContext(ctx, getConfigByProfileName); err != nil {
		return nil, fmt.Errorf("error preparing query GetConfigByProfileName: %w", err)
	}
	if q.getCredentialByIDStmt, err = db.PrepareContext(ctx, getCredentialByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetCredentialByID: %w", err)
	}
	if q.getCredentialByUsernameStmt, err = db.PrepareContext(ctx, getCredentialByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetCredentialByUsername: %w", err)
	}
	if q.getProfileByIDStmt, err = db.PrepareContext(ctx, getProfileByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetProfileByID: %w", err)
	}
	if q.getProfileByNameStmt, err = db.PrepareContext(ctx, getProfileByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetProfileByName: %w", err)
	}
	if q.getProviderByIDStmt, err = db.PrepareContext(ctx, getProviderByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetProviderByID: %w", err)
	}
	if q.getProviderByNameStmt, err = db.PrepareContext(ctx, getProviderByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetProviderByName: %w", err)
	}
	if q.listConfigsStmt, err = db.PrepareContext(ctx, listConfigs); err != nil {
		return nil, fmt.Errorf("error preparing query ListConfigs: %w", err)
	}
	if q.listCredentialsStmt, err = db.PrepareContext(ctx, listCredentials); err != nil {
		return nil, fmt.Errorf("error preparing query ListCredentials: %w", err)
	}
	if q.listProfilesStmt, err = db.PrepareContext(ctx, listProfiles); err != nil {
		return nil, fmt.Errorf("error preparing query ListProfiles: %w", err)
	}
	if q.listProvidersStmt, err = db.PrepareContext(ctx, listProviders); err != nil {
		return nil, fmt.Errorf("error preparing query ListProviders: %w", err)
	}
	if q.updateConfigStmt, err = db.PrepareContext(ctx, updateConfig); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateConfig: %w", err)
	}
	if q.updateCredentialStmt, err = db.PrepareContext(ctx, updateCredential); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCredential: %w", err)
	}
	if q.updateProfileStmt, err = db.PrepareContext(ctx, updateProfile); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProfile: %w", err)
	}
	if q.updateProviderStmt, err = db.PrepareContext(ctx, updateProvider); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProvider: %w", err)
	}
	if q.validateAuthStmt, err = db.PrepareContext(ctx, validateAuth); err != nil {
		return nil, fmt.Errorf("error preparing query ValidateAuth: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createConfigStmt != nil {
		if cerr := q.createConfigStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createConfigStmt: %w", cerr)
		}
	}
	if q.createCredentialStmt != nil {
		if cerr := q.createCredentialStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCredentialStmt: %w", cerr)
		}
	}
	if q.createProfileStmt != nil {
		if cerr := q.createProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProfileStmt: %w", cerr)
		}
	}
	if q.createProviderStmt != nil {
		if cerr := q.createProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProviderStmt: %w", cerr)
		}
	}
	if q.deleteConfigByProfileIDStmt != nil {
		if cerr := q.deleteConfigByProfileIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteConfigByProfileIDStmt: %w", cerr)
		}
	}
	if q.deleteConfigByProfileNameStmt != nil {
		if cerr := q.deleteConfigByProfileNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteConfigByProfileNameStmt: %w", cerr)
		}
	}
	if q.deleteCredentialByIDStmt != nil {
		if cerr := q.deleteCredentialByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCredentialByIDStmt: %w", cerr)
		}
	}
	if q.deleteCredentialByUsernameStmt != nil {
		if cerr := q.deleteCredentialByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCredentialByUsernameStmt: %w", cerr)
		}
	}
	if q.deleteProfileByIDStmt != nil {
		if cerr := q.deleteProfileByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProfileByIDStmt: %w", cerr)
		}
	}
	if q.deleteProfileByNameStmt != nil {
		if cerr := q.deleteProfileByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProfileByNameStmt: %w", cerr)
		}
	}
	if q.deleteProviderByIDStmt != nil {
		if cerr := q.deleteProviderByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProviderByIDStmt: %w", cerr)
		}
	}
	if q.deleteProviderByNameStmt != nil {
		if cerr := q.deleteProviderByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProviderByNameStmt: %w", cerr)
		}
	}
	if q.getConfigByProfileIDStmt != nil {
		if cerr := q.getConfigByProfileIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getConfigByProfileIDStmt: %w", cerr)
		}
	}
	if q.getConfigByProfileNameStmt != nil {
		if cerr := q.getConfigByProfileNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getConfigByProfileNameStmt: %w", cerr)
		}
	}
	if q.getCredentialByIDStmt != nil {
		if cerr := q.getCredentialByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCredentialByIDStmt: %w", cerr)
		}
	}
	if q.getCredentialByUsernameStmt != nil {
		if cerr := q.getCredentialByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCredentialByUsernameStmt: %w", cerr)
		}
	}
	if q.getProfileByIDStmt != nil {
		if cerr := q.getProfileByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProfileByIDStmt: %w", cerr)
		}
	}
	if q.getProfileByNameStmt != nil {
		if cerr := q.getProfileByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProfileByNameStmt: %w", cerr)
		}
	}
	if q.getProviderByIDStmt != nil {
		if cerr := q.getProviderByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProviderByIDStmt: %w", cerr)
		}
	}
	if q.getProviderByNameStmt != nil {
		if cerr := q.getProviderByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProviderByNameStmt: %w", cerr)
		}
	}
	if q.listConfigsStmt != nil {
		if cerr := q.listConfigsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listConfigsStmt: %w", cerr)
		}
	}
	if q.listCredentialsStmt != nil {
		if cerr := q.listCredentialsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCredentialsStmt: %w", cerr)
		}
	}
	if q.listProfilesStmt != nil {
		if cerr := q.listProfilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listProfilesStmt: %w", cerr)
		}
	}
	if q.listProvidersStmt != nil {
		if cerr := q.listProvidersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listProvidersStmt: %w", cerr)
		}
	}
	if q.updateConfigStmt != nil {
		if cerr := q.updateConfigStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateConfigStmt: %w", cerr)
		}
	}
	if q.updateCredentialStmt != nil {
		if cerr := q.updateCredentialStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCredentialStmt: %w", cerr)
		}
	}
	if q.updateProfileStmt != nil {
		if cerr := q.updateProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProfileStmt: %w", cerr)
		}
	}
	if q.updateProviderStmt != nil {
		if cerr := q.updateProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProviderStmt: %w", cerr)
		}
	}
	if q.validateAuthStmt != nil {
		if cerr := q.validateAuthStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing validateAuthStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                             DBTX
	tx                             *sql.Tx
	createConfigStmt               *sql.Stmt
	createCredentialStmt           *sql.Stmt
	createProfileStmt              *sql.Stmt
	createProviderStmt             *sql.Stmt
	deleteConfigByProfileIDStmt    *sql.Stmt
	deleteConfigByProfileNameStmt  *sql.Stmt
	deleteCredentialByIDStmt       *sql.Stmt
	deleteCredentialByUsernameStmt *sql.Stmt
	deleteProfileByIDStmt          *sql.Stmt
	deleteProfileByNameStmt        *sql.Stmt
	deleteProviderByIDStmt         *sql.Stmt
	deleteProviderByNameStmt       *sql.Stmt
	getConfigByProfileIDStmt       *sql.Stmt
	getConfigByProfileNameStmt     *sql.Stmt
	getCredentialByIDStmt          *sql.Stmt
	getCredentialByUsernameStmt    *sql.Stmt
	getProfileByIDStmt             *sql.Stmt
	getProfileByNameStmt           *sql.Stmt
	getProviderByIDStmt            *sql.Stmt
	getProviderByNameStmt          *sql.Stmt
	listConfigsStmt                *sql.Stmt
	listCredentialsStmt            *sql.Stmt
	listProfilesStmt               *sql.Stmt
	listProvidersStmt              *sql.Stmt
	updateConfigStmt               *sql.Stmt
	updateCredentialStmt           *sql.Stmt
	updateProfileStmt              *sql.Stmt
	updateProviderStmt             *sql.Stmt
	validateAuthStmt               *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                             tx,
		tx:                             tx,
		createConfigStmt:               q.createConfigStmt,
		createCredentialStmt:           q.createCredentialStmt,
		createProfileStmt:              q.createProfileStmt,
		createProviderStmt:             q.createProviderStmt,
		deleteConfigByProfileIDStmt:    q.deleteConfigByProfileIDStmt,
		deleteConfigByProfileNameStmt:  q.deleteConfigByProfileNameStmt,
		deleteCredentialByIDStmt:       q.deleteCredentialByIDStmt,
		deleteCredentialByUsernameStmt: q.deleteCredentialByUsernameStmt,
		deleteProfileByIDStmt:          q.deleteProfileByIDStmt,
		deleteProfileByNameStmt:        q.deleteProfileByNameStmt,
		deleteProviderByIDStmt:         q.deleteProviderByIDStmt,
		deleteProviderByNameStmt:       q.deleteProviderByNameStmt,
		getConfigByProfileIDStmt:       q.getConfigByProfileIDStmt,
		getConfigByProfileNameStmt:     q.getConfigByProfileNameStmt,
		getCredentialByIDStmt:          q.getCredentialByIDStmt,
		getCredentialByUsernameStmt:    q.getCredentialByUsernameStmt,
		getProfileByIDStmt:             q.getProfileByIDStmt,
		getProfileByNameStmt:           q.getProfileByNameStmt,
		getProviderByIDStmt:            q.getProviderByIDStmt,
		getProviderByNameStmt:          q.getProviderByNameStmt,
		listConfigsStmt:                q.listConfigsStmt,
		listCredentialsStmt:            q.listCredentialsStmt,
		listProfilesStmt:               q.listProfilesStmt,
		listProvidersStmt:              q.listProvidersStmt,
		updateConfigStmt:               q.updateConfigStmt,
		updateCredentialStmt:           q.updateCredentialStmt,
		updateProfileStmt:              q.updateProfileStmt,
		updateProviderStmt:             q.updateProviderStmt,
		validateAuthStmt:               q.validateAuthStmt,
	}
}
