// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: traefik.sql

package db

import (
	"context"

	"github.com/MizuchiLabs/mantrae/internal/source"
)

const createTraefikConfig = `-- name: CreateTraefikConfig :exec
INSERT INTO
  traefik (
    profile_id,
    source,
    entrypoints,
    overview,
    version,
    config
  )
VALUES
  (?, ?, ?, ?, ?, ?)
`

type CreateTraefikConfigParams struct {
	ProfileID   int64                 `json:"profileId"`
	Source      source.Source         `json:"source"`
	Entrypoints *TraefikEntryPoints   `json:"entrypoints"`
	Overview    *TraefikOverview      `json:"overview"`
	Version     *string               `json:"version"`
	Config      *TraefikConfiguration `json:"config"`
}

func (q *Queries) CreateTraefikConfig(ctx context.Context, arg CreateTraefikConfigParams) error {
	_, err := q.exec(ctx, q.createTraefikConfigStmt, createTraefikConfig,
		arg.ProfileID,
		arg.Source,
		arg.Entrypoints,
		arg.Overview,
		arg.Version,
		arg.Config,
	)
	return err
}

const deleteTraefikConfig = `-- name: DeleteTraefikConfig :exec
DELETE FROM traefik
WHERE
  id = ?
`

func (q *Queries) DeleteTraefikConfig(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteTraefikConfigStmt, deleteTraefikConfig, id)
	return err
}

const getTraefikConfig = `-- name: GetTraefikConfig :one
SELECT
  id, profile_id, source, entrypoints, overview, config, version, created_at, updated_at
FROM
  traefik
WHERE
  id = ?
`

func (q *Queries) GetTraefikConfig(ctx context.Context, id int64) (Traefik, error) {
	row := q.queryRow(ctx, q.getTraefikConfigStmt, getTraefikConfig, id)
	var i Traefik
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.Source,
		&i.Entrypoints,
		&i.Overview,
		&i.Config,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTraefikConfigBySource = `-- name: GetTraefikConfigBySource :one
SELECT
  id, profile_id, source, entrypoints, overview, config, version, created_at, updated_at
FROM
  traefik
WHERE
  profile_id = ?
  AND source = ?
`

type GetTraefikConfigBySourceParams struct {
	ProfileID int64         `json:"profileId"`
	Source    source.Source `json:"source"`
}

func (q *Queries) GetTraefikConfigBySource(ctx context.Context, arg GetTraefikConfigBySourceParams) (Traefik, error) {
	row := q.queryRow(ctx, q.getTraefikConfigBySourceStmt, getTraefikConfigBySource, arg.ProfileID, arg.Source)
	var i Traefik
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.Source,
		&i.Entrypoints,
		&i.Overview,
		&i.Config,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTraefikIDs = `-- name: ListTraefikIDs :many
SELECT
  id
FROM
  traefik
`

func (q *Queries) ListTraefikIDs(ctx context.Context) ([]int64, error) {
	rows, err := q.query(ctx, q.listTraefikIDsStmt, listTraefikIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTraefikConfig = `-- name: UpdateTraefikConfig :exec
UPDATE traefik
SET
  entrypoints = ?,
  overview = ?,
  config = ?,
  version = ?,
  updated_at = CURRENT_TIMESTAMP
WHERE
  profile_id = ?
  AND source = ?
`

type UpdateTraefikConfigParams struct {
	Entrypoints *TraefikEntryPoints   `json:"entrypoints"`
	Overview    *TraefikOverview      `json:"overview"`
	Config      *TraefikConfiguration `json:"config"`
	Version     *string               `json:"version"`
	ProfileID   int64                 `json:"profileId"`
	Source      source.Source         `json:"source"`
}

func (q *Queries) UpdateTraefikConfig(ctx context.Context, arg UpdateTraefikConfigParams) error {
	_, err := q.exec(ctx, q.updateTraefikConfigStmt, updateTraefikConfig,
		arg.Entrypoints,
		arg.Overview,
		arg.Config,
		arg.Version,
		arg.ProfileID,
		arg.Source,
	)
	return err
}
